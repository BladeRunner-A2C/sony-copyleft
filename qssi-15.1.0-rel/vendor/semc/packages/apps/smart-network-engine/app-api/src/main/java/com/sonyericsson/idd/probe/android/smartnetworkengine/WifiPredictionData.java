// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smartnetworkengine/wifi_prediction_data.proto

package com.sonyericsson.idd.probe.android.smartnetworkengine;

public final class WifiPredictionData {
  private WifiPredictionData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public static final class SneWifiEvent extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneWifiEvent.newBuilder() to construct.
    private SneWifiEvent() {
      initFields();
    }
    private SneWifiEvent(boolean noInit) {}
    
    private static final SneWifiEvent defaultInstance;
    public static SneWifiEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneWifiEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional string logger_version = 1;
    public static final int LOGGER_VERSION_FIELD_NUMBER = 1;
    private boolean hasLoggerVersion;
    private java.lang.String loggerVersion_ = "";
    public boolean hasLoggerVersion() { return hasLoggerVersion; }
    public java.lang.String getLoggerVersion() { return loggerVersion_; }
    
    // repeated .smartnetworkengine.SneRuntimeStats runtime_stats = 2;
    public static final int RUNTIME_STATS_FIELD_NUMBER = 2;
    private java.util.List<com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats> runtimeStats_ =
      java.util.Collections.emptyList();
    public java.util.List<com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats> getRuntimeStatsList() {
      return runtimeStats_;
    }
    public int getRuntimeStatsCount() { return runtimeStats_.size(); }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats getRuntimeStats(int index) {
      return runtimeStats_.get(index);
    }
    
    // optional .smartnetworkengine.SneLoggedInfo logged_info = 3;
    public static final int LOGGED_INFO_FIELD_NUMBER = 3;
    private boolean hasLoggedInfo;
    private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo loggedInfo_;
    public boolean hasLoggedInfo() { return hasLoggedInfo; }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo getLoggedInfo() { return loggedInfo_; }
    
    private void initFields() {
      loggedInfo_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasLoggerVersion()) {
        output.writeString(1, getLoggerVersion());
      }
      for (com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats element : getRuntimeStatsList()) {
        output.writeMessage(2, element);
      }
      if (hasLoggedInfo()) {
        output.writeMessage(3, getLoggedInfo());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasLoggerVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getLoggerVersion());
      }
      for (com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats element : getRuntimeStatsList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, element);
      }
      if (hasLoggedInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLoggedInfo());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.runtimeStats_ != java.util.Collections.EMPTY_LIST) {
          result.runtimeStats_ =
            java.util.Collections.unmodifiableList(result.runtimeStats_);
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiEvent.getDefaultInstance()) return this;
        if (other.hasLoggerVersion()) {
          setLoggerVersion(other.getLoggerVersion());
        }
        if (!other.runtimeStats_.isEmpty()) {
          if (result.runtimeStats_.isEmpty()) {
            result.runtimeStats_ = new java.util.ArrayList<com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats>();
          }
          result.runtimeStats_.addAll(other.runtimeStats_);
        }
        if (other.hasLoggedInfo()) {
          mergeLoggedInfo(other.getLoggedInfo());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setLoggerVersion(input.readString());
              break;
            }
            case 18: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRuntimeStats(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.newBuilder();
              if (hasLoggedInfo()) {
                subBuilder.mergeFrom(getLoggedInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setLoggedInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional string logger_version = 1;
      public boolean hasLoggerVersion() {
        return result.hasLoggerVersion();
      }
      public java.lang.String getLoggerVersion() {
        return result.getLoggerVersion();
      }
      public Builder setLoggerVersion(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasLoggerVersion = true;
        result.loggerVersion_ = value;
        return this;
      }
      public Builder clearLoggerVersion() {
        result.hasLoggerVersion = false;
        result.loggerVersion_ = getDefaultInstance().getLoggerVersion();
        return this;
      }
      
      // repeated .smartnetworkengine.SneRuntimeStats runtime_stats = 2;
      public java.util.List<com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats> getRuntimeStatsList() {
        return java.util.Collections.unmodifiableList(result.runtimeStats_);
      }
      public int getRuntimeStatsCount() {
        return result.getRuntimeStatsCount();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats getRuntimeStats(int index) {
        return result.getRuntimeStats(index);
      }
      public Builder setRuntimeStats(int index, com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.runtimeStats_.set(index, value);
        return this;
      }
      public Builder setRuntimeStats(int index, com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats.Builder builderForValue) {
        result.runtimeStats_.set(index, builderForValue.build());
        return this;
      }
      public Builder addRuntimeStats(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.runtimeStats_.isEmpty()) {
          result.runtimeStats_ = new java.util.ArrayList<com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats>();
        }
        result.runtimeStats_.add(value);
        return this;
      }
      public Builder addRuntimeStats(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats.Builder builderForValue) {
        if (result.runtimeStats_.isEmpty()) {
          result.runtimeStats_ = new java.util.ArrayList<com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats>();
        }
        result.runtimeStats_.add(builderForValue.build());
        return this;
      }
      public Builder addAllRuntimeStats(
          java.lang.Iterable<? extends com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats> values) {
        if (result.runtimeStats_.isEmpty()) {
          result.runtimeStats_ = new java.util.ArrayList<com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats>();
        }
        super.addAll(values, result.runtimeStats_);
        return this;
      }
      public Builder clearRuntimeStats() {
        result.runtimeStats_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional .smartnetworkengine.SneLoggedInfo logged_info = 3;
      public boolean hasLoggedInfo() {
        return result.hasLoggedInfo();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo getLoggedInfo() {
        return result.getLoggedInfo();
      }
      public Builder setLoggedInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasLoggedInfo = true;
        result.loggedInfo_ = value;
        return this;
      }
      public Builder setLoggedInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.Builder builderForValue) {
        result.hasLoggedInfo = true;
        result.loggedInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeLoggedInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo value) {
        if (result.hasLoggedInfo() &&
            result.loggedInfo_ != com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.getDefaultInstance()) {
          result.loggedInfo_ =
            com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.newBuilder(result.loggedInfo_).mergeFrom(value).buildPartial();
        } else {
          result.loggedInfo_ = value;
        }
        result.hasLoggedInfo = true;
        return this;
      }
      public Builder clearLoggedInfo() {
        result.hasLoggedInfo = false;
        result.loggedInfo_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneWifiEvent)
    }
    
    static {
      defaultInstance = new SneWifiEvent(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneWifiEvent)
  }
  
  public static final class SneRuntimeStats extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneRuntimeStats.newBuilder() to construct.
    private SneRuntimeStats() {
      initFields();
    }
    private SneRuntimeStats(boolean noInit) {}
    
    private static final SneRuntimeStats defaultInstance;
    public static SneRuntimeStats getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneRuntimeStats getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional .smartnetworkengine.SneWifiInfo wifi_info = 1;
    public static final int WIFI_INFO_FIELD_NUMBER = 1;
    private boolean hasWifiInfo;
    private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo wifiInfo_;
    public boolean hasWifiInfo() { return hasWifiInfo; }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo getWifiInfo() { return wifiInfo_; }
    
    // optional .smartnetworkengine.SneWifiTrafficStats wifi_traffic_stats = 2;
    public static final int WIFI_TRAFFIC_STATS_FIELD_NUMBER = 2;
    private boolean hasWifiTrafficStats;
    private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats wifiTrafficStats_;
    public boolean hasWifiTrafficStats() { return hasWifiTrafficStats; }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats getWifiTrafficStats() { return wifiTrafficStats_; }
    
    // optional .smartnetworkengine.SneTcpStats tcp_stats = 3;
    public static final int TCP_STATS_FIELD_NUMBER = 3;
    private boolean hasTcpStats;
    private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats tcpStats_;
    public boolean hasTcpStats() { return hasTcpStats; }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats getTcpStats() { return tcpStats_; }
    
    // optional .smartnetworkengine.SneSensorData sensor_data = 4;
    public static final int SENSOR_DATA_FIELD_NUMBER = 4;
    private boolean hasSensorData;
    private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData sensorData_;
    public boolean hasSensorData() { return hasSensorData; }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData getSensorData() { return sensorData_; }
    
    // optional .smartnetworkengine.SneInferenceResult inference_result = 5;
    public static final int INFERENCE_RESULT_FIELD_NUMBER = 5;
    private boolean hasInferenceResult;
    private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult inferenceResult_;
    public boolean hasInferenceResult() { return hasInferenceResult; }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult getInferenceResult() { return inferenceResult_; }
    
    // optional .smartnetworkengine.SneCellularInfo cellular_info = 6;
    public static final int CELLULAR_INFO_FIELD_NUMBER = 6;
    private boolean hasCellularInfo;
    private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo cellularInfo_;
    public boolean hasCellularInfo() { return hasCellularInfo; }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo getCellularInfo() { return cellularInfo_; }
    
    private void initFields() {
      wifiInfo_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.getDefaultInstance();
      wifiTrafficStats_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.getDefaultInstance();
      tcpStats_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.getDefaultInstance();
      sensorData_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.getDefaultInstance();
      inferenceResult_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.getDefaultInstance();
      cellularInfo_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasWifiInfo()) {
        output.writeMessage(1, getWifiInfo());
      }
      if (hasWifiTrafficStats()) {
        output.writeMessage(2, getWifiTrafficStats());
      }
      if (hasTcpStats()) {
        output.writeMessage(3, getTcpStats());
      }
      if (hasSensorData()) {
        output.writeMessage(4, getSensorData());
      }
      if (hasInferenceResult()) {
        output.writeMessage(5, getInferenceResult());
      }
      if (hasCellularInfo()) {
        output.writeMessage(6, getCellularInfo());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasWifiInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getWifiInfo());
      }
      if (hasWifiTrafficStats()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getWifiTrafficStats());
      }
      if (hasTcpStats()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTcpStats());
      }
      if (hasSensorData()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSensorData());
      }
      if (hasInferenceResult()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getInferenceResult());
      }
      if (hasCellularInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getCellularInfo());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneRuntimeStats.getDefaultInstance()) return this;
        if (other.hasWifiInfo()) {
          mergeWifiInfo(other.getWifiInfo());
        }
        if (other.hasWifiTrafficStats()) {
          mergeWifiTrafficStats(other.getWifiTrafficStats());
        }
        if (other.hasTcpStats()) {
          mergeTcpStats(other.getTcpStats());
        }
        if (other.hasSensorData()) {
          mergeSensorData(other.getSensorData());
        }
        if (other.hasInferenceResult()) {
          mergeInferenceResult(other.getInferenceResult());
        }
        if (other.hasCellularInfo()) {
          mergeCellularInfo(other.getCellularInfo());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.newBuilder();
              if (hasWifiInfo()) {
                subBuilder.mergeFrom(getWifiInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setWifiInfo(subBuilder.buildPartial());
              break;
            }
            case 18: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.newBuilder();
              if (hasWifiTrafficStats()) {
                subBuilder.mergeFrom(getWifiTrafficStats());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setWifiTrafficStats(subBuilder.buildPartial());
              break;
            }
            case 26: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.newBuilder();
              if (hasTcpStats()) {
                subBuilder.mergeFrom(getTcpStats());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setTcpStats(subBuilder.buildPartial());
              break;
            }
            case 34: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.newBuilder();
              if (hasSensorData()) {
                subBuilder.mergeFrom(getSensorData());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSensorData(subBuilder.buildPartial());
              break;
            }
            case 42: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.newBuilder();
              if (hasInferenceResult()) {
                subBuilder.mergeFrom(getInferenceResult());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setInferenceResult(subBuilder.buildPartial());
              break;
            }
            case 50: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.newBuilder();
              if (hasCellularInfo()) {
                subBuilder.mergeFrom(getCellularInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCellularInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .smartnetworkengine.SneWifiInfo wifi_info = 1;
      public boolean hasWifiInfo() {
        return result.hasWifiInfo();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo getWifiInfo() {
        return result.getWifiInfo();
      }
      public Builder setWifiInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasWifiInfo = true;
        result.wifiInfo_ = value;
        return this;
      }
      public Builder setWifiInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.Builder builderForValue) {
        result.hasWifiInfo = true;
        result.wifiInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeWifiInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo value) {
        if (result.hasWifiInfo() &&
            result.wifiInfo_ != com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.getDefaultInstance()) {
          result.wifiInfo_ =
            com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.newBuilder(result.wifiInfo_).mergeFrom(value).buildPartial();
        } else {
          result.wifiInfo_ = value;
        }
        result.hasWifiInfo = true;
        return this;
      }
      public Builder clearWifiInfo() {
        result.hasWifiInfo = false;
        result.wifiInfo_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneWifiTrafficStats wifi_traffic_stats = 2;
      public boolean hasWifiTrafficStats() {
        return result.hasWifiTrafficStats();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats getWifiTrafficStats() {
        return result.getWifiTrafficStats();
      }
      public Builder setWifiTrafficStats(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasWifiTrafficStats = true;
        result.wifiTrafficStats_ = value;
        return this;
      }
      public Builder setWifiTrafficStats(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.Builder builderForValue) {
        result.hasWifiTrafficStats = true;
        result.wifiTrafficStats_ = builderForValue.build();
        return this;
      }
      public Builder mergeWifiTrafficStats(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats value) {
        if (result.hasWifiTrafficStats() &&
            result.wifiTrafficStats_ != com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.getDefaultInstance()) {
          result.wifiTrafficStats_ =
            com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.newBuilder(result.wifiTrafficStats_).mergeFrom(value).buildPartial();
        } else {
          result.wifiTrafficStats_ = value;
        }
        result.hasWifiTrafficStats = true;
        return this;
      }
      public Builder clearWifiTrafficStats() {
        result.hasWifiTrafficStats = false;
        result.wifiTrafficStats_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneTcpStats tcp_stats = 3;
      public boolean hasTcpStats() {
        return result.hasTcpStats();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats getTcpStats() {
        return result.getTcpStats();
      }
      public Builder setTcpStats(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasTcpStats = true;
        result.tcpStats_ = value;
        return this;
      }
      public Builder setTcpStats(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.Builder builderForValue) {
        result.hasTcpStats = true;
        result.tcpStats_ = builderForValue.build();
        return this;
      }
      public Builder mergeTcpStats(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats value) {
        if (result.hasTcpStats() &&
            result.tcpStats_ != com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.getDefaultInstance()) {
          result.tcpStats_ =
            com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.newBuilder(result.tcpStats_).mergeFrom(value).buildPartial();
        } else {
          result.tcpStats_ = value;
        }
        result.hasTcpStats = true;
        return this;
      }
      public Builder clearTcpStats() {
        result.hasTcpStats = false;
        result.tcpStats_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneSensorData sensor_data = 4;
      public boolean hasSensorData() {
        return result.hasSensorData();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData getSensorData() {
        return result.getSensorData();
      }
      public Builder setSensorData(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSensorData = true;
        result.sensorData_ = value;
        return this;
      }
      public Builder setSensorData(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.Builder builderForValue) {
        result.hasSensorData = true;
        result.sensorData_ = builderForValue.build();
        return this;
      }
      public Builder mergeSensorData(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData value) {
        if (result.hasSensorData() &&
            result.sensorData_ != com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.getDefaultInstance()) {
          result.sensorData_ =
            com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.newBuilder(result.sensorData_).mergeFrom(value).buildPartial();
        } else {
          result.sensorData_ = value;
        }
        result.hasSensorData = true;
        return this;
      }
      public Builder clearSensorData() {
        result.hasSensorData = false;
        result.sensorData_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneInferenceResult inference_result = 5;
      public boolean hasInferenceResult() {
        return result.hasInferenceResult();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult getInferenceResult() {
        return result.getInferenceResult();
      }
      public Builder setInferenceResult(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasInferenceResult = true;
        result.inferenceResult_ = value;
        return this;
      }
      public Builder setInferenceResult(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.Builder builderForValue) {
        result.hasInferenceResult = true;
        result.inferenceResult_ = builderForValue.build();
        return this;
      }
      public Builder mergeInferenceResult(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult value) {
        if (result.hasInferenceResult() &&
            result.inferenceResult_ != com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.getDefaultInstance()) {
          result.inferenceResult_ =
            com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.newBuilder(result.inferenceResult_).mergeFrom(value).buildPartial();
        } else {
          result.inferenceResult_ = value;
        }
        result.hasInferenceResult = true;
        return this;
      }
      public Builder clearInferenceResult() {
        result.hasInferenceResult = false;
        result.inferenceResult_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneCellularInfo cellular_info = 6;
      public boolean hasCellularInfo() {
        return result.hasCellularInfo();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo getCellularInfo() {
        return result.getCellularInfo();
      }
      public Builder setCellularInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCellularInfo = true;
        result.cellularInfo_ = value;
        return this;
      }
      public Builder setCellularInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.Builder builderForValue) {
        result.hasCellularInfo = true;
        result.cellularInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeCellularInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo value) {
        if (result.hasCellularInfo() &&
            result.cellularInfo_ != com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.getDefaultInstance()) {
          result.cellularInfo_ =
            com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.newBuilder(result.cellularInfo_).mergeFrom(value).buildPartial();
        } else {
          result.cellularInfo_ = value;
        }
        result.hasCellularInfo = true;
        return this;
      }
      public Builder clearCellularInfo() {
        result.hasCellularInfo = false;
        result.cellularInfo_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneRuntimeStats)
    }
    
    static {
      defaultInstance = new SneRuntimeStats(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneRuntimeStats)
  }
  
  public static final class SneWifiInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneWifiInfo.newBuilder() to construct.
    private SneWifiInfo() {
      initFields();
    }
    private SneWifiInfo(boolean noInit) {}
    
    private static final SneWifiInfo defaultInstance;
    public static SneWifiInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneWifiInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int32 link_speed = 1;
    public static final int LINK_SPEED_FIELD_NUMBER = 1;
    private boolean hasLinkSpeed;
    private int linkSpeed_ = 0;
    public boolean hasLinkSpeed() { return hasLinkSpeed; }
    public int getLinkSpeed() { return linkSpeed_; }
    
    // optional int32 frequency = 2;
    public static final int FREQUENCY_FIELD_NUMBER = 2;
    private boolean hasFrequency;
    private int frequency_ = 0;
    public boolean hasFrequency() { return hasFrequency; }
    public int getFrequency() { return frequency_; }
    
    // optional int32 channel_width = 3;
    public static final int CHANNEL_WIDTH_FIELD_NUMBER = 3;
    private boolean hasChannelWidth;
    private int channelWidth_ = 0;
    public boolean hasChannelWidth() { return hasChannelWidth; }
    public int getChannelWidth() { return channelWidth_; }
    
    // optional int32 rssi = 4;
    public static final int RSSI_FIELD_NUMBER = 4;
    private boolean hasRssi;
    private int rssi_ = 0;
    public boolean hasRssi() { return hasRssi; }
    public int getRssi() { return rssi_; }
    
    // optional int32 score = 5;
    public static final int SCORE_FIELD_NUMBER = 5;
    private boolean hasScore;
    private int score_ = 0;
    public boolean hasScore() { return hasScore; }
    public int getScore() { return score_; }
    
    // optional int64 contention_average_time = 6;
    public static final int CONTENTION_AVERAGE_TIME_FIELD_NUMBER = 6;
    private boolean hasContentionAverageTime;
    private long contentionAverageTime_ = 0L;
    public boolean hasContentionAverageTime() { return hasContentionAverageTime; }
    public long getContentionAverageTime() { return contentionAverageTime_; }
    
    // optional int64 contention_num_of_samples = 7;
    public static final int CONTENTION_NUM_OF_SAMPLES_FIELD_NUMBER = 7;
    private boolean hasContentionNumOfSamples;
    private long contentionNumOfSamples_ = 0L;
    public boolean hasContentionNumOfSamples() { return hasContentionNumOfSamples; }
    public long getContentionNumOfSamples() { return contentionNumOfSamples_; }
    
    // optional int64 tx_time = 8;
    public static final int TX_TIME_FIELD_NUMBER = 8;
    private boolean hasTxTime;
    private long txTime_ = 0L;
    public boolean hasTxTime() { return hasTxTime; }
    public long getTxTime() { return txTime_; }
    
    // optional int64 rx_time = 9;
    public static final int RX_TIME_FIELD_NUMBER = 9;
    private boolean hasRxTime;
    private long rxTime_ = 0L;
    public boolean hasRxTime() { return hasRxTime; }
    public long getRxTime() { return rxTime_; }
    
    // optional int64 on_time = 10;
    public static final int ON_TIME_FIELD_NUMBER = 10;
    private boolean hasOnTime;
    private long onTime_ = 0L;
    public boolean hasOnTime() { return hasOnTime; }
    public long getOnTime() { return onTime_; }
    
    // optional int64 cca_busy_time = 11;
    public static final int CCA_BUSY_TIME_FIELD_NUMBER = 11;
    private boolean hasCcaBusyTime;
    private long ccaBusyTime_ = 0L;
    public boolean hasCcaBusyTime() { return hasCcaBusyTime; }
    public long getCcaBusyTime() { return ccaBusyTime_; }
    
    // optional int32 wifi_generation = 12;
    public static final int WIFI_GENERATION_FIELD_NUMBER = 12;
    private boolean hasWifiGeneration;
    private int wifiGeneration_ = 0;
    public boolean hasWifiGeneration() { return hasWifiGeneration; }
    public int getWifiGeneration() { return wifiGeneration_; }
    
    // optional int32 rx_link_speed = 13;
    public static final int RX_LINK_SPEED_FIELD_NUMBER = 13;
    private boolean hasRxLinkSpeed;
    private int rxLinkSpeed_ = 0;
    public boolean hasRxLinkSpeed() { return hasRxLinkSpeed; }
    public int getRxLinkSpeed() { return rxLinkSpeed_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasLinkSpeed()) {
        output.writeInt32(1, getLinkSpeed());
      }
      if (hasFrequency()) {
        output.writeInt32(2, getFrequency());
      }
      if (hasChannelWidth()) {
        output.writeInt32(3, getChannelWidth());
      }
      if (hasRssi()) {
        output.writeInt32(4, getRssi());
      }
      if (hasScore()) {
        output.writeInt32(5, getScore());
      }
      if (hasContentionAverageTime()) {
        output.writeInt64(6, getContentionAverageTime());
      }
      if (hasContentionNumOfSamples()) {
        output.writeInt64(7, getContentionNumOfSamples());
      }
      if (hasTxTime()) {
        output.writeInt64(8, getTxTime());
      }
      if (hasRxTime()) {
        output.writeInt64(9, getRxTime());
      }
      if (hasOnTime()) {
        output.writeInt64(10, getOnTime());
      }
      if (hasCcaBusyTime()) {
        output.writeInt64(11, getCcaBusyTime());
      }
      if (hasWifiGeneration()) {
        output.writeInt32(12, getWifiGeneration());
      }
      if (hasRxLinkSpeed()) {
        output.writeInt32(13, getRxLinkSpeed());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasLinkSpeed()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getLinkSpeed());
      }
      if (hasFrequency()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getFrequency());
      }
      if (hasChannelWidth()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getChannelWidth());
      }
      if (hasRssi()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getRssi());
      }
      if (hasScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getScore());
      }
      if (hasContentionAverageTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, getContentionAverageTime());
      }
      if (hasContentionNumOfSamples()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, getContentionNumOfSamples());
      }
      if (hasTxTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, getTxTime());
      }
      if (hasRxTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, getRxTime());
      }
      if (hasOnTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, getOnTime());
      }
      if (hasCcaBusyTime()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(11, getCcaBusyTime());
      }
      if (hasWifiGeneration()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, getWifiGeneration());
      }
      if (hasRxLinkSpeed()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, getRxLinkSpeed());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiInfo.getDefaultInstance()) return this;
        if (other.hasLinkSpeed()) {
          setLinkSpeed(other.getLinkSpeed());
        }
        if (other.hasFrequency()) {
          setFrequency(other.getFrequency());
        }
        if (other.hasChannelWidth()) {
          setChannelWidth(other.getChannelWidth());
        }
        if (other.hasRssi()) {
          setRssi(other.getRssi());
        }
        if (other.hasScore()) {
          setScore(other.getScore());
        }
        if (other.hasContentionAverageTime()) {
          setContentionAverageTime(other.getContentionAverageTime());
        }
        if (other.hasContentionNumOfSamples()) {
          setContentionNumOfSamples(other.getContentionNumOfSamples());
        }
        if (other.hasTxTime()) {
          setTxTime(other.getTxTime());
        }
        if (other.hasRxTime()) {
          setRxTime(other.getRxTime());
        }
        if (other.hasOnTime()) {
          setOnTime(other.getOnTime());
        }
        if (other.hasCcaBusyTime()) {
          setCcaBusyTime(other.getCcaBusyTime());
        }
        if (other.hasWifiGeneration()) {
          setWifiGeneration(other.getWifiGeneration());
        }
        if (other.hasRxLinkSpeed()) {
          setRxLinkSpeed(other.getRxLinkSpeed());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setLinkSpeed(input.readInt32());
              break;
            }
            case 16: {
              setFrequency(input.readInt32());
              break;
            }
            case 24: {
              setChannelWidth(input.readInt32());
              break;
            }
            case 32: {
              setRssi(input.readInt32());
              break;
            }
            case 40: {
              setScore(input.readInt32());
              break;
            }
            case 48: {
              setContentionAverageTime(input.readInt64());
              break;
            }
            case 56: {
              setContentionNumOfSamples(input.readInt64());
              break;
            }
            case 64: {
              setTxTime(input.readInt64());
              break;
            }
            case 72: {
              setRxTime(input.readInt64());
              break;
            }
            case 80: {
              setOnTime(input.readInt64());
              break;
            }
            case 88: {
              setCcaBusyTime(input.readInt64());
              break;
            }
            case 96: {
              setWifiGeneration(input.readInt32());
              break;
            }
            case 104: {
              setRxLinkSpeed(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 link_speed = 1;
      public boolean hasLinkSpeed() {
        return result.hasLinkSpeed();
      }
      public int getLinkSpeed() {
        return result.getLinkSpeed();
      }
      public Builder setLinkSpeed(int value) {
        result.hasLinkSpeed = true;
        result.linkSpeed_ = value;
        return this;
      }
      public Builder clearLinkSpeed() {
        result.hasLinkSpeed = false;
        result.linkSpeed_ = 0;
        return this;
      }
      
      // optional int32 frequency = 2;
      public boolean hasFrequency() {
        return result.hasFrequency();
      }
      public int getFrequency() {
        return result.getFrequency();
      }
      public Builder setFrequency(int value) {
        result.hasFrequency = true;
        result.frequency_ = value;
        return this;
      }
      public Builder clearFrequency() {
        result.hasFrequency = false;
        result.frequency_ = 0;
        return this;
      }
      
      // optional int32 channel_width = 3;
      public boolean hasChannelWidth() {
        return result.hasChannelWidth();
      }
      public int getChannelWidth() {
        return result.getChannelWidth();
      }
      public Builder setChannelWidth(int value) {
        result.hasChannelWidth = true;
        result.channelWidth_ = value;
        return this;
      }
      public Builder clearChannelWidth() {
        result.hasChannelWidth = false;
        result.channelWidth_ = 0;
        return this;
      }
      
      // optional int32 rssi = 4;
      public boolean hasRssi() {
        return result.hasRssi();
      }
      public int getRssi() {
        return result.getRssi();
      }
      public Builder setRssi(int value) {
        result.hasRssi = true;
        result.rssi_ = value;
        return this;
      }
      public Builder clearRssi() {
        result.hasRssi = false;
        result.rssi_ = 0;
        return this;
      }
      
      // optional int32 score = 5;
      public boolean hasScore() {
        return result.hasScore();
      }
      public int getScore() {
        return result.getScore();
      }
      public Builder setScore(int value) {
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder clearScore() {
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      // optional int64 contention_average_time = 6;
      public boolean hasContentionAverageTime() {
        return result.hasContentionAverageTime();
      }
      public long getContentionAverageTime() {
        return result.getContentionAverageTime();
      }
      public Builder setContentionAverageTime(long value) {
        result.hasContentionAverageTime = true;
        result.contentionAverageTime_ = value;
        return this;
      }
      public Builder clearContentionAverageTime() {
        result.hasContentionAverageTime = false;
        result.contentionAverageTime_ = 0L;
        return this;
      }
      
      // optional int64 contention_num_of_samples = 7;
      public boolean hasContentionNumOfSamples() {
        return result.hasContentionNumOfSamples();
      }
      public long getContentionNumOfSamples() {
        return result.getContentionNumOfSamples();
      }
      public Builder setContentionNumOfSamples(long value) {
        result.hasContentionNumOfSamples = true;
        result.contentionNumOfSamples_ = value;
        return this;
      }
      public Builder clearContentionNumOfSamples() {
        result.hasContentionNumOfSamples = false;
        result.contentionNumOfSamples_ = 0L;
        return this;
      }
      
      // optional int64 tx_time = 8;
      public boolean hasTxTime() {
        return result.hasTxTime();
      }
      public long getTxTime() {
        return result.getTxTime();
      }
      public Builder setTxTime(long value) {
        result.hasTxTime = true;
        result.txTime_ = value;
        return this;
      }
      public Builder clearTxTime() {
        result.hasTxTime = false;
        result.txTime_ = 0L;
        return this;
      }
      
      // optional int64 rx_time = 9;
      public boolean hasRxTime() {
        return result.hasRxTime();
      }
      public long getRxTime() {
        return result.getRxTime();
      }
      public Builder setRxTime(long value) {
        result.hasRxTime = true;
        result.rxTime_ = value;
        return this;
      }
      public Builder clearRxTime() {
        result.hasRxTime = false;
        result.rxTime_ = 0L;
        return this;
      }
      
      // optional int64 on_time = 10;
      public boolean hasOnTime() {
        return result.hasOnTime();
      }
      public long getOnTime() {
        return result.getOnTime();
      }
      public Builder setOnTime(long value) {
        result.hasOnTime = true;
        result.onTime_ = value;
        return this;
      }
      public Builder clearOnTime() {
        result.hasOnTime = false;
        result.onTime_ = 0L;
        return this;
      }
      
      // optional int64 cca_busy_time = 11;
      public boolean hasCcaBusyTime() {
        return result.hasCcaBusyTime();
      }
      public long getCcaBusyTime() {
        return result.getCcaBusyTime();
      }
      public Builder setCcaBusyTime(long value) {
        result.hasCcaBusyTime = true;
        result.ccaBusyTime_ = value;
        return this;
      }
      public Builder clearCcaBusyTime() {
        result.hasCcaBusyTime = false;
        result.ccaBusyTime_ = 0L;
        return this;
      }
      
      // optional int32 wifi_generation = 12;
      public boolean hasWifiGeneration() {
        return result.hasWifiGeneration();
      }
      public int getWifiGeneration() {
        return result.getWifiGeneration();
      }
      public Builder setWifiGeneration(int value) {
        result.hasWifiGeneration = true;
        result.wifiGeneration_ = value;
        return this;
      }
      public Builder clearWifiGeneration() {
        result.hasWifiGeneration = false;
        result.wifiGeneration_ = 0;
        return this;
      }
      
      // optional int32 rx_link_speed = 13;
      public boolean hasRxLinkSpeed() {
        return result.hasRxLinkSpeed();
      }
      public int getRxLinkSpeed() {
        return result.getRxLinkSpeed();
      }
      public Builder setRxLinkSpeed(int value) {
        result.hasRxLinkSpeed = true;
        result.rxLinkSpeed_ = value;
        return this;
      }
      public Builder clearRxLinkSpeed() {
        result.hasRxLinkSpeed = false;
        result.rxLinkSpeed_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneWifiInfo)
    }
    
    static {
      defaultInstance = new SneWifiInfo(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneWifiInfo)
  }
  
  public static final class SneWifiTrafficStats extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneWifiTrafficStats.newBuilder() to construct.
    private SneWifiTrafficStats() {
      initFields();
    }
    private SneWifiTrafficStats(boolean noInit) {}
    
    private static final SneWifiTrafficStats defaultInstance;
    public static SneWifiTrafficStats getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneWifiTrafficStats getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int64 tx_pkt = 1;
    public static final int TX_PKT_FIELD_NUMBER = 1;
    private boolean hasTxPkt;
    private long txPkt_ = 0L;
    public boolean hasTxPkt() { return hasTxPkt; }
    public long getTxPkt() { return txPkt_; }
    
    // optional int64 rx_pkt = 2;
    public static final int RX_PKT_FIELD_NUMBER = 2;
    private boolean hasRxPkt;
    private long rxPkt_ = 0L;
    public boolean hasRxPkt() { return hasRxPkt; }
    public long getRxPkt() { return rxPkt_; }
    
    // optional int64 tx_bad = 3;
    public static final int TX_BAD_FIELD_NUMBER = 3;
    private boolean hasTxBad;
    private long txBad_ = 0L;
    public boolean hasTxBad() { return hasTxBad; }
    public long getTxBad() { return txBad_; }
    
    // optional int64 tx_retries = 4;
    public static final int TX_RETRIES_FIELD_NUMBER = 4;
    private boolean hasTxRetries;
    private long txRetries_ = 0L;
    public boolean hasTxRetries() { return hasTxRetries; }
    public long getTxRetries() { return txRetries_; }
    
    // optional int64 tx_success = 5;
    public static final int TX_SUCCESS_FIELD_NUMBER = 5;
    private boolean hasTxSuccess;
    private long txSuccess_ = 0L;
    public boolean hasTxSuccess() { return hasTxSuccess; }
    public long getTxSuccess() { return txSuccess_; }
    
    // optional int64 rx_success = 6;
    public static final int RX_SUCCESS_FIELD_NUMBER = 6;
    private boolean hasRxSuccess;
    private long rxSuccess_ = 0L;
    public boolean hasRxSuccess() { return hasRxSuccess; }
    public long getRxSuccess() { return rxSuccess_; }
    
    // optional int64 ip_link_verifier_result = 7;
    public static final int IP_LINK_VERIFIER_RESULT_FIELD_NUMBER = 7;
    private boolean hasIpLinkVerifierResult;
    private long ipLinkVerifierResult_ = 0L;
    public boolean hasIpLinkVerifierResult() { return hasIpLinkVerifierResult; }
    public long getIpLinkVerifierResult() { return ipLinkVerifierResult_; }
    
    // optional int64 num_of_tx_tries_in_driver = 8;
    public static final int NUM_OF_TX_TRIES_IN_DRIVER_FIELD_NUMBER = 8;
    private boolean hasNumOfTxTriesInDriver;
    private long numOfTxTriesInDriver_ = 0L;
    public boolean hasNumOfTxTriesInDriver() { return hasNumOfTxTriesInDriver; }
    public long getNumOfTxTriesInDriver() { return numOfTxTriesInDriver_; }
    
    // optional int32 integral_used_descriptor_in_driver = 9;
    public static final int INTEGRAL_USED_DESCRIPTOR_IN_DRIVER_FIELD_NUMBER = 9;
    private boolean hasIntegralUsedDescriptorInDriver;
    private int integralUsedDescriptorInDriver_ = 0;
    public boolean hasIntegralUsedDescriptorInDriver() { return hasIntegralUsedDescriptorInDriver; }
    public int getIntegralUsedDescriptorInDriver() { return integralUsedDescriptorInDriver_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTxPkt()) {
        output.writeInt64(1, getTxPkt());
      }
      if (hasRxPkt()) {
        output.writeInt64(2, getRxPkt());
      }
      if (hasTxBad()) {
        output.writeInt64(3, getTxBad());
      }
      if (hasTxRetries()) {
        output.writeInt64(4, getTxRetries());
      }
      if (hasTxSuccess()) {
        output.writeInt64(5, getTxSuccess());
      }
      if (hasRxSuccess()) {
        output.writeInt64(6, getRxSuccess());
      }
      if (hasIpLinkVerifierResult()) {
        output.writeInt64(7, getIpLinkVerifierResult());
      }
      if (hasNumOfTxTriesInDriver()) {
        output.writeInt64(8, getNumOfTxTriesInDriver());
      }
      if (hasIntegralUsedDescriptorInDriver()) {
        output.writeInt32(9, getIntegralUsedDescriptorInDriver());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTxPkt()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, getTxPkt());
      }
      if (hasRxPkt()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, getRxPkt());
      }
      if (hasTxBad()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getTxBad());
      }
      if (hasTxRetries()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, getTxRetries());
      }
      if (hasTxSuccess()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, getTxSuccess());
      }
      if (hasRxSuccess()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, getRxSuccess());
      }
      if (hasIpLinkVerifierResult()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, getIpLinkVerifierResult());
      }
      if (hasNumOfTxTriesInDriver()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, getNumOfTxTriesInDriver());
      }
      if (hasIntegralUsedDescriptorInDriver()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getIntegralUsedDescriptorInDriver());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneWifiTrafficStats.getDefaultInstance()) return this;
        if (other.hasTxPkt()) {
          setTxPkt(other.getTxPkt());
        }
        if (other.hasRxPkt()) {
          setRxPkt(other.getRxPkt());
        }
        if (other.hasTxBad()) {
          setTxBad(other.getTxBad());
        }
        if (other.hasTxRetries()) {
          setTxRetries(other.getTxRetries());
        }
        if (other.hasTxSuccess()) {
          setTxSuccess(other.getTxSuccess());
        }
        if (other.hasRxSuccess()) {
          setRxSuccess(other.getRxSuccess());
        }
        if (other.hasIpLinkVerifierResult()) {
          setIpLinkVerifierResult(other.getIpLinkVerifierResult());
        }
        if (other.hasNumOfTxTriesInDriver()) {
          setNumOfTxTriesInDriver(other.getNumOfTxTriesInDriver());
        }
        if (other.hasIntegralUsedDescriptorInDriver()) {
          setIntegralUsedDescriptorInDriver(other.getIntegralUsedDescriptorInDriver());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setTxPkt(input.readInt64());
              break;
            }
            case 16: {
              setRxPkt(input.readInt64());
              break;
            }
            case 24: {
              setTxBad(input.readInt64());
              break;
            }
            case 32: {
              setTxRetries(input.readInt64());
              break;
            }
            case 40: {
              setTxSuccess(input.readInt64());
              break;
            }
            case 48: {
              setRxSuccess(input.readInt64());
              break;
            }
            case 56: {
              setIpLinkVerifierResult(input.readInt64());
              break;
            }
            case 64: {
              setNumOfTxTriesInDriver(input.readInt64());
              break;
            }
            case 72: {
              setIntegralUsedDescriptorInDriver(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int64 tx_pkt = 1;
      public boolean hasTxPkt() {
        return result.hasTxPkt();
      }
      public long getTxPkt() {
        return result.getTxPkt();
      }
      public Builder setTxPkt(long value) {
        result.hasTxPkt = true;
        result.txPkt_ = value;
        return this;
      }
      public Builder clearTxPkt() {
        result.hasTxPkt = false;
        result.txPkt_ = 0L;
        return this;
      }
      
      // optional int64 rx_pkt = 2;
      public boolean hasRxPkt() {
        return result.hasRxPkt();
      }
      public long getRxPkt() {
        return result.getRxPkt();
      }
      public Builder setRxPkt(long value) {
        result.hasRxPkt = true;
        result.rxPkt_ = value;
        return this;
      }
      public Builder clearRxPkt() {
        result.hasRxPkt = false;
        result.rxPkt_ = 0L;
        return this;
      }
      
      // optional int64 tx_bad = 3;
      public boolean hasTxBad() {
        return result.hasTxBad();
      }
      public long getTxBad() {
        return result.getTxBad();
      }
      public Builder setTxBad(long value) {
        result.hasTxBad = true;
        result.txBad_ = value;
        return this;
      }
      public Builder clearTxBad() {
        result.hasTxBad = false;
        result.txBad_ = 0L;
        return this;
      }
      
      // optional int64 tx_retries = 4;
      public boolean hasTxRetries() {
        return result.hasTxRetries();
      }
      public long getTxRetries() {
        return result.getTxRetries();
      }
      public Builder setTxRetries(long value) {
        result.hasTxRetries = true;
        result.txRetries_ = value;
        return this;
      }
      public Builder clearTxRetries() {
        result.hasTxRetries = false;
        result.txRetries_ = 0L;
        return this;
      }
      
      // optional int64 tx_success = 5;
      public boolean hasTxSuccess() {
        return result.hasTxSuccess();
      }
      public long getTxSuccess() {
        return result.getTxSuccess();
      }
      public Builder setTxSuccess(long value) {
        result.hasTxSuccess = true;
        result.txSuccess_ = value;
        return this;
      }
      public Builder clearTxSuccess() {
        result.hasTxSuccess = false;
        result.txSuccess_ = 0L;
        return this;
      }
      
      // optional int64 rx_success = 6;
      public boolean hasRxSuccess() {
        return result.hasRxSuccess();
      }
      public long getRxSuccess() {
        return result.getRxSuccess();
      }
      public Builder setRxSuccess(long value) {
        result.hasRxSuccess = true;
        result.rxSuccess_ = value;
        return this;
      }
      public Builder clearRxSuccess() {
        result.hasRxSuccess = false;
        result.rxSuccess_ = 0L;
        return this;
      }
      
      // optional int64 ip_link_verifier_result = 7;
      public boolean hasIpLinkVerifierResult() {
        return result.hasIpLinkVerifierResult();
      }
      public long getIpLinkVerifierResult() {
        return result.getIpLinkVerifierResult();
      }
      public Builder setIpLinkVerifierResult(long value) {
        result.hasIpLinkVerifierResult = true;
        result.ipLinkVerifierResult_ = value;
        return this;
      }
      public Builder clearIpLinkVerifierResult() {
        result.hasIpLinkVerifierResult = false;
        result.ipLinkVerifierResult_ = 0L;
        return this;
      }
      
      // optional int64 num_of_tx_tries_in_driver = 8;
      public boolean hasNumOfTxTriesInDriver() {
        return result.hasNumOfTxTriesInDriver();
      }
      public long getNumOfTxTriesInDriver() {
        return result.getNumOfTxTriesInDriver();
      }
      public Builder setNumOfTxTriesInDriver(long value) {
        result.hasNumOfTxTriesInDriver = true;
        result.numOfTxTriesInDriver_ = value;
        return this;
      }
      public Builder clearNumOfTxTriesInDriver() {
        result.hasNumOfTxTriesInDriver = false;
        result.numOfTxTriesInDriver_ = 0L;
        return this;
      }
      
      // optional int32 integral_used_descriptor_in_driver = 9;
      public boolean hasIntegralUsedDescriptorInDriver() {
        return result.hasIntegralUsedDescriptorInDriver();
      }
      public int getIntegralUsedDescriptorInDriver() {
        return result.getIntegralUsedDescriptorInDriver();
      }
      public Builder setIntegralUsedDescriptorInDriver(int value) {
        result.hasIntegralUsedDescriptorInDriver = true;
        result.integralUsedDescriptorInDriver_ = value;
        return this;
      }
      public Builder clearIntegralUsedDescriptorInDriver() {
        result.hasIntegralUsedDescriptorInDriver = false;
        result.integralUsedDescriptorInDriver_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneWifiTrafficStats)
    }
    
    static {
      defaultInstance = new SneWifiTrafficStats(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneWifiTrafficStats)
  }
  
  public static final class SneTcpStats extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneTcpStats.newBuilder() to construct.
    private SneTcpStats() {
      initFields();
    }
    private SneTcpStats(boolean noInit) {}
    
    private static final SneTcpStats defaultInstance;
    public static SneTcpStats getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneTcpStats getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int32 tcp_loss_undo = 1;
    public static final int TCP_LOSS_UNDO_FIELD_NUMBER = 1;
    private boolean hasTcpLossUndo;
    private int tcpLossUndo_ = 0;
    public boolean hasTcpLossUndo() { return hasTcpLossUndo; }
    public int getTcpLossUndo() { return tcpLossUndo_; }
    
    // optional int32 tcp_loss_failures = 2;
    public static final int TCP_LOSS_FAILURES_FIELD_NUMBER = 2;
    private boolean hasTcpLossFailures;
    private int tcpLossFailures_ = 0;
    public boolean hasTcpLossFailures() { return hasTcpLossFailures; }
    public int getTcpLossFailures() { return tcpLossFailures_; }
    
    // optional int32 tcp_lost_retransmit = 3;
    public static final int TCP_LOST_RETRANSMIT_FIELD_NUMBER = 3;
    private boolean hasTcpLostRetransmit;
    private int tcpLostRetransmit_ = 0;
    public boolean hasTcpLostRetransmit() { return hasTcpLostRetransmit; }
    public int getTcpLostRetransmit() { return tcpLostRetransmit_; }
    
    // optional int32 tcp_retrans_fail = 4;
    public static final int TCP_RETRANS_FAIL_FIELD_NUMBER = 4;
    private boolean hasTcpRetransFail;
    private int tcpRetransFail_ = 0;
    public boolean hasTcpRetransFail() { return hasTcpRetransFail; }
    public int getTcpRetransFail() { return tcpRetransFail_; }
    
    // optional int32 tcp_timeouts = 5;
    public static final int TCP_TIMEOUTS_FIELD_NUMBER = 5;
    private boolean hasTcpTimeouts;
    private int tcpTimeouts_ = 0;
    public boolean hasTcpTimeouts() { return hasTcpTimeouts; }
    public int getTcpTimeouts() { return tcpTimeouts_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTcpLossUndo()) {
        output.writeInt32(1, getTcpLossUndo());
      }
      if (hasTcpLossFailures()) {
        output.writeInt32(2, getTcpLossFailures());
      }
      if (hasTcpLostRetransmit()) {
        output.writeInt32(3, getTcpLostRetransmit());
      }
      if (hasTcpRetransFail()) {
        output.writeInt32(4, getTcpRetransFail());
      }
      if (hasTcpTimeouts()) {
        output.writeInt32(5, getTcpTimeouts());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTcpLossUndo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getTcpLossUndo());
      }
      if (hasTcpLossFailures()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getTcpLossFailures());
      }
      if (hasTcpLostRetransmit()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getTcpLostRetransmit());
      }
      if (hasTcpRetransFail()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getTcpRetransFail());
      }
      if (hasTcpTimeouts()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getTcpTimeouts());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneTcpStats.getDefaultInstance()) return this;
        if (other.hasTcpLossUndo()) {
          setTcpLossUndo(other.getTcpLossUndo());
        }
        if (other.hasTcpLossFailures()) {
          setTcpLossFailures(other.getTcpLossFailures());
        }
        if (other.hasTcpLostRetransmit()) {
          setTcpLostRetransmit(other.getTcpLostRetransmit());
        }
        if (other.hasTcpRetransFail()) {
          setTcpRetransFail(other.getTcpRetransFail());
        }
        if (other.hasTcpTimeouts()) {
          setTcpTimeouts(other.getTcpTimeouts());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setTcpLossUndo(input.readInt32());
              break;
            }
            case 16: {
              setTcpLossFailures(input.readInt32());
              break;
            }
            case 24: {
              setTcpLostRetransmit(input.readInt32());
              break;
            }
            case 32: {
              setTcpRetransFail(input.readInt32());
              break;
            }
            case 40: {
              setTcpTimeouts(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 tcp_loss_undo = 1;
      public boolean hasTcpLossUndo() {
        return result.hasTcpLossUndo();
      }
      public int getTcpLossUndo() {
        return result.getTcpLossUndo();
      }
      public Builder setTcpLossUndo(int value) {
        result.hasTcpLossUndo = true;
        result.tcpLossUndo_ = value;
        return this;
      }
      public Builder clearTcpLossUndo() {
        result.hasTcpLossUndo = false;
        result.tcpLossUndo_ = 0;
        return this;
      }
      
      // optional int32 tcp_loss_failures = 2;
      public boolean hasTcpLossFailures() {
        return result.hasTcpLossFailures();
      }
      public int getTcpLossFailures() {
        return result.getTcpLossFailures();
      }
      public Builder setTcpLossFailures(int value) {
        result.hasTcpLossFailures = true;
        result.tcpLossFailures_ = value;
        return this;
      }
      public Builder clearTcpLossFailures() {
        result.hasTcpLossFailures = false;
        result.tcpLossFailures_ = 0;
        return this;
      }
      
      // optional int32 tcp_lost_retransmit = 3;
      public boolean hasTcpLostRetransmit() {
        return result.hasTcpLostRetransmit();
      }
      public int getTcpLostRetransmit() {
        return result.getTcpLostRetransmit();
      }
      public Builder setTcpLostRetransmit(int value) {
        result.hasTcpLostRetransmit = true;
        result.tcpLostRetransmit_ = value;
        return this;
      }
      public Builder clearTcpLostRetransmit() {
        result.hasTcpLostRetransmit = false;
        result.tcpLostRetransmit_ = 0;
        return this;
      }
      
      // optional int32 tcp_retrans_fail = 4;
      public boolean hasTcpRetransFail() {
        return result.hasTcpRetransFail();
      }
      public int getTcpRetransFail() {
        return result.getTcpRetransFail();
      }
      public Builder setTcpRetransFail(int value) {
        result.hasTcpRetransFail = true;
        result.tcpRetransFail_ = value;
        return this;
      }
      public Builder clearTcpRetransFail() {
        result.hasTcpRetransFail = false;
        result.tcpRetransFail_ = 0;
        return this;
      }
      
      // optional int32 tcp_timeouts = 5;
      public boolean hasTcpTimeouts() {
        return result.hasTcpTimeouts();
      }
      public int getTcpTimeouts() {
        return result.getTcpTimeouts();
      }
      public Builder setTcpTimeouts(int value) {
        result.hasTcpTimeouts = true;
        result.tcpTimeouts_ = value;
        return this;
      }
      public Builder clearTcpTimeouts() {
        result.hasTcpTimeouts = false;
        result.tcpTimeouts_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneTcpStats)
    }
    
    static {
      defaultInstance = new SneTcpStats(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneTcpStats)
  }
  
  public static final class SneSensorData extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneSensorData.newBuilder() to construct.
    private SneSensorData() {
      initFields();
    }
    private SneSensorData(boolean noInit) {}
    
    private static final SneSensorData defaultInstance;
    public static SneSensorData getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneSensorData getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional float sensor_acceleration = 1;
    public static final int SENSOR_ACCELERATION_FIELD_NUMBER = 1;
    private boolean hasSensorAcceleration;
    private float sensorAcceleration_ = 0F;
    public boolean hasSensorAcceleration() { return hasSensorAcceleration; }
    public float getSensorAcceleration() { return sensorAcceleration_; }
    
    // optional int32 sensor_step_count = 2;
    public static final int SENSOR_STEP_COUNT_FIELD_NUMBER = 2;
    private boolean hasSensorStepCount;
    private int sensorStepCount_ = 0;
    public boolean hasSensorStepCount() { return hasSensorStepCount; }
    public int getSensorStepCount() { return sensorStepCount_; }
    
    // optional int32 sensor_activity_type = 3;
    public static final int SENSOR_ACTIVITY_TYPE_FIELD_NUMBER = 3;
    private boolean hasSensorActivityType;
    private int sensorActivityType_ = 0;
    public boolean hasSensorActivityType() { return hasSensorActivityType; }
    public int getSensorActivityType() { return sensorActivityType_; }
    
    // optional int32 sensor_activity_confidence = 4;
    public static final int SENSOR_ACTIVITY_CONFIDENCE_FIELD_NUMBER = 4;
    private boolean hasSensorActivityConfidence;
    private int sensorActivityConfidence_ = 0;
    public boolean hasSensorActivityConfidence() { return hasSensorActivityConfidence; }
    public int getSensorActivityConfidence() { return sensorActivityConfidence_; }
    
    // optional bool is_moving = 5;
    public static final int IS_MOVING_FIELD_NUMBER = 5;
    private boolean hasIsMoving;
    private boolean isMoving_ = false;
    public boolean hasIsMoving() { return hasIsMoving; }
    public boolean getIsMoving() { return isMoving_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSensorAcceleration()) {
        output.writeFloat(1, getSensorAcceleration());
      }
      if (hasSensorStepCount()) {
        output.writeInt32(2, getSensorStepCount());
      }
      if (hasSensorActivityType()) {
        output.writeInt32(3, getSensorActivityType());
      }
      if (hasSensorActivityConfidence()) {
        output.writeInt32(4, getSensorActivityConfidence());
      }
      if (hasIsMoving()) {
        output.writeBool(5, getIsMoving());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSensorAcceleration()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, getSensorAcceleration());
      }
      if (hasSensorStepCount()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getSensorStepCount());
      }
      if (hasSensorActivityType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getSensorActivityType());
      }
      if (hasSensorActivityConfidence()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getSensorActivityConfidence());
      }
      if (hasIsMoving()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, getIsMoving());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneSensorData.getDefaultInstance()) return this;
        if (other.hasSensorAcceleration()) {
          setSensorAcceleration(other.getSensorAcceleration());
        }
        if (other.hasSensorStepCount()) {
          setSensorStepCount(other.getSensorStepCount());
        }
        if (other.hasSensorActivityType()) {
          setSensorActivityType(other.getSensorActivityType());
        }
        if (other.hasSensorActivityConfidence()) {
          setSensorActivityConfidence(other.getSensorActivityConfidence());
        }
        if (other.hasIsMoving()) {
          setIsMoving(other.getIsMoving());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 13: {
              setSensorAcceleration(input.readFloat());
              break;
            }
            case 16: {
              setSensorStepCount(input.readInt32());
              break;
            }
            case 24: {
              setSensorActivityType(input.readInt32());
              break;
            }
            case 32: {
              setSensorActivityConfidence(input.readInt32());
              break;
            }
            case 40: {
              setIsMoving(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional float sensor_acceleration = 1;
      public boolean hasSensorAcceleration() {
        return result.hasSensorAcceleration();
      }
      public float getSensorAcceleration() {
        return result.getSensorAcceleration();
      }
      public Builder setSensorAcceleration(float value) {
        result.hasSensorAcceleration = true;
        result.sensorAcceleration_ = value;
        return this;
      }
      public Builder clearSensorAcceleration() {
        result.hasSensorAcceleration = false;
        result.sensorAcceleration_ = 0F;
        return this;
      }
      
      // optional int32 sensor_step_count = 2;
      public boolean hasSensorStepCount() {
        return result.hasSensorStepCount();
      }
      public int getSensorStepCount() {
        return result.getSensorStepCount();
      }
      public Builder setSensorStepCount(int value) {
        result.hasSensorStepCount = true;
        result.sensorStepCount_ = value;
        return this;
      }
      public Builder clearSensorStepCount() {
        result.hasSensorStepCount = false;
        result.sensorStepCount_ = 0;
        return this;
      }
      
      // optional int32 sensor_activity_type = 3;
      public boolean hasSensorActivityType() {
        return result.hasSensorActivityType();
      }
      public int getSensorActivityType() {
        return result.getSensorActivityType();
      }
      public Builder setSensorActivityType(int value) {
        result.hasSensorActivityType = true;
        result.sensorActivityType_ = value;
        return this;
      }
      public Builder clearSensorActivityType() {
        result.hasSensorActivityType = false;
        result.sensorActivityType_ = 0;
        return this;
      }
      
      // optional int32 sensor_activity_confidence = 4;
      public boolean hasSensorActivityConfidence() {
        return result.hasSensorActivityConfidence();
      }
      public int getSensorActivityConfidence() {
        return result.getSensorActivityConfidence();
      }
      public Builder setSensorActivityConfidence(int value) {
        result.hasSensorActivityConfidence = true;
        result.sensorActivityConfidence_ = value;
        return this;
      }
      public Builder clearSensorActivityConfidence() {
        result.hasSensorActivityConfidence = false;
        result.sensorActivityConfidence_ = 0;
        return this;
      }
      
      // optional bool is_moving = 5;
      public boolean hasIsMoving() {
        return result.hasIsMoving();
      }
      public boolean getIsMoving() {
        return result.getIsMoving();
      }
      public Builder setIsMoving(boolean value) {
        result.hasIsMoving = true;
        result.isMoving_ = value;
        return this;
      }
      public Builder clearIsMoving() {
        result.hasIsMoving = false;
        result.isMoving_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneSensorData)
    }
    
    static {
      defaultInstance = new SneSensorData(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneSensorData)
  }
  
  public static final class SneInferenceResult extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneInferenceResult.newBuilder() to construct.
    private SneInferenceResult() {
      initFields();
    }
    private SneInferenceResult(boolean noInit) {}
    
    private static final SneInferenceResult defaultInstance;
    public static SneInferenceResult getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneInferenceResult getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional float primary = 1;
    public static final int PRIMARY_FIELD_NUMBER = 1;
    private boolean hasPrimary;
    private float primary_ = 0F;
    public boolean hasPrimary() { return hasPrimary; }
    public float getPrimary() { return primary_; }
    
    // optional float secondary = 2;
    public static final int SECONDARY_FIELD_NUMBER = 2;
    private boolean hasSecondary;
    private float secondary_ = 0F;
    public boolean hasSecondary() { return hasSecondary; }
    public float getSecondary() { return secondary_; }
    
    // optional int32 velocity_based_score = 3;
    public static final int VELOCITY_BASED_SCORE_FIELD_NUMBER = 3;
    private boolean hasVelocityBasedScore;
    private int velocityBasedScore_ = 0;
    public boolean hasVelocityBasedScore() { return hasVelocityBasedScore; }
    public int getVelocityBasedScore() { return velocityBasedScore_; }
    
    // optional float cellular = 4;
    public static final int CELLULAR_FIELD_NUMBER = 4;
    private boolean hasCellular;
    private float cellular_ = 0F;
    public boolean hasCellular() { return hasCellular; }
    public float getCellular() { return cellular_; }
    
    // optional float user_wifi_preference = 5;
    public static final int USER_WIFI_PREFERENCE_FIELD_NUMBER = 5;
    private boolean hasUserWifiPreference;
    private float userWifiPreference_ = 0F;
    public boolean hasUserWifiPreference() { return hasUserWifiPreference; }
    public float getUserWifiPreference() { return userWifiPreference_; }
    
    // optional bool wifi_preferred = 6;
    public static final int WIFI_PREFERRED_FIELD_NUMBER = 6;
    private boolean hasWifiPreferred;
    private boolean wifiPreferred_ = false;
    public boolean hasWifiPreferred() { return hasWifiPreferred; }
    public boolean getWifiPreferred() { return wifiPreferred_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasPrimary()) {
        output.writeFloat(1, getPrimary());
      }
      if (hasSecondary()) {
        output.writeFloat(2, getSecondary());
      }
      if (hasVelocityBasedScore()) {
        output.writeInt32(3, getVelocityBasedScore());
      }
      if (hasCellular()) {
        output.writeFloat(4, getCellular());
      }
      if (hasUserWifiPreference()) {
        output.writeFloat(5, getUserWifiPreference());
      }
      if (hasWifiPreferred()) {
        output.writeBool(6, getWifiPreferred());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasPrimary()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, getPrimary());
      }
      if (hasSecondary()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, getSecondary());
      }
      if (hasVelocityBasedScore()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getVelocityBasedScore());
      }
      if (hasCellular()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, getCellular());
      }
      if (hasUserWifiPreference()) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, getUserWifiPreference());
      }
      if (hasWifiPreferred()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, getWifiPreferred());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneInferenceResult.getDefaultInstance()) return this;
        if (other.hasPrimary()) {
          setPrimary(other.getPrimary());
        }
        if (other.hasSecondary()) {
          setSecondary(other.getSecondary());
        }
        if (other.hasVelocityBasedScore()) {
          setVelocityBasedScore(other.getVelocityBasedScore());
        }
        if (other.hasCellular()) {
          setCellular(other.getCellular());
        }
        if (other.hasUserWifiPreference()) {
          setUserWifiPreference(other.getUserWifiPreference());
        }
        if (other.hasWifiPreferred()) {
          setWifiPreferred(other.getWifiPreferred());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 13: {
              setPrimary(input.readFloat());
              break;
            }
            case 21: {
              setSecondary(input.readFloat());
              break;
            }
            case 24: {
              setVelocityBasedScore(input.readInt32());
              break;
            }
            case 37: {
              setCellular(input.readFloat());
              break;
            }
            case 45: {
              setUserWifiPreference(input.readFloat());
              break;
            }
            case 48: {
              setWifiPreferred(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional float primary = 1;
      public boolean hasPrimary() {
        return result.hasPrimary();
      }
      public float getPrimary() {
        return result.getPrimary();
      }
      public Builder setPrimary(float value) {
        result.hasPrimary = true;
        result.primary_ = value;
        return this;
      }
      public Builder clearPrimary() {
        result.hasPrimary = false;
        result.primary_ = 0F;
        return this;
      }
      
      // optional float secondary = 2;
      public boolean hasSecondary() {
        return result.hasSecondary();
      }
      public float getSecondary() {
        return result.getSecondary();
      }
      public Builder setSecondary(float value) {
        result.hasSecondary = true;
        result.secondary_ = value;
        return this;
      }
      public Builder clearSecondary() {
        result.hasSecondary = false;
        result.secondary_ = 0F;
        return this;
      }
      
      // optional int32 velocity_based_score = 3;
      public boolean hasVelocityBasedScore() {
        return result.hasVelocityBasedScore();
      }
      public int getVelocityBasedScore() {
        return result.getVelocityBasedScore();
      }
      public Builder setVelocityBasedScore(int value) {
        result.hasVelocityBasedScore = true;
        result.velocityBasedScore_ = value;
        return this;
      }
      public Builder clearVelocityBasedScore() {
        result.hasVelocityBasedScore = false;
        result.velocityBasedScore_ = 0;
        return this;
      }
      
      // optional float cellular = 4;
      public boolean hasCellular() {
        return result.hasCellular();
      }
      public float getCellular() {
        return result.getCellular();
      }
      public Builder setCellular(float value) {
        result.hasCellular = true;
        result.cellular_ = value;
        return this;
      }
      public Builder clearCellular() {
        result.hasCellular = false;
        result.cellular_ = 0F;
        return this;
      }
      
      // optional float user_wifi_preference = 5;
      public boolean hasUserWifiPreference() {
        return result.hasUserWifiPreference();
      }
      public float getUserWifiPreference() {
        return result.getUserWifiPreference();
      }
      public Builder setUserWifiPreference(float value) {
        result.hasUserWifiPreference = true;
        result.userWifiPreference_ = value;
        return this;
      }
      public Builder clearUserWifiPreference() {
        result.hasUserWifiPreference = false;
        result.userWifiPreference_ = 0F;
        return this;
      }
      
      // optional bool wifi_preferred = 6;
      public boolean hasWifiPreferred() {
        return result.hasWifiPreferred();
      }
      public boolean getWifiPreferred() {
        return result.getWifiPreferred();
      }
      public Builder setWifiPreferred(boolean value) {
        result.hasWifiPreferred = true;
        result.wifiPreferred_ = value;
        return this;
      }
      public Builder clearWifiPreferred() {
        result.hasWifiPreferred = false;
        result.wifiPreferred_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneInferenceResult)
    }
    
    static {
      defaultInstance = new SneInferenceResult(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneInferenceResult)
  }
  
  public static final class SneCellularInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellularInfo.newBuilder() to construct.
    private SneCellularInfo() {
      initFields();
    }
    private SneCellularInfo(boolean noInit) {}
    
    private static final SneCellularInfo defaultInstance;
    public static SneCellularInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellularInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int32 network_type = 1;
    public static final int NETWORK_TYPE_FIELD_NUMBER = 1;
    private boolean hasNetworkType;
    private int networkType_ = 0;
    public boolean hasNetworkType() { return hasNetworkType; }
    public int getNetworkType() { return networkType_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasNetworkType()) {
        output.writeInt32(1, getNetworkType());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasNetworkType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getNetworkType());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneCellularInfo.getDefaultInstance()) return this;
        if (other.hasNetworkType()) {
          setNetworkType(other.getNetworkType());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setNetworkType(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 network_type = 1;
      public boolean hasNetworkType() {
        return result.hasNetworkType();
      }
      public int getNetworkType() {
        return result.getNetworkType();
      }
      public Builder setNetworkType(int value) {
        result.hasNetworkType = true;
        result.networkType_ = value;
        return this;
      }
      public Builder clearNetworkType() {
        result.hasNetworkType = false;
        result.networkType_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellularInfo)
    }
    
    static {
      defaultInstance = new SneCellularInfo(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellularInfo)
  }
  
  public static final class SneLoggedInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneLoggedInfo.newBuilder() to construct.
    private SneLoggedInfo() {
      initFields();
    }
    private SneLoggedInfo(boolean noInit) {}
    
    private static final SneLoggedInfo defaultInstance;
    public static SneLoggedInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneLoggedInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int32 logged_reason = 1;
    public static final int LOGGED_REASON_FIELD_NUMBER = 1;
    private boolean hasLoggedReason;
    private int loggedReason_ = 0;
    public boolean hasLoggedReason() { return hasLoggedReason; }
    public int getLoggedReason() { return loggedReason_; }
    
    // optional int64 logged_duration = 2;
    public static final int LOGGED_DURATION_FIELD_NUMBER = 2;
    private boolean hasLoggedDuration;
    private long loggedDuration_ = 0L;
    public boolean hasLoggedDuration() { return hasLoggedDuration; }
    public long getLoggedDuration() { return loggedDuration_; }
    
    // optional int32 logged_setting_detail = 3;
    public static final int LOGGED_SETTING_DETAIL_FIELD_NUMBER = 3;
    private boolean hasLoggedSettingDetail;
    private int loggedSettingDetail_ = 0;
    public boolean hasLoggedSettingDetail() { return hasLoggedSettingDetail; }
    public int getLoggedSettingDetail() { return loggedSettingDetail_; }
    
    // optional int32 wifi_eap_method = 4;
    public static final int WIFI_EAP_METHOD_FIELD_NUMBER = 4;
    private boolean hasWifiEapMethod;
    private int wifiEapMethod_ = 0;
    public boolean hasWifiEapMethod() { return hasWifiEapMethod; }
    public int getWifiEapMethod() { return wifiEapMethod_; }
    
    // optional int32 wifi_security_type = 5;
    public static final int WIFI_SECURITY_TYPE_FIELD_NUMBER = 5;
    private boolean hasWifiSecurityType;
    private int wifiSecurityType_ = 0;
    public boolean hasWifiSecurityType() { return hasWifiSecurityType; }
    public int getWifiSecurityType() { return wifiSecurityType_; }
    
    // optional bool supplicant_discon_locally = 6;
    public static final int SUPPLICANT_DISCON_LOCALLY_FIELD_NUMBER = 6;
    private boolean hasSupplicantDisconLocally;
    private boolean supplicantDisconLocally_ = false;
    public boolean hasSupplicantDisconLocally() { return hasSupplicantDisconLocally; }
    public boolean getSupplicantDisconLocally() { return supplicantDisconLocally_; }
    
    // optional int32 supplicant_discon_reason = 7;
    public static final int SUPPLICANT_DISCON_REASON_FIELD_NUMBER = 7;
    private boolean hasSupplicantDisconReason;
    private int supplicantDisconReason_ = 0;
    public boolean hasSupplicantDisconReason() { return hasSupplicantDisconReason; }
    public int getSupplicantDisconReason() { return supplicantDisconReason_; }
    
    // optional int32 cell_network_type = 8;
    public static final int CELL_NETWORK_TYPE_FIELD_NUMBER = 8;
    private boolean hasCellNetworkType;
    private int cellNetworkType_ = 0;
    public boolean hasCellNetworkType() { return hasCellNetworkType; }
    public int getCellNetworkType() { return cellNetworkType_; }
    
    // optional string ssid = 9;
    public static final int SSID_FIELD_NUMBER = 9;
    private boolean hasSsid;
    private java.lang.String ssid_ = "";
    public boolean hasSsid() { return hasSsid; }
    public java.lang.String getSsid() { return ssid_; }
    
    // optional string start_bssid = 10;
    public static final int START_BSSID_FIELD_NUMBER = 10;
    private boolean hasStartBssid;
    private java.lang.String startBssid_ = "";
    public boolean hasStartBssid() { return hasStartBssid; }
    public java.lang.String getStartBssid() { return startBssid_; }
    
    // optional string end_bssid = 11;
    public static final int END_BSSID_FIELD_NUMBER = 11;
    private boolean hasEndBssid;
    private java.lang.String endBssid_ = "";
    public boolean hasEndBssid() { return hasEndBssid; }
    public java.lang.String getEndBssid() { return endBssid_; }
    
    // optional .smartnetworkengine.UserWifiPreferenceInfo user_wifi_preference_info = 12;
    public static final int USER_WIFI_PREFERENCE_INFO_FIELD_NUMBER = 12;
    private boolean hasUserWifiPreferenceInfo;
    private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo userWifiPreferenceInfo_;
    public boolean hasUserWifiPreferenceInfo() { return hasUserWifiPreferenceInfo; }
    public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo getUserWifiPreferenceInfo() { return userWifiPreferenceInfo_; }
    
    private void initFields() {
      userWifiPreferenceInfo_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasLoggedReason()) {
        output.writeInt32(1, getLoggedReason());
      }
      if (hasLoggedDuration()) {
        output.writeInt64(2, getLoggedDuration());
      }
      if (hasLoggedSettingDetail()) {
        output.writeInt32(3, getLoggedSettingDetail());
      }
      if (hasWifiEapMethod()) {
        output.writeInt32(4, getWifiEapMethod());
      }
      if (hasWifiSecurityType()) {
        output.writeInt32(5, getWifiSecurityType());
      }
      if (hasSupplicantDisconLocally()) {
        output.writeBool(6, getSupplicantDisconLocally());
      }
      if (hasSupplicantDisconReason()) {
        output.writeInt32(7, getSupplicantDisconReason());
      }
      if (hasCellNetworkType()) {
        output.writeInt32(8, getCellNetworkType());
      }
      if (hasSsid()) {
        output.writeString(9, getSsid());
      }
      if (hasStartBssid()) {
        output.writeString(10, getStartBssid());
      }
      if (hasEndBssid()) {
        output.writeString(11, getEndBssid());
      }
      if (hasUserWifiPreferenceInfo()) {
        output.writeMessage(12, getUserWifiPreferenceInfo());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasLoggedReason()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getLoggedReason());
      }
      if (hasLoggedDuration()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, getLoggedDuration());
      }
      if (hasLoggedSettingDetail()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getLoggedSettingDetail());
      }
      if (hasWifiEapMethod()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getWifiEapMethod());
      }
      if (hasWifiSecurityType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getWifiSecurityType());
      }
      if (hasSupplicantDisconLocally()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, getSupplicantDisconLocally());
      }
      if (hasSupplicantDisconReason()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getSupplicantDisconReason());
      }
      if (hasCellNetworkType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getCellNetworkType());
      }
      if (hasSsid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(9, getSsid());
      }
      if (hasStartBssid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(10, getStartBssid());
      }
      if (hasEndBssid()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(11, getEndBssid());
      }
      if (hasUserWifiPreferenceInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, getUserWifiPreferenceInfo());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.SneLoggedInfo.getDefaultInstance()) return this;
        if (other.hasLoggedReason()) {
          setLoggedReason(other.getLoggedReason());
        }
        if (other.hasLoggedDuration()) {
          setLoggedDuration(other.getLoggedDuration());
        }
        if (other.hasLoggedSettingDetail()) {
          setLoggedSettingDetail(other.getLoggedSettingDetail());
        }
        if (other.hasWifiEapMethod()) {
          setWifiEapMethod(other.getWifiEapMethod());
        }
        if (other.hasWifiSecurityType()) {
          setWifiSecurityType(other.getWifiSecurityType());
        }
        if (other.hasSupplicantDisconLocally()) {
          setSupplicantDisconLocally(other.getSupplicantDisconLocally());
        }
        if (other.hasSupplicantDisconReason()) {
          setSupplicantDisconReason(other.getSupplicantDisconReason());
        }
        if (other.hasCellNetworkType()) {
          setCellNetworkType(other.getCellNetworkType());
        }
        if (other.hasSsid()) {
          setSsid(other.getSsid());
        }
        if (other.hasStartBssid()) {
          setStartBssid(other.getStartBssid());
        }
        if (other.hasEndBssid()) {
          setEndBssid(other.getEndBssid());
        }
        if (other.hasUserWifiPreferenceInfo()) {
          mergeUserWifiPreferenceInfo(other.getUserWifiPreferenceInfo());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setLoggedReason(input.readInt32());
              break;
            }
            case 16: {
              setLoggedDuration(input.readInt64());
              break;
            }
            case 24: {
              setLoggedSettingDetail(input.readInt32());
              break;
            }
            case 32: {
              setWifiEapMethod(input.readInt32());
              break;
            }
            case 40: {
              setWifiSecurityType(input.readInt32());
              break;
            }
            case 48: {
              setSupplicantDisconLocally(input.readBool());
              break;
            }
            case 56: {
              setSupplicantDisconReason(input.readInt32());
              break;
            }
            case 64: {
              setCellNetworkType(input.readInt32());
              break;
            }
            case 74: {
              setSsid(input.readString());
              break;
            }
            case 82: {
              setStartBssid(input.readString());
              break;
            }
            case 90: {
              setEndBssid(input.readString());
              break;
            }
            case 98: {
              com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.Builder subBuilder = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.newBuilder();
              if (hasUserWifiPreferenceInfo()) {
                subBuilder.mergeFrom(getUserWifiPreferenceInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setUserWifiPreferenceInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional int32 logged_reason = 1;
      public boolean hasLoggedReason() {
        return result.hasLoggedReason();
      }
      public int getLoggedReason() {
        return result.getLoggedReason();
      }
      public Builder setLoggedReason(int value) {
        result.hasLoggedReason = true;
        result.loggedReason_ = value;
        return this;
      }
      public Builder clearLoggedReason() {
        result.hasLoggedReason = false;
        result.loggedReason_ = 0;
        return this;
      }
      
      // optional int64 logged_duration = 2;
      public boolean hasLoggedDuration() {
        return result.hasLoggedDuration();
      }
      public long getLoggedDuration() {
        return result.getLoggedDuration();
      }
      public Builder setLoggedDuration(long value) {
        result.hasLoggedDuration = true;
        result.loggedDuration_ = value;
        return this;
      }
      public Builder clearLoggedDuration() {
        result.hasLoggedDuration = false;
        result.loggedDuration_ = 0L;
        return this;
      }
      
      // optional int32 logged_setting_detail = 3;
      public boolean hasLoggedSettingDetail() {
        return result.hasLoggedSettingDetail();
      }
      public int getLoggedSettingDetail() {
        return result.getLoggedSettingDetail();
      }
      public Builder setLoggedSettingDetail(int value) {
        result.hasLoggedSettingDetail = true;
        result.loggedSettingDetail_ = value;
        return this;
      }
      public Builder clearLoggedSettingDetail() {
        result.hasLoggedSettingDetail = false;
        result.loggedSettingDetail_ = 0;
        return this;
      }
      
      // optional int32 wifi_eap_method = 4;
      public boolean hasWifiEapMethod() {
        return result.hasWifiEapMethod();
      }
      public int getWifiEapMethod() {
        return result.getWifiEapMethod();
      }
      public Builder setWifiEapMethod(int value) {
        result.hasWifiEapMethod = true;
        result.wifiEapMethod_ = value;
        return this;
      }
      public Builder clearWifiEapMethod() {
        result.hasWifiEapMethod = false;
        result.wifiEapMethod_ = 0;
        return this;
      }
      
      // optional int32 wifi_security_type = 5;
      public boolean hasWifiSecurityType() {
        return result.hasWifiSecurityType();
      }
      public int getWifiSecurityType() {
        return result.getWifiSecurityType();
      }
      public Builder setWifiSecurityType(int value) {
        result.hasWifiSecurityType = true;
        result.wifiSecurityType_ = value;
        return this;
      }
      public Builder clearWifiSecurityType() {
        result.hasWifiSecurityType = false;
        result.wifiSecurityType_ = 0;
        return this;
      }
      
      // optional bool supplicant_discon_locally = 6;
      public boolean hasSupplicantDisconLocally() {
        return result.hasSupplicantDisconLocally();
      }
      public boolean getSupplicantDisconLocally() {
        return result.getSupplicantDisconLocally();
      }
      public Builder setSupplicantDisconLocally(boolean value) {
        result.hasSupplicantDisconLocally = true;
        result.supplicantDisconLocally_ = value;
        return this;
      }
      public Builder clearSupplicantDisconLocally() {
        result.hasSupplicantDisconLocally = false;
        result.supplicantDisconLocally_ = false;
        return this;
      }
      
      // optional int32 supplicant_discon_reason = 7;
      public boolean hasSupplicantDisconReason() {
        return result.hasSupplicantDisconReason();
      }
      public int getSupplicantDisconReason() {
        return result.getSupplicantDisconReason();
      }
      public Builder setSupplicantDisconReason(int value) {
        result.hasSupplicantDisconReason = true;
        result.supplicantDisconReason_ = value;
        return this;
      }
      public Builder clearSupplicantDisconReason() {
        result.hasSupplicantDisconReason = false;
        result.supplicantDisconReason_ = 0;
        return this;
      }
      
      // optional int32 cell_network_type = 8;
      public boolean hasCellNetworkType() {
        return result.hasCellNetworkType();
      }
      public int getCellNetworkType() {
        return result.getCellNetworkType();
      }
      public Builder setCellNetworkType(int value) {
        result.hasCellNetworkType = true;
        result.cellNetworkType_ = value;
        return this;
      }
      public Builder clearCellNetworkType() {
        result.hasCellNetworkType = false;
        result.cellNetworkType_ = 0;
        return this;
      }
      
      // optional string ssid = 9;
      public boolean hasSsid() {
        return result.hasSsid();
      }
      public java.lang.String getSsid() {
        return result.getSsid();
      }
      public Builder setSsid(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasSsid = true;
        result.ssid_ = value;
        return this;
      }
      public Builder clearSsid() {
        result.hasSsid = false;
        result.ssid_ = getDefaultInstance().getSsid();
        return this;
      }
      
      // optional string start_bssid = 10;
      public boolean hasStartBssid() {
        return result.hasStartBssid();
      }
      public java.lang.String getStartBssid() {
        return result.getStartBssid();
      }
      public Builder setStartBssid(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasStartBssid = true;
        result.startBssid_ = value;
        return this;
      }
      public Builder clearStartBssid() {
        result.hasStartBssid = false;
        result.startBssid_ = getDefaultInstance().getStartBssid();
        return this;
      }
      
      // optional string end_bssid = 11;
      public boolean hasEndBssid() {
        return result.hasEndBssid();
      }
      public java.lang.String getEndBssid() {
        return result.getEndBssid();
      }
      public Builder setEndBssid(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasEndBssid = true;
        result.endBssid_ = value;
        return this;
      }
      public Builder clearEndBssid() {
        result.hasEndBssid = false;
        result.endBssid_ = getDefaultInstance().getEndBssid();
        return this;
      }
      
      // optional .smartnetworkengine.UserWifiPreferenceInfo user_wifi_preference_info = 12;
      public boolean hasUserWifiPreferenceInfo() {
        return result.hasUserWifiPreferenceInfo();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo getUserWifiPreferenceInfo() {
        return result.getUserWifiPreferenceInfo();
      }
      public Builder setUserWifiPreferenceInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasUserWifiPreferenceInfo = true;
        result.userWifiPreferenceInfo_ = value;
        return this;
      }
      public Builder setUserWifiPreferenceInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.Builder builderForValue) {
        result.hasUserWifiPreferenceInfo = true;
        result.userWifiPreferenceInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeUserWifiPreferenceInfo(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo value) {
        if (result.hasUserWifiPreferenceInfo() &&
            result.userWifiPreferenceInfo_ != com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.getDefaultInstance()) {
          result.userWifiPreferenceInfo_ =
            com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.newBuilder(result.userWifiPreferenceInfo_).mergeFrom(value).buildPartial();
        } else {
          result.userWifiPreferenceInfo_ = value;
        }
        result.hasUserWifiPreferenceInfo = true;
        return this;
      }
      public Builder clearUserWifiPreferenceInfo() {
        result.hasUserWifiPreferenceInfo = false;
        result.userWifiPreferenceInfo_ = com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneLoggedInfo)
    }
    
    static {
      defaultInstance = new SneLoggedInfo(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneLoggedInfo)
  }
  
  public static final class UserWifiPreferenceInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use UserWifiPreferenceInfo.newBuilder() to construct.
    private UserWifiPreferenceInfo() {
      initFields();
    }
    private UserWifiPreferenceInfo(boolean noInit) {}
    
    private static final UserWifiPreferenceInfo defaultInstance;
    public static UserWifiPreferenceInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public UserWifiPreferenceInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional bool data_store_session = 1;
    public static final int DATA_STORE_SESSION_FIELD_NUMBER = 1;
    private boolean hasDataStoreSession;
    private boolean dataStoreSession_ = false;
    public boolean hasDataStoreSession() { return hasDataStoreSession; }
    public boolean getDataStoreSession() { return dataStoreSession_; }
    
    // optional string model_id = 2;
    public static final int MODEL_ID_FIELD_NUMBER = 2;
    private boolean hasModelId;
    private java.lang.String modelId_ = "";
    public boolean hasModelId() { return hasModelId; }
    public java.lang.String getModelId() { return modelId_; }
    
    // optional bool reconnection = 3;
    public static final int RECONNECTION_FIELD_NUMBER = 3;
    private boolean hasReconnection;
    private boolean reconnection_ = false;
    public boolean hasReconnection() { return hasReconnection; }
    public boolean getReconnection() { return reconnection_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasDataStoreSession()) {
        output.writeBool(1, getDataStoreSession());
      }
      if (hasModelId()) {
        output.writeString(2, getModelId());
      }
      if (hasReconnection()) {
        output.writeBool(3, getReconnection());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasDataStoreSession()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, getDataStoreSession());
      }
      if (hasModelId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getModelId());
      }
      if (hasReconnection()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getReconnection());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo, Builder> {
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo();
        return builder;
      }
      
      protected com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo getDefaultInstanceForType() {
        return com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo other) {
        if (other == com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.UserWifiPreferenceInfo.getDefaultInstance()) return this;
        if (other.hasDataStoreSession()) {
          setDataStoreSession(other.getDataStoreSession());
        }
        if (other.hasModelId()) {
          setModelId(other.getModelId());
        }
        if (other.hasReconnection()) {
          setReconnection(other.getReconnection());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setDataStoreSession(input.readBool());
              break;
            }
            case 18: {
              setModelId(input.readString());
              break;
            }
            case 24: {
              setReconnection(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional bool data_store_session = 1;
      public boolean hasDataStoreSession() {
        return result.hasDataStoreSession();
      }
      public boolean getDataStoreSession() {
        return result.getDataStoreSession();
      }
      public Builder setDataStoreSession(boolean value) {
        result.hasDataStoreSession = true;
        result.dataStoreSession_ = value;
        return this;
      }
      public Builder clearDataStoreSession() {
        result.hasDataStoreSession = false;
        result.dataStoreSession_ = false;
        return this;
      }
      
      // optional string model_id = 2;
      public boolean hasModelId() {
        return result.hasModelId();
      }
      public java.lang.String getModelId() {
        return result.getModelId();
      }
      public Builder setModelId(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasModelId = true;
        result.modelId_ = value;
        return this;
      }
      public Builder clearModelId() {
        result.hasModelId = false;
        result.modelId_ = getDefaultInstance().getModelId();
        return this;
      }
      
      // optional bool reconnection = 3;
      public boolean hasReconnection() {
        return result.hasReconnection();
      }
      public boolean getReconnection() {
        return result.getReconnection();
      }
      public Builder setReconnection(boolean value) {
        result.hasReconnection = true;
        result.reconnection_ = value;
        return this;
      }
      public Builder clearReconnection() {
        result.hasReconnection = false;
        result.reconnection_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.UserWifiPreferenceInfo)
    }
    
    static {
      defaultInstance = new UserWifiPreferenceInfo(true);
      com.sonyericsson.idd.probe.android.smartnetworkengine.WifiPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.UserWifiPreferenceInfo)
  }
  
  
  static {
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
