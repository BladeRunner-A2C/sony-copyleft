// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EvaluationMetrix.proto

package com.sony.fl.pb;

public final class EvaluationMetrix {
  private EvaluationMetrix() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public static final class PBEvaluationMetrix extends
      com.google.protobuf.GeneratedMessageLite {
    // Use PBEvaluationMetrix.newBuilder() to construct.
    private PBEvaluationMetrix() {
      initFields();
    }
    private PBEvaluationMetrix(boolean noInit) {}
    
    private static final PBEvaluationMetrix defaultInstance;
    public static PBEvaluationMetrix getDefaultInstance() {
      return defaultInstance;
    }
    
    public PBEvaluationMetrix getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional double auc = 1;
    public static final int AUC_FIELD_NUMBER = 1;
    private boolean hasAuc;
    private double auc_ = 0D;
    public boolean hasAuc() { return hasAuc; }
    public double getAuc() { return auc_; }
    
    // repeated double thresholds = 2;
    public static final int THRESHOLDS_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Double> thresholds_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Double> getThresholdsList() {
      return thresholds_;
    }
    public int getThresholdsCount() { return thresholds_.size(); }
    public double getThresholds(int index) {
      return thresholds_.get(index);
    }
    
    // repeated int32 TP = 3;
    public static final int TP_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Integer> tP_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getTPList() {
      return tP_;
    }
    public int getTPCount() { return tP_.size(); }
    public int getTP(int index) {
      return tP_.get(index);
    }
    
    // repeated int32 TN = 4;
    public static final int TN_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> tN_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getTNList() {
      return tN_;
    }
    public int getTNCount() { return tN_.size(); }
    public int getTN(int index) {
      return tN_.get(index);
    }
    
    // repeated int32 FP = 5;
    public static final int FP_FIELD_NUMBER = 5;
    private java.util.List<java.lang.Integer> fP_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getFPList() {
      return fP_;
    }
    public int getFPCount() { return fP_.size(); }
    public int getFP(int index) {
      return fP_.get(index);
    }
    
    // repeated int32 FN = 6;
    public static final int FN_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Integer> fN_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getFNList() {
      return fN_;
    }
    public int getFNCount() { return fN_.size(); }
    public int getFN(int index) {
      return fN_.get(index);
    }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAuc()) {
        output.writeDouble(1, getAuc());
      }
      for (double element : getThresholdsList()) {
        output.writeDouble(2, element);
      }
      for (int element : getTPList()) {
        output.writeInt32(3, element);
      }
      for (int element : getTNList()) {
        output.writeInt32(4, element);
      }
      for (int element : getFPList()) {
        output.writeInt32(5, element);
      }
      for (int element : getFNList()) {
        output.writeInt32(6, element);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAuc()) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, getAuc());
      }
      {
        int dataSize = 0;
        dataSize = 8 * getThresholdsList().size();
        size += dataSize;
        size += 1 * getThresholdsList().size();
      }
      {
        int dataSize = 0;
        for (int element : getTPList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getTPList().size();
      }
      {
        int dataSize = 0;
        for (int element : getTNList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getTNList().size();
      }
      {
        int dataSize = 0;
        for (int element : getFPList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getFPList().size();
      }
      {
        int dataSize = 0;
        for (int element : getFNList()) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getFNList().size();
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix, Builder> {
      private com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix result;
      
      // Construct using com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix();
        return builder;
      }
      
      protected com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix getDefaultInstanceForType() {
        return com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.thresholds_ != java.util.Collections.EMPTY_LIST) {
          result.thresholds_ =
            java.util.Collections.unmodifiableList(result.thresholds_);
        }
        if (result.tP_ != java.util.Collections.EMPTY_LIST) {
          result.tP_ =
            java.util.Collections.unmodifiableList(result.tP_);
        }
        if (result.tN_ != java.util.Collections.EMPTY_LIST) {
          result.tN_ =
            java.util.Collections.unmodifiableList(result.tN_);
        }
        if (result.fP_ != java.util.Collections.EMPTY_LIST) {
          result.fP_ =
            java.util.Collections.unmodifiableList(result.fP_);
        }
        if (result.fN_ != java.util.Collections.EMPTY_LIST) {
          result.fN_ =
            java.util.Collections.unmodifiableList(result.fN_);
        }
        com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix other) {
        if (other == com.sony.fl.pb.EvaluationMetrix.PBEvaluationMetrix.getDefaultInstance()) return this;
        if (other.hasAuc()) {
          setAuc(other.getAuc());
        }
        if (!other.thresholds_.isEmpty()) {
          if (result.thresholds_.isEmpty()) {
            result.thresholds_ = new java.util.ArrayList<java.lang.Double>();
          }
          result.thresholds_.addAll(other.thresholds_);
        }
        if (!other.tP_.isEmpty()) {
          if (result.tP_.isEmpty()) {
            result.tP_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.tP_.addAll(other.tP_);
        }
        if (!other.tN_.isEmpty()) {
          if (result.tN_.isEmpty()) {
            result.tN_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.tN_.addAll(other.tN_);
        }
        if (!other.fP_.isEmpty()) {
          if (result.fP_.isEmpty()) {
            result.fP_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.fP_.addAll(other.fP_);
        }
        if (!other.fN_.isEmpty()) {
          if (result.fN_.isEmpty()) {
            result.fN_ = new java.util.ArrayList<java.lang.Integer>();
          }
          result.fN_.addAll(other.fN_);
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 9: {
              setAuc(input.readDouble());
              break;
            }
            case 17: {
              addThresholds(input.readDouble());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addThresholds(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              addTP(input.readInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addTP(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              addTN(input.readInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addTN(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              addFP(input.readInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addFP(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 48: {
              addFN(input.readInt32());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              while (input.getBytesUntilLimit() > 0) {
                addFN(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      }
      
      
      // optional double auc = 1;
      public boolean hasAuc() {
        return result.hasAuc();
      }
      public double getAuc() {
        return result.getAuc();
      }
      public Builder setAuc(double value) {
        result.hasAuc = true;
        result.auc_ = value;
        return this;
      }
      public Builder clearAuc() {
        result.hasAuc = false;
        result.auc_ = 0D;
        return this;
      }
      
      // repeated double thresholds = 2;
      public java.util.List<java.lang.Double> getThresholdsList() {
        return java.util.Collections.unmodifiableList(result.thresholds_);
      }
      public int getThresholdsCount() {
        return result.getThresholdsCount();
      }
      public double getThresholds(int index) {
        return result.getThresholds(index);
      }
      public Builder setThresholds(int index, double value) {
        result.thresholds_.set(index, value);
        return this;
      }
      public Builder addThresholds(double value) {
        if (result.thresholds_.isEmpty()) {
          result.thresholds_ = new java.util.ArrayList<java.lang.Double>();
        }
        result.thresholds_.add(value);
        return this;
      }
      public Builder addAllThresholds(
          java.lang.Iterable<? extends java.lang.Double> values) {
        if (result.thresholds_.isEmpty()) {
          result.thresholds_ = new java.util.ArrayList<java.lang.Double>();
        }
        super.addAll(values, result.thresholds_);
        return this;
      }
      public Builder clearThresholds() {
        result.thresholds_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int32 TP = 3;
      public java.util.List<java.lang.Integer> getTPList() {
        return java.util.Collections.unmodifiableList(result.tP_);
      }
      public int getTPCount() {
        return result.getTPCount();
      }
      public int getTP(int index) {
        return result.getTP(index);
      }
      public Builder setTP(int index, int value) {
        result.tP_.set(index, value);
        return this;
      }
      public Builder addTP(int value) {
        if (result.tP_.isEmpty()) {
          result.tP_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.tP_.add(value);
        return this;
      }
      public Builder addAllTP(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.tP_.isEmpty()) {
          result.tP_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.tP_);
        return this;
      }
      public Builder clearTP() {
        result.tP_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int32 TN = 4;
      public java.util.List<java.lang.Integer> getTNList() {
        return java.util.Collections.unmodifiableList(result.tN_);
      }
      public int getTNCount() {
        return result.getTNCount();
      }
      public int getTN(int index) {
        return result.getTN(index);
      }
      public Builder setTN(int index, int value) {
        result.tN_.set(index, value);
        return this;
      }
      public Builder addTN(int value) {
        if (result.tN_.isEmpty()) {
          result.tN_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.tN_.add(value);
        return this;
      }
      public Builder addAllTN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.tN_.isEmpty()) {
          result.tN_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.tN_);
        return this;
      }
      public Builder clearTN() {
        result.tN_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int32 FP = 5;
      public java.util.List<java.lang.Integer> getFPList() {
        return java.util.Collections.unmodifiableList(result.fP_);
      }
      public int getFPCount() {
        return result.getFPCount();
      }
      public int getFP(int index) {
        return result.getFP(index);
      }
      public Builder setFP(int index, int value) {
        result.fP_.set(index, value);
        return this;
      }
      public Builder addFP(int value) {
        if (result.fP_.isEmpty()) {
          result.fP_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.fP_.add(value);
        return this;
      }
      public Builder addAllFP(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.fP_.isEmpty()) {
          result.fP_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.fP_);
        return this;
      }
      public Builder clearFP() {
        result.fP_ = java.util.Collections.emptyList();
        return this;
      }
      
      // repeated int32 FN = 6;
      public java.util.List<java.lang.Integer> getFNList() {
        return java.util.Collections.unmodifiableList(result.fN_);
      }
      public int getFNCount() {
        return result.getFNCount();
      }
      public int getFN(int index) {
        return result.getFN(index);
      }
      public Builder setFN(int index, int value) {
        result.fN_.set(index, value);
        return this;
      }
      public Builder addFN(int value) {
        if (result.fN_.isEmpty()) {
          result.fN_ = new java.util.ArrayList<java.lang.Integer>();
        }
        result.fN_.add(value);
        return this;
      }
      public Builder addAllFN(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        if (result.fN_.isEmpty()) {
          result.fN_ = new java.util.ArrayList<java.lang.Integer>();
        }
        super.addAll(values, result.fN_);
        return this;
      }
      public Builder clearFN() {
        result.fN_ = java.util.Collections.emptyList();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:com.sony.fl.pb.PBEvaluationMetrix)
    }
    
    static {
      defaultInstance = new PBEvaluationMetrix(true);
      com.sony.fl.pb.EvaluationMetrix.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:com.sony.fl.pb.PBEvaluationMetrix)
  }
  
  
  static {
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
