#include <gtest/gtest.h>
#include <iostream>
#include <vector>
#include <string>
#include <cassert>
#include <unordered_map>
#include <unistd.h>

#include "NNHLCR/lstm_lcr_model_nnabla.h"
#include "NNHLCR/data_normalizer.h"

float x0[] = {0.857794,1.069542,1.876248,0.666642,0.646275,1.349414,1.041156,1.259321,0.018650,1.045818,1.000000,1.000000,0.000000,
             1.053484,0.926854,1.662627,1.137241,1.529959,1.055488,0.637683,0.947744,1.864815,0.020755,1.000000,1.000000,0.000000,
             1.490171,0.174854,1.954317,0.284297,1.664206,0.452631,1.755731,0.500042,0.429072,0.513032,1.000000,1.000000,0.000000,
             1.721924,0.097231,0.876755,0.682838,0.834283,1.556183,0.504749,1.015972,1.400632,0.275577,1.000000,1.000000,0.000000,
             1.862259,0.390042,0.844716,1.076349,0.841206,0.066427,1.697208,0.465949,1.430360,0.489663,1.000000,1.000000,0.000000,
             1.755041,0.884185,1.214192,1.157967,0.219609,1.491656,1.796584,1.717885,0.139920,0.947506,1.000000,1.000000,0.000000,
             0.138756,1.032719,1.737744,0.546040,1.964188,1.098520,1.600144,1.406094,1.491822,0.504435,1.000000,1.000000,0.000000,
             1.898207,1.858959,0.110164,0.875559,0.024409,0.367739,1.852587,0.755329,0.126964,1.147889,1.000000,1.000000,0.000000,
             0.374914,1.564331,1.218059,1.877848,0.209167,1.458295,0.152921,0.589017,1.610823,1.843708,1.000000,1.000000,0.000000,
             0.113296,1.321201,0.352085,1.989424,0.106816,0.526028,0.535334,1.525832,1.030717,0.778521,1.000000,1.000000,0.000000,
             0.325969,0.345854,0.144434,0.358698,1.176167,0.985261,1.045117,1.732317,1.301922,0.913824,1.000000,1.000000,0.000000,
             0.299956,1.607262,0.542610,1.686827,1.133771,0.964085,0.498744,1.916791,0.593930,1.784905,1.000000,1.000000,0.000000,
             1.050038,0.414032,0.805368,1.731645,1.238555,1.284437,0.659694,1.654002,0.559588,1.329483,1.000000,1.000000,0.000000,
             1.576912,1.812203,0.378607,1.139914,1.428911,0.606778,0.601802,1.620971,0.485459,0.095943,1.000000,1.000000,0.000000,
             0.348698,1.280218,0.158756,0.999035,1.120368,1.525332,0.221014,1.650828,0.424302,0.909746,1.000000,1.000000,0.000000,
1.927778,0.980503,0.789579,1.939464,1.991026,0.654966,0.116232,0.300867,1.694313,1.203679,1.000000,1.000000,0.000000};

float normalized_ans0[] ={1.86467,1.91398,7.65937,-1.07901,1.6028,-2.2001,-3.2854,-0.64256,-1.10077,1,1,0,1,0,0,0,0,0,
1.93993,1.869,7.63702,-1.02759,2.30622,-2.36341,-3.41702,-0.711341,-0.57732,1,1,0,1,0,0,0,0,0,
2.06693,1.34518,7.66754,-1.12797,2.37515,-2.92627,-3.10599,-0.832399,-0.929386,1,1,0,1,0,0,0,0,0,
2.11987,1.16095,7.5548,-1.07709,1.81055,-2.10532,-3.46762,-0.695382,-0.666806,1,1,0,1,0,0,0,0,0,
2.14856,1.59713,7.55145,-1.03379,1.81729,-4.20197,-3.11882,-0.843055,-0.660575,1,1,0,1,0,0,0,0,0,
2.12684,1.8542,7.59011,-1.02551,0.7367,-2.13348,-3.0972,-0.556908,-1.04383,1,1,0,1,0,0,0,0,0,
1.19772,1.90298,7.64488,-1.09365,2.51108,-2.33685,-3.14073,-0.613386,-0.647933,1,1,0,1,0,0,0,0,0,
2.15556,2.08764,7.4746,-1.05515,-0.828633,-3.06435,-3.08535,-0.759553,-1.04961,1,1,0,1,0,0,0,0,0,
1.5616,2.03343,7.59051,-0.960544,0.698316,-2.14851,-3.62679,-0.805691,-0.624317,1,1,0,1,0,0,0,0,0,
1.12354,1.98036,7.49991,-0.95157,0.179385,-2.82637,-3.45559,-0.590876,-0.751518,1,1,0,1,0,0,0,0,0,
1.51038,1.55937,7.47819,-1.11783,2.09095,-2.40919,-3.28424,-0.554454,-0.688061,1,1,0,1,0,0,0,0,0,
1.47993,2.04193,7.51985,-0.976525,2.06093,-2.42363,-3.47001,-0.524171,-0.874118,1,1,0,1,0,0,0,0,0,
1.93873,1.61588,7.54734,-0.972702,2.13322,-2.23291,-3.40904,-0.567933,-0.885144,1,1,0,1,0,0,0,0,0,
2.08765,2.07963,7.50269,-1.02732,2.25025,-2.73143,-3.43026,-0.573738,-0.909796,1,1,0,1,0,0,0,0,0,
1.53506,1.97047,7.47969,-1.04185,2.05121,-2.11864,-3.5925,-0.568488,-0.931079,1,1,0,1,0,0,0,0,0,
2.16122,1.88668,7.54568,-0.955557,2.52221,-2.68063,-3.64612,-0.898431,-0.608382,1,1,0,1,0,0,0,0,0,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};

int data_size0 = 16;
float y_0 = 0.1536315;

float x1[] = {1.799629,1.521790,1.784469,1.653022,1.270414,0.686919,0.985187,1.978955,1.748691,0.973343,1.000000,1.000000,1.000000,
0.372508,1.665185,0.216902,0.720034,1.655620,0.376195,0.947337,1.113516,0.448184,0.997362,1.000000,1.000000,1.000000,
0.414792,0.117768,0.929763,1.749554,0.064235,1.376615,0.858020,0.278813,1.776654,1.616665,1.000000,1.000000,1.000000,
1.519702,1.725569,0.818573,1.386478,1.231919,0.889136,1.697129,0.794010,1.543517,1.383331,1.000000,1.000000,1.000000,
0.706273,1.545620,1.219424,1.749424,1.730206,1.825330,1.750217,0.281383,0.806989,1.296218,1.000000,1.000000,1.000000,
1.958282,0.391785,0.367152,0.301667,0.545038,1.953179,1.979316,1.401177,0.243106,1.231895,1.000000,1.000000,1.000000,
0.342093,1.082309,1.291035,0.881480,1.041577,1.287055,0.064831,0.417112,1.586351,1.498987,1.000000,1.000000,1.000000,
0.214506,0.159714,0.269104,0.311309,1.631314,1.952836,1.176351,0.506047,0.290006,1.102978,1.000000,1.000000,1.000000,
1.952711,1.712632,1.317761,0.540833,1.405419,0.268341,1.581513,1.178037,1.449714,1.493807,1.000000,1.000000,1.000000,
0.897465,1.827958,0.427271,1.911452,0.381933,0.374252,0.262179,1.133536,0.922216,1.151406,1.000000,1.000000,1.000000,
0.031189,1.270182,1.407087,0.148241,1.222354,0.191868,1.671846,1.873844,0.089231,1.715883,1.000000,1.000000,1.000000,
1.099698,0.031973,1.141854,1.031918,0.235999,0.634500,1.816179,0.236207,1.078346,1.668874,1.000000,1.000000,1.000000,
0.847958,0.077768,1.832514,0.138691,0.602515,1.744633,1.853385,1.515562,0.336350,0.722796,1.000000,1.000000,1.000000,
1.600027,1.258885,1.609874,0.273606,0.629603,1.738648,0.359466,0.503527,0.318331,1.497897,1.000000,1.000000,1.000000,
1.999295,0.083619,1.649718,0.696049,0.630784,1.227827,1.715967,1.218273,1.325000,1.560908,1.000000,1.000000,1.000000,
0.988283,1.990902,1.058515,0.582253,1.221710,1.769885,1.374177,0.249991,1.897595,0.391562,1.000000,1.000000,1.000000,
0.065285,1.455318,0.525378,1.770743,0.669877,0.215384,0.356776,0.073562,0.156812,0.685606,1.000000,1.000000,1.000000,
0.967106,0.735306,0.039764,0.337489,1.358698,0.141332,0.946013,0.542656,1.989379,0.604451,1.000000,1.000000,1.000000};

float normalized_ans1[] = {2.13603,2.02477,7.64977,-0.979439,2.154,-2.64897,-3.30201,-0.514396,-0.598267,1,1,0,1,0,0,0,0,1,
1.55924,2.05305,7.48577,-1.07274,2.37091,-3.04923,-3.31352,-0.673481,-0.922661,1,1,0,1,0,0,0,0,1,
1.59861,1.2211,7.56035,-0.971187,-0.194506,-2.18683,-3.34158,-0.906357,-0.593143,1,1,0,1,0,0,0,0,1,
2.07411,2.06424,7.54872,-1.00341,2.12883,-2.47743,-3.11884,-0.74945,-0.637538,1,1,0,1,0,0,0,0,1,
1.7935,2.02965,7.59065,-0.971198,2.40704,-1.99928,-3.10719,-0.905426,-0.810608,1,1,0,1,0,0,0,0,1,
2.16697,1.59853,7.50149,-1.12557,1.46463,-1.95427,-3.05937,-0.614335,-0.99996,1,1,0,1,0,0,0,0,1,
1.52805,1.91771,7.59815,-1.0545,1.99162,-2.23155,-3.6743,-0.85876,-0.629084,1,1,0,1,0,0,0,0,1,
1.35717,1.31674,7.49123,-1.12425,2.35879,-1.95439,-3.24706,-0.830547,-0.981212,1,1,0,1,0,0,0,0,1,
2.16593,2.06188,7.60094,-1.0943,2.23667,-3.27383,-3.14503,-0.659543,-0.65656,1,1,0,1,0,0,0,0,1,
1.88123,2.08235,7.50778,-0.957814,1.17768,-3.05268,-3.57268,-0.669111,-0.779315,1,1,0,1,0,0,0,0,1,
0.65195,1.96799,7.61029,-1.1474,2.12245,-3.49683,-3.12447,-0.531046,-1.06685,1,1,0,1,0,0,0,0,1,
1.95565,0.812202,7.58254,-1.0384,0.793563,-2.70173,-3.09303,-0.922062,-0.739782,1,1,0,1,0,0,0,0,1,
1.86045,1.09086,7.6548,-1.14881,1.54589,-2.02934,-3.08518,-0.592764,-0.963345,1,1,0,1,0,0,0,0,1,
2.09298,1.96519,7.6315,-1.12945,1.58158,-2.03162,-3.5283,-0.831323,-0.970217,1,1,0,1,0,0,0,0,1,
2.17456,1.11362,7.63567,-1.07554,1.5831,-2.26287,-3.11468,-0.651058,-0.683011,1,1,0,1,0,0,0,0,1,
1.91653,2.10918,7.57382,-1.08918,2.12202,-2.01978,-3.19507,-0.916923,-0.571561,1,1,0,1,0,0,0,0,1,
0.921884,2.01074,7.51804,-0.969405,1.63194,-3.41997,-3.52949,-0.987447,-1.03638,1,1,0,1,0,0,0,0,1,
1.9086,1.79628,7.46724,-1.12069,2.20899,-3.70005,-3.31392,-0.819415,-0.555774,1,1,0,1,0,0,0,0,1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};

int data_size1 = 18;
float y_1 = 0.1207624;

char nntxt_path[] = "../../resources/NNHLCR/task_info/graph.nntxt";         // cwd: src/test/jni/build
char pbf_path [] = "../../resources/NNHLCR/task_info/cluster1.protobuf";    // cwd: src/test/jni/build

class NativeSample {
public:
  LstmLCRModel* mlObj;
  int initialize(int n_components);
  int predict(float x[], float normalized_ans[], int data_size, float y);
  void finalize();
};

int NativeSample::initialize(int n_components) {
  mlObj = new LstmLCRModel();

  // create input value for initialize.
  int components = n_components;
  // n_components = 10 and 0 is failed test case.
  if (n_components == 10 || n_components == 0) {
    components = 1;
  }
  vector<string> nntxts(components);
  nntxts[0] = nntxt_path;
  vector<string> pbf(components);
  pbf[0] = pbf_path;
  vector<float> global_weights(components, 1.0);
  unordered_map<string, int> cluster_map;
  int max_length = 30;
  int num_of_normalized_features = 18;

  return mlObj->initialize(n_components, nntxts, pbf, global_weights,
                           cluster_map, max_length, num_of_normalized_features);
}

int NativeSample::predict(float x[], float normalized_ans[], int data_size, float y) {
  int B = 1;
  int num_of_row_features = 13;
  int num_of_normalized_features = 18;

  DataNormalizer dn;
  float* normalized_x = new float[mlObj->max_len * mlObj->n_features];
  for (int i=0;i<mlObj->max_len * mlObj->n_features;i++) normalized_x[i] = -1.0f;
  for (int i = 0; i < data_size; i++) {
    bool is_flag = dn.normalize_all_features(
                    num_of_row_features,
                    mlObj->n_features,
                    x + (i * num_of_row_features),
                    normalized_x + (i * mlObj->n_features));
    if (!is_flag) {
      delete[] normalized_x;
      std::cout << "normalize fail." << std::endl;
      return -1;
    }
  }
  for (int i=0;i<mlObj->max_len;i++) {
    for (int j=0;j<mlObj->n_features;j++) {
      float diff = normalized_x[i*mlObj->n_features+j] - normalized_ans[i*mlObj->n_features+j];
      if (diff < 0) diff *= -1;
      if (diff >= 1e-1) {
        delete[] normalized_x;
        std::cout << "normalized data is unmatch." << std::endl;
        return -1;
      }
    }
  }

  int l[B];
  string gl[B];
  string ul[B];
  float y_pred[B];
  int data_num = 1;
  for (int i=0;i<B;i++) {
    l[i] = data_size - 1;
    gl[i] = string("G1");
    ul[i] = string("U1");
  }
  int isSuccess = mlObj->predict(normalized_x, (string*)gl, (string*)ul, (int*)l, (float*)y_pred, data_num, mlObj->max_len, mlObj->n_features);
  delete[] normalized_x;
  if (isSuccess != 0) {
    std::cout << "predict fail." << std::endl;
    return -1;
  }
  float diff = y_pred[0] - y;
  if (diff < 0) diff *= -1;
  if (diff >= 1e-5) {
    std::cout << "predict result fail." << std::endl;
    return -1;
  }
  return 0;
}

void NativeSample::finalize() {
  mlObj->finalize();
  delete mlObj;
}

TEST(LstmNNabla_Test0, BasicAssertions) {
  NativeSample native_sample;
  EXPECT_EQ(0, native_sample.initialize(1));
  for (int i = 0; i < 5; i++) {
    EXPECT_EQ(0, native_sample.predict(x0, normalized_ans0, data_size0, y_0));
    EXPECT_EQ(0, native_sample.predict(x1, normalized_ans1, data_size1, y_1));
  }
  native_sample.finalize();
}

TEST(LstmNNabla_Test1, BasicAssertions) {
  LstmLCRModel lstm_model;
  lstm_model.finalize();
}

TEST(LstmNNabla_Test2, BasicAssertions) {
  NativeSample native_sample;
  EXPECT_EQ(-1, native_sample.initialize(10));
  native_sample.finalize();
}

TEST(LstmNNabla_Test3, BasicAssertions) {
  NativeSample native_sample;
  EXPECT_EQ(-1, native_sample.initialize(0));
  native_sample.finalize();
}

TEST(LstmNNabla_Test4, BasicAssertions) {
  NativeSample native_sample;
  EXPECT_EQ(-1, native_sample.initialize(101));
  native_sample.finalize();
}
