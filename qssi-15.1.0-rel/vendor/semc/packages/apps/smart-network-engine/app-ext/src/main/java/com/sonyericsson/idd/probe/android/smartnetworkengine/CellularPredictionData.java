// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: smartnetworkengine/cellular_prediction_data.proto

package com.sonyericsson.idd.probe.android.smartnetworkengine;

public final class CellularPredictionData {
  private CellularPredictionData() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public static final class SneCellularEvent extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellularEvent.newBuilder() to construct.
    private SneCellularEvent() {
      initFields();
    }
    private SneCellularEvent(boolean noInit) {}
    
    private static final SneCellularEvent defaultInstance;
    public static SneCellularEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellularEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional string logger_version = 1;
    public static final int LOGGER_VERSION_FIELD_NUMBER = 1;
    private boolean hasLoggerVersion;
    private String loggerVersion_ = "";
    public boolean hasLoggerVersion() { return hasLoggerVersion; }
    public String getLoggerVersion() { return loggerVersion_; }
    
    // optional string app_version = 2;
    public static final int APP_VERSION_FIELD_NUMBER = 2;
    private boolean hasAppVersion;
    private String appVersion_ = "";
    public boolean hasAppVersion() { return hasAppVersion; }
    public String getAppVersion() { return appVersion_; }
    
    // repeated .smartnetworkengine.SneCellularSample cellular_samples = 3;
    public static final int CELLULAR_SAMPLES_FIELD_NUMBER = 3;
    private java.util.List<SneCellularSample> cellularSamples_ =
      java.util.Collections.emptyList();
    public java.util.List<SneCellularSample> getCellularSamplesList() {
      return cellularSamples_;
    }
    public int getCellularSamplesCount() { return cellularSamples_.size(); }
    public SneCellularSample getCellularSamples(int index) {
      return cellularSamples_.get(index);
    }
    
    // optional .smartnetworkengine.SneCarrierInfo carrier_info = 4;
    public static final int CARRIER_INFO_FIELD_NUMBER = 4;
    private boolean hasCarrierInfo;
    private SneCarrierInfo carrierInfo_;
    public boolean hasCarrierInfo() { return hasCarrierInfo; }
    public SneCarrierInfo getCarrierInfo() { return carrierInfo_; }
    
    // optional string application_package_name = 5;
    public static final int APPLICATION_PACKAGE_NAME_FIELD_NUMBER = 5;
    private boolean hasApplicationPackageName;
    private String applicationPackageName_ = "";
    public boolean hasApplicationPackageName() { return hasApplicationPackageName; }
    public String getApplicationPackageName() { return applicationPackageName_; }
    
    private void initFields() {
      carrierInfo_ = SneCarrierInfo.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasLoggerVersion()) {
        output.writeString(1, getLoggerVersion());
      }
      if (hasAppVersion()) {
        output.writeString(2, getAppVersion());
      }
      for (SneCellularSample element : getCellularSamplesList()) {
        output.writeMessage(3, element);
      }
      if (hasCarrierInfo()) {
        output.writeMessage(4, getCarrierInfo());
      }
      if (hasApplicationPackageName()) {
        output.writeString(5, getApplicationPackageName());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasLoggerVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getLoggerVersion());
      }
      if (hasAppVersion()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getAppVersion());
      }
      for (SneCellularSample element : getCellularSamplesList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, element);
      }
      if (hasCarrierInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCarrierInfo());
      }
      if (hasApplicationPackageName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getApplicationPackageName());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCellularEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellularEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellularEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellularEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellularEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellularEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellularEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCellularEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCellularEvent, Builder> {
      private SneCellularEvent result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCellularEvent.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCellularEvent();
        return builder;
      }
      
      protected SneCellularEvent internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCellularEvent();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCellularEvent getDefaultInstanceForType() {
        return SneCellularEvent.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCellularEvent build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCellularEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCellularEvent buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.cellularSamples_ != java.util.Collections.EMPTY_LIST) {
          result.cellularSamples_ =
            java.util.Collections.unmodifiableList(result.cellularSamples_);
        }
        SneCellularEvent returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCellularEvent other) {
        if (other == SneCellularEvent.getDefaultInstance()) return this;
        if (other.hasLoggerVersion()) {
          setLoggerVersion(other.getLoggerVersion());
        }
        if (other.hasAppVersion()) {
          setAppVersion(other.getAppVersion());
        }
        if (!other.cellularSamples_.isEmpty()) {
          if (result.cellularSamples_.isEmpty()) {
            result.cellularSamples_ = new java.util.ArrayList<SneCellularSample>();
          }
          result.cellularSamples_.addAll(other.cellularSamples_);
        }
        if (other.hasCarrierInfo()) {
          mergeCarrierInfo(other.getCarrierInfo());
        }
        if (other.hasApplicationPackageName()) {
          setApplicationPackageName(other.getApplicationPackageName());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setLoggerVersion(input.readString());
              break;
            }
            case 18: {
              setAppVersion(input.readString());
              break;
            }
            case 26: {
              SneCellularSample.Builder subBuilder = SneCellularSample.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addCellularSamples(subBuilder.buildPartial());
              break;
            }
            case 34: {
              SneCarrierInfo.Builder subBuilder = SneCarrierInfo.newBuilder();
              if (hasCarrierInfo()) {
                subBuilder.mergeFrom(getCarrierInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCarrierInfo(subBuilder.buildPartial());
              break;
            }
            case 42: {
              setApplicationPackageName(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional string logger_version = 1;
      public boolean hasLoggerVersion() {
        return result.hasLoggerVersion();
      }
      public String getLoggerVersion() {
        return result.getLoggerVersion();
      }
      public Builder setLoggerVersion(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasLoggerVersion = true;
        result.loggerVersion_ = value;
        return this;
      }
      public Builder clearLoggerVersion() {
        result.hasLoggerVersion = false;
        result.loggerVersion_ = getDefaultInstance().getLoggerVersion();
        return this;
      }
      
      // optional string app_version = 2;
      public boolean hasAppVersion() {
        return result.hasAppVersion();
      }
      public String getAppVersion() {
        return result.getAppVersion();
      }
      public Builder setAppVersion(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasAppVersion = true;
        result.appVersion_ = value;
        return this;
      }
      public Builder clearAppVersion() {
        result.hasAppVersion = false;
        result.appVersion_ = getDefaultInstance().getAppVersion();
        return this;
      }
      
      // repeated .smartnetworkengine.SneCellularSample cellular_samples = 3;
      public java.util.List<SneCellularSample> getCellularSamplesList() {
        return java.util.Collections.unmodifiableList(result.cellularSamples_);
      }
      public int getCellularSamplesCount() {
        return result.getCellularSamplesCount();
      }
      public SneCellularSample getCellularSamples(int index) {
        return result.getCellularSamples(index);
      }
      public Builder setCellularSamples(int index, SneCellularSample value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.cellularSamples_.set(index, value);
        return this;
      }
      public Builder setCellularSamples(int index, SneCellularSample.Builder builderForValue) {
        result.cellularSamples_.set(index, builderForValue.build());
        return this;
      }
      public Builder addCellularSamples(SneCellularSample value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.cellularSamples_.isEmpty()) {
          result.cellularSamples_ = new java.util.ArrayList<SneCellularSample>();
        }
        result.cellularSamples_.add(value);
        return this;
      }
      public Builder addCellularSamples(SneCellularSample.Builder builderForValue) {
        if (result.cellularSamples_.isEmpty()) {
          result.cellularSamples_ = new java.util.ArrayList<SneCellularSample>();
        }
        result.cellularSamples_.add(builderForValue.build());
        return this;
      }
      public Builder addAllCellularSamples(
          Iterable<? extends SneCellularSample> values) {
        if (result.cellularSamples_.isEmpty()) {
          result.cellularSamples_ = new java.util.ArrayList<SneCellularSample>();
        }
        super.addAll(values, result.cellularSamples_);
        return this;
      }
      public Builder clearCellularSamples() {
        result.cellularSamples_ = java.util.Collections.emptyList();
        return this;
      }
      
      // optional .smartnetworkengine.SneCarrierInfo carrier_info = 4;
      public boolean hasCarrierInfo() {
        return result.hasCarrierInfo();
      }
      public SneCarrierInfo getCarrierInfo() {
        return result.getCarrierInfo();
      }
      public Builder setCarrierInfo(SneCarrierInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCarrierInfo = true;
        result.carrierInfo_ = value;
        return this;
      }
      public Builder setCarrierInfo(SneCarrierInfo.Builder builderForValue) {
        result.hasCarrierInfo = true;
        result.carrierInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeCarrierInfo(SneCarrierInfo value) {
        if (result.hasCarrierInfo() &&
            result.carrierInfo_ != SneCarrierInfo.getDefaultInstance()) {
          result.carrierInfo_ =
            SneCarrierInfo.newBuilder(result.carrierInfo_).mergeFrom(value).buildPartial();
        } else {
          result.carrierInfo_ = value;
        }
        result.hasCarrierInfo = true;
        return this;
      }
      public Builder clearCarrierInfo() {
        result.hasCarrierInfo = false;
        result.carrierInfo_ = SneCarrierInfo.getDefaultInstance();
        return this;
      }
      
      // optional string application_package_name = 5;
      public boolean hasApplicationPackageName() {
        return result.hasApplicationPackageName();
      }
      public String getApplicationPackageName() {
        return result.getApplicationPackageName();
      }
      public Builder setApplicationPackageName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasApplicationPackageName = true;
        result.applicationPackageName_ = value;
        return this;
      }
      public Builder clearApplicationPackageName() {
        result.hasApplicationPackageName = false;
        result.applicationPackageName_ = getDefaultInstance().getApplicationPackageName();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellularEvent)
    }
    
    static {
      defaultInstance = new SneCellularEvent(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellularEvent)
  }
  
  public static final class SneCellularSample extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellularSample.newBuilder() to construct.
    private SneCellularSample() {
      initFields();
    }
    private SneCellularSample(boolean noInit) {}
    
    private static final SneCellularSample defaultInstance;
    public static SneCellularSample getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellularSample getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public enum NetworkType
        implements com.google.protobuf.Internal.EnumLite {
      UNKNOWN(0, 0),
      LTE(1, 1),
      NR(2, 2),
      LTE_NR(3, 3),
      ;
      
      
      public final int getNumber() { return value; }
      
      public static NetworkType valueOf(int value) {
        switch (value) {
          case 0: return UNKNOWN;
          case 1: return LTE;
          case 2: return NR;
          case 3: return LTE_NR;
          default: return null;
        }
      }
      
      public static com.google.protobuf.Internal.EnumLiteMap<NetworkType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<NetworkType>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<NetworkType>() {
              public NetworkType findValueByNumber(int number) {
                return NetworkType.valueOf(number)
      ;        }
            };
      
      private final int index;
      private final int value;
      private NetworkType(int index, int value) {
        this.index = index;
        this.value = value;
      }
      
      // @@protoc_insertion_point(enum_scope:smartnetworkengine.SneCellularSample.NetworkType)
    }
    
    // optional .smartnetworkengine.SneCellularSample.NetworkType network_type = 1;
    public static final int NETWORK_TYPE_FIELD_NUMBER = 1;
    private boolean hasNetworkType;
    private NetworkType networkType_;
    public boolean hasNetworkType() { return hasNetworkType; }
    public NetworkType getNetworkType() { return networkType_; }
    
    // optional .smartnetworkengine.SneCellularTrafficStats cellular_traffic_stats = 2;
    public static final int CELLULAR_TRAFFIC_STATS_FIELD_NUMBER = 2;
    private boolean hasCellularTrafficStats;
    private SneCellularTrafficStats cellularTrafficStats_;
    public boolean hasCellularTrafficStats() { return hasCellularTrafficStats; }
    public SneCellularTrafficStats getCellularTrafficStats() { return cellularTrafficStats_; }
    
    // optional .smartnetworkengine.SneCellInfo cell_info = 3;
    public static final int CELL_INFO_FIELD_NUMBER = 3;
    private boolean hasCellInfo;
    private SneCellInfo cellInfo_;
    public boolean hasCellInfo() { return hasCellInfo; }
    public SneCellInfo getCellInfo() { return cellInfo_; }
    
    // optional int32 nr_state = 4;
    public static final int NR_STATE_FIELD_NUMBER = 4;
    private boolean hasNrState;
    private int nrState_ = 0;
    public boolean hasNrState() { return hasNrState; }
    public int getNrState() { return nrState_; }
    
    private void initFields() {
      networkType_ = NetworkType.UNKNOWN;
      cellularTrafficStats_ = SneCellularTrafficStats.getDefaultInstance();
      cellInfo_ = SneCellInfo.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasNetworkType()) {
        output.writeEnum(1, getNetworkType().getNumber());
      }
      if (hasCellularTrafficStats()) {
        output.writeMessage(2, getCellularTrafficStats());
      }
      if (hasCellInfo()) {
        output.writeMessage(3, getCellInfo());
      }
      if (hasNrState()) {
        output.writeInt32(4, getNrState());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasNetworkType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, getNetworkType().getNumber());
      }
      if (hasCellularTrafficStats()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCellularTrafficStats());
      }
      if (hasCellInfo()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getCellInfo());
      }
      if (hasNrState()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getNrState());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCellularSample parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellularSample parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularSample parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellularSample parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularSample parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellularSample parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularSample parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellularSample parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellularSample parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellularSample parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCellularSample prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCellularSample, Builder> {
      private SneCellularSample result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCellularSample.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCellularSample();
        return builder;
      }
      
      protected SneCellularSample internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCellularSample();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCellularSample getDefaultInstanceForType() {
        return SneCellularSample.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCellularSample build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCellularSample buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCellularSample buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneCellularSample returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCellularSample other) {
        if (other == SneCellularSample.getDefaultInstance()) return this;
        if (other.hasNetworkType()) {
          setNetworkType(other.getNetworkType());
        }
        if (other.hasCellularTrafficStats()) {
          mergeCellularTrafficStats(other.getCellularTrafficStats());
        }
        if (other.hasCellInfo()) {
          mergeCellInfo(other.getCellInfo());
        }
        if (other.hasNrState()) {
          setNrState(other.getNrState());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              NetworkType value = NetworkType.valueOf(rawValue);
              if (value != null) {
                setNetworkType(value);
              }
              break;
            }
            case 18: {
              SneCellularTrafficStats.Builder subBuilder = SneCellularTrafficStats.newBuilder();
              if (hasCellularTrafficStats()) {
                subBuilder.mergeFrom(getCellularTrafficStats());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCellularTrafficStats(subBuilder.buildPartial());
              break;
            }
            case 26: {
              SneCellInfo.Builder subBuilder = SneCellInfo.newBuilder();
              if (hasCellInfo()) {
                subBuilder.mergeFrom(getCellInfo());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCellInfo(subBuilder.buildPartial());
              break;
            }
            case 32: {
              setNrState(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional .smartnetworkengine.SneCellularSample.NetworkType network_type = 1;
      public boolean hasNetworkType() {
        return result.hasNetworkType();
      }
      public NetworkType getNetworkType() {
        return result.getNetworkType();
      }
      public Builder setNetworkType(NetworkType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasNetworkType = true;
        result.networkType_ = value;
        return this;
      }
      public Builder clearNetworkType() {
        result.hasNetworkType = false;
        result.networkType_ = NetworkType.UNKNOWN;
        return this;
      }
      
      // optional .smartnetworkengine.SneCellularTrafficStats cellular_traffic_stats = 2;
      public boolean hasCellularTrafficStats() {
        return result.hasCellularTrafficStats();
      }
      public SneCellularTrafficStats getCellularTrafficStats() {
        return result.getCellularTrafficStats();
      }
      public Builder setCellularTrafficStats(SneCellularTrafficStats value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCellularTrafficStats = true;
        result.cellularTrafficStats_ = value;
        return this;
      }
      public Builder setCellularTrafficStats(SneCellularTrafficStats.Builder builderForValue) {
        result.hasCellularTrafficStats = true;
        result.cellularTrafficStats_ = builderForValue.build();
        return this;
      }
      public Builder mergeCellularTrafficStats(SneCellularTrafficStats value) {
        if (result.hasCellularTrafficStats() &&
            result.cellularTrafficStats_ != SneCellularTrafficStats.getDefaultInstance()) {
          result.cellularTrafficStats_ =
            SneCellularTrafficStats.newBuilder(result.cellularTrafficStats_).mergeFrom(value).buildPartial();
        } else {
          result.cellularTrafficStats_ = value;
        }
        result.hasCellularTrafficStats = true;
        return this;
      }
      public Builder clearCellularTrafficStats() {
        result.hasCellularTrafficStats = false;
        result.cellularTrafficStats_ = SneCellularTrafficStats.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneCellInfo cell_info = 3;
      public boolean hasCellInfo() {
        return result.hasCellInfo();
      }
      public SneCellInfo getCellInfo() {
        return result.getCellInfo();
      }
      public Builder setCellInfo(SneCellInfo value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCellInfo = true;
        result.cellInfo_ = value;
        return this;
      }
      public Builder setCellInfo(SneCellInfo.Builder builderForValue) {
        result.hasCellInfo = true;
        result.cellInfo_ = builderForValue.build();
        return this;
      }
      public Builder mergeCellInfo(SneCellInfo value) {
        if (result.hasCellInfo() &&
            result.cellInfo_ != SneCellInfo.getDefaultInstance()) {
          result.cellInfo_ =
            SneCellInfo.newBuilder(result.cellInfo_).mergeFrom(value).buildPartial();
        } else {
          result.cellInfo_ = value;
        }
        result.hasCellInfo = true;
        return this;
      }
      public Builder clearCellInfo() {
        result.hasCellInfo = false;
        result.cellInfo_ = SneCellInfo.getDefaultInstance();
        return this;
      }
      
      // optional int32 nr_state = 4;
      public boolean hasNrState() {
        return result.hasNrState();
      }
      public int getNrState() {
        return result.getNrState();
      }
      public Builder setNrState(int value) {
        result.hasNrState = true;
        result.nrState_ = value;
        return this;
      }
      public Builder clearNrState() {
        result.hasNrState = false;
        result.nrState_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellularSample)
    }
    
    static {
      defaultInstance = new SneCellularSample(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellularSample)
  }
  
  public static final class SneCarrierInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCarrierInfo.newBuilder() to construct.
    private SneCarrierInfo() {
      initFields();
    }
    private SneCarrierInfo(boolean noInit) {}
    
    private static final SneCarrierInfo defaultInstance;
    public static SneCarrierInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCarrierInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional string apn_name = 1;
    public static final int APN_NAME_FIELD_NUMBER = 1;
    private boolean hasApnName;
    private String apnName_ = "";
    public boolean hasApnName() { return hasApnName; }
    public String getApnName() { return apnName_; }
    
    // optional int32 carrier_id = 2;
    public static final int CARRIER_ID_FIELD_NUMBER = 2;
    private boolean hasCarrierId;
    private int carrierId_ = 0;
    public boolean hasCarrierId() { return hasCarrierId; }
    public int getCarrierId() { return carrierId_; }
    
    // optional string carrier_name = 3;
    public static final int CARRIER_NAME_FIELD_NUMBER = 3;
    private boolean hasCarrierName;
    private String carrierName_ = "";
    public boolean hasCarrierName() { return hasCarrierName; }
    public String getCarrierName() { return carrierName_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasApnName()) {
        output.writeString(1, getApnName());
      }
      if (hasCarrierId()) {
        output.writeInt32(2, getCarrierId());
      }
      if (hasCarrierName()) {
        output.writeString(3, getCarrierName());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasApnName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getApnName());
      }
      if (hasCarrierId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCarrierId());
      }
      if (hasCarrierName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(3, getCarrierName());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCarrierInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCarrierInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCarrierInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCarrierInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCarrierInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCarrierInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCarrierInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCarrierInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCarrierInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCarrierInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCarrierInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCarrierInfo, Builder> {
      private SneCarrierInfo result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCarrierInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCarrierInfo();
        return builder;
      }
      
      protected SneCarrierInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCarrierInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCarrierInfo getDefaultInstanceForType() {
        return SneCarrierInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCarrierInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCarrierInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCarrierInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneCarrierInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCarrierInfo other) {
        if (other == SneCarrierInfo.getDefaultInstance()) return this;
        if (other.hasApnName()) {
          setApnName(other.getApnName());
        }
        if (other.hasCarrierId()) {
          setCarrierId(other.getCarrierId());
        }
        if (other.hasCarrierName()) {
          setCarrierName(other.getCarrierName());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setApnName(input.readString());
              break;
            }
            case 16: {
              setCarrierId(input.readInt32());
              break;
            }
            case 26: {
              setCarrierName(input.readString());
              break;
            }
          }
        }
      }
      
      
      // optional string apn_name = 1;
      public boolean hasApnName() {
        return result.hasApnName();
      }
      public String getApnName() {
        return result.getApnName();
      }
      public Builder setApnName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasApnName = true;
        result.apnName_ = value;
        return this;
      }
      public Builder clearApnName() {
        result.hasApnName = false;
        result.apnName_ = getDefaultInstance().getApnName();
        return this;
      }
      
      // optional int32 carrier_id = 2;
      public boolean hasCarrierId() {
        return result.hasCarrierId();
      }
      public int getCarrierId() {
        return result.getCarrierId();
      }
      public Builder setCarrierId(int value) {
        result.hasCarrierId = true;
        result.carrierId_ = value;
        return this;
      }
      public Builder clearCarrierId() {
        result.hasCarrierId = false;
        result.carrierId_ = 0;
        return this;
      }
      
      // optional string carrier_name = 3;
      public boolean hasCarrierName() {
        return result.hasCarrierName();
      }
      public String getCarrierName() {
        return result.getCarrierName();
      }
      public Builder setCarrierName(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasCarrierName = true;
        result.carrierName_ = value;
        return this;
      }
      public Builder clearCarrierName() {
        result.hasCarrierName = false;
        result.carrierName_ = getDefaultInstance().getCarrierName();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCarrierInfo)
    }
    
    static {
      defaultInstance = new SneCarrierInfo(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCarrierInfo)
  }
  
  public static final class SneCellularTrafficStats extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellularTrafficStats.newBuilder() to construct.
    private SneCellularTrafficStats() {
      initFields();
    }
    private SneCellularTrafficStats(boolean noInit) {}
    
    private static final SneCellularTrafficStats defaultInstance;
    public static SneCellularTrafficStats getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellularTrafficStats getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int32 tx_throughput_kbps = 1;
    public static final int TX_THROUGHPUT_KBPS_FIELD_NUMBER = 1;
    private boolean hasTxThroughputKbps;
    private int txThroughputKbps_ = 0;
    public boolean hasTxThroughputKbps() { return hasTxThroughputKbps; }
    public int getTxThroughputKbps() { return txThroughputKbps_; }
    
    // optional int32 rx_throughput_kbps = 2;
    public static final int RX_THROUGHPUT_KBPS_FIELD_NUMBER = 2;
    private boolean hasRxThroughputKbps;
    private int rxThroughputKbps_ = 0;
    public boolean hasRxThroughputKbps() { return hasRxThroughputKbps; }
    public int getRxThroughputKbps() { return rxThroughputKbps_; }
    
    // optional int32 tx_bandwidth_kbps = 3;
    public static final int TX_BANDWIDTH_KBPS_FIELD_NUMBER = 3;
    private boolean hasTxBandwidthKbps;
    private int txBandwidthKbps_ = 0;
    public boolean hasTxBandwidthKbps() { return hasTxBandwidthKbps; }
    public int getTxBandwidthKbps() { return txBandwidthKbps_; }
    
    // optional int32 rx_bandwidth_kbps = 4;
    public static final int RX_BANDWIDTH_KBPS_FIELD_NUMBER = 4;
    private boolean hasRxBandwidthKbps;
    private int rxBandwidthKbps_ = 0;
    public boolean hasRxBandwidthKbps() { return hasRxBandwidthKbps; }
    public int getRxBandwidthKbps() { return rxBandwidthKbps_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasTxThroughputKbps()) {
        output.writeInt32(1, getTxThroughputKbps());
      }
      if (hasRxThroughputKbps()) {
        output.writeInt32(2, getRxThroughputKbps());
      }
      if (hasTxBandwidthKbps()) {
        output.writeInt32(3, getTxBandwidthKbps());
      }
      if (hasRxBandwidthKbps()) {
        output.writeInt32(4, getRxBandwidthKbps());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasTxThroughputKbps()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getTxThroughputKbps());
      }
      if (hasRxThroughputKbps()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getRxThroughputKbps());
      }
      if (hasTxBandwidthKbps()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getTxBandwidthKbps());
      }
      if (hasRxBandwidthKbps()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getRxBandwidthKbps());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCellularTrafficStats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellularTrafficStats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularTrafficStats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellularTrafficStats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularTrafficStats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellularTrafficStats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCellularTrafficStats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellularTrafficStats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellularTrafficStats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellularTrafficStats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCellularTrafficStats prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCellularTrafficStats, Builder> {
      private SneCellularTrafficStats result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCellularTrafficStats.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCellularTrafficStats();
        return builder;
      }
      
      protected SneCellularTrafficStats internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCellularTrafficStats();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCellularTrafficStats getDefaultInstanceForType() {
        return SneCellularTrafficStats.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCellularTrafficStats build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCellularTrafficStats buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCellularTrafficStats buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneCellularTrafficStats returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCellularTrafficStats other) {
        if (other == SneCellularTrafficStats.getDefaultInstance()) return this;
        if (other.hasTxThroughputKbps()) {
          setTxThroughputKbps(other.getTxThroughputKbps());
        }
        if (other.hasRxThroughputKbps()) {
          setRxThroughputKbps(other.getRxThroughputKbps());
        }
        if (other.hasTxBandwidthKbps()) {
          setTxBandwidthKbps(other.getTxBandwidthKbps());
        }
        if (other.hasRxBandwidthKbps()) {
          setRxBandwidthKbps(other.getRxBandwidthKbps());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setTxThroughputKbps(input.readInt32());
              break;
            }
            case 16: {
              setRxThroughputKbps(input.readInt32());
              break;
            }
            case 24: {
              setTxBandwidthKbps(input.readInt32());
              break;
            }
            case 32: {
              setRxBandwidthKbps(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 tx_throughput_kbps = 1;
      public boolean hasTxThroughputKbps() {
        return result.hasTxThroughputKbps();
      }
      public int getTxThroughputKbps() {
        return result.getTxThroughputKbps();
      }
      public Builder setTxThroughputKbps(int value) {
        result.hasTxThroughputKbps = true;
        result.txThroughputKbps_ = value;
        return this;
      }
      public Builder clearTxThroughputKbps() {
        result.hasTxThroughputKbps = false;
        result.txThroughputKbps_ = 0;
        return this;
      }
      
      // optional int32 rx_throughput_kbps = 2;
      public boolean hasRxThroughputKbps() {
        return result.hasRxThroughputKbps();
      }
      public int getRxThroughputKbps() {
        return result.getRxThroughputKbps();
      }
      public Builder setRxThroughputKbps(int value) {
        result.hasRxThroughputKbps = true;
        result.rxThroughputKbps_ = value;
        return this;
      }
      public Builder clearRxThroughputKbps() {
        result.hasRxThroughputKbps = false;
        result.rxThroughputKbps_ = 0;
        return this;
      }
      
      // optional int32 tx_bandwidth_kbps = 3;
      public boolean hasTxBandwidthKbps() {
        return result.hasTxBandwidthKbps();
      }
      public int getTxBandwidthKbps() {
        return result.getTxBandwidthKbps();
      }
      public Builder setTxBandwidthKbps(int value) {
        result.hasTxBandwidthKbps = true;
        result.txBandwidthKbps_ = value;
        return this;
      }
      public Builder clearTxBandwidthKbps() {
        result.hasTxBandwidthKbps = false;
        result.txBandwidthKbps_ = 0;
        return this;
      }
      
      // optional int32 rx_bandwidth_kbps = 4;
      public boolean hasRxBandwidthKbps() {
        return result.hasRxBandwidthKbps();
      }
      public int getRxBandwidthKbps() {
        return result.getRxBandwidthKbps();
      }
      public Builder setRxBandwidthKbps(int value) {
        result.hasRxBandwidthKbps = true;
        result.rxBandwidthKbps_ = value;
        return this;
      }
      public Builder clearRxBandwidthKbps() {
        result.hasRxBandwidthKbps = false;
        result.rxBandwidthKbps_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellularTrafficStats)
    }
    
    static {
      defaultInstance = new SneCellularTrafficStats(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellularTrafficStats)
  }
  
  public static final class SneCellInfo extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellInfo.newBuilder() to construct.
    private SneCellInfo() {
      initFields();
    }
    private SneCellInfo(boolean noInit) {}
    
    private static final SneCellInfo defaultInstance;
    public static SneCellInfo getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellInfo getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional .smartnetworkengine.SneCellInfoLte cell_info_lte = 1;
    public static final int CELL_INFO_LTE_FIELD_NUMBER = 1;
    private boolean hasCellInfoLte;
    private SneCellInfoLte cellInfoLte_;
    public boolean hasCellInfoLte() { return hasCellInfoLte; }
    public SneCellInfoLte getCellInfoLte() { return cellInfoLte_; }
    
    // optional .smartnetworkengine.SneCellInfoNr cell_info_nr = 2;
    public static final int CELL_INFO_NR_FIELD_NUMBER = 2;
    private boolean hasCellInfoNr;
    private SneCellInfoNr cellInfoNr_;
    public boolean hasCellInfoNr() { return hasCellInfoNr; }
    public SneCellInfoNr getCellInfoNr() { return cellInfoNr_; }
    
    private void initFields() {
      cellInfoLte_ = SneCellInfoLte.getDefaultInstance();
      cellInfoNr_ = SneCellInfoNr.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasCellInfoLte()) {
        output.writeMessage(1, getCellInfoLte());
      }
      if (hasCellInfoNr()) {
        output.writeMessage(2, getCellInfoNr());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasCellInfoLte()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCellInfoLte());
      }
      if (hasCellInfoNr()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCellInfoNr());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCellInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCellInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCellInfo, Builder> {
      private SneCellInfo result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCellInfo.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCellInfo();
        return builder;
      }
      
      protected SneCellInfo internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCellInfo();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCellInfo getDefaultInstanceForType() {
        return SneCellInfo.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCellInfo build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCellInfo buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCellInfo buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneCellInfo returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCellInfo other) {
        if (other == SneCellInfo.getDefaultInstance()) return this;
        if (other.hasCellInfoLte()) {
          mergeCellInfoLte(other.getCellInfoLte());
        }
        if (other.hasCellInfoNr()) {
          mergeCellInfoNr(other.getCellInfoNr());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              SneCellInfoLte.Builder subBuilder = SneCellInfoLte.newBuilder();
              if (hasCellInfoLte()) {
                subBuilder.mergeFrom(getCellInfoLte());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCellInfoLte(subBuilder.buildPartial());
              break;
            }
            case 18: {
              SneCellInfoNr.Builder subBuilder = SneCellInfoNr.newBuilder();
              if (hasCellInfoNr()) {
                subBuilder.mergeFrom(getCellInfoNr());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCellInfoNr(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .smartnetworkengine.SneCellInfoLte cell_info_lte = 1;
      public boolean hasCellInfoLte() {
        return result.hasCellInfoLte();
      }
      public SneCellInfoLte getCellInfoLte() {
        return result.getCellInfoLte();
      }
      public Builder setCellInfoLte(SneCellInfoLte value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCellInfoLte = true;
        result.cellInfoLte_ = value;
        return this;
      }
      public Builder setCellInfoLte(SneCellInfoLte.Builder builderForValue) {
        result.hasCellInfoLte = true;
        result.cellInfoLte_ = builderForValue.build();
        return this;
      }
      public Builder mergeCellInfoLte(SneCellInfoLte value) {
        if (result.hasCellInfoLte() &&
            result.cellInfoLte_ != SneCellInfoLte.getDefaultInstance()) {
          result.cellInfoLte_ =
            SneCellInfoLte.newBuilder(result.cellInfoLte_).mergeFrom(value).buildPartial();
        } else {
          result.cellInfoLte_ = value;
        }
        result.hasCellInfoLte = true;
        return this;
      }
      public Builder clearCellInfoLte() {
        result.hasCellInfoLte = false;
        result.cellInfoLte_ = SneCellInfoLte.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneCellInfoNr cell_info_nr = 2;
      public boolean hasCellInfoNr() {
        return result.hasCellInfoNr();
      }
      public SneCellInfoNr getCellInfoNr() {
        return result.getCellInfoNr();
      }
      public Builder setCellInfoNr(SneCellInfoNr value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCellInfoNr = true;
        result.cellInfoNr_ = value;
        return this;
      }
      public Builder setCellInfoNr(SneCellInfoNr.Builder builderForValue) {
        result.hasCellInfoNr = true;
        result.cellInfoNr_ = builderForValue.build();
        return this;
      }
      public Builder mergeCellInfoNr(SneCellInfoNr value) {
        if (result.hasCellInfoNr() &&
            result.cellInfoNr_ != SneCellInfoNr.getDefaultInstance()) {
          result.cellInfoNr_ =
            SneCellInfoNr.newBuilder(result.cellInfoNr_).mergeFrom(value).buildPartial();
        } else {
          result.cellInfoNr_ = value;
        }
        result.hasCellInfoNr = true;
        return this;
      }
      public Builder clearCellInfoNr() {
        result.hasCellInfoNr = false;
        result.cellInfoNr_ = SneCellInfoNr.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellInfo)
    }
    
    static {
      defaultInstance = new SneCellInfo(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellInfo)
  }
  
  public static final class SneCellInfoLte extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellInfoLte.newBuilder() to construct.
    private SneCellInfoLte() {
      initFields();
    }
    private SneCellInfoLte(boolean noInit) {}
    
    private static final SneCellInfoLte defaultInstance;
    public static SneCellInfoLte getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellInfoLte getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional .smartnetworkengine.SneSignalStrengthLte signal_strength_lte = 1;
    public static final int SIGNAL_STRENGTH_LTE_FIELD_NUMBER = 1;
    private boolean hasSignalStrengthLte;
    private SneSignalStrengthLte signalStrengthLte_;
    public boolean hasSignalStrengthLte() { return hasSignalStrengthLte; }
    public SneSignalStrengthLte getSignalStrengthLte() { return signalStrengthLte_; }
    
    // optional .smartnetworkengine.SneCellIdentityLte cell_identity_lte = 2;
    public static final int CELL_IDENTITY_LTE_FIELD_NUMBER = 2;
    private boolean hasCellIdentityLte;
    private SneCellIdentityLte cellIdentityLte_;
    public boolean hasCellIdentityLte() { return hasCellIdentityLte; }
    public SneCellIdentityLte getCellIdentityLte() { return cellIdentityLte_; }
    
    // optional bool carrier_aggregation = 3;
    public static final int CARRIER_AGGREGATION_FIELD_NUMBER = 3;
    private boolean hasCarrierAggregation;
    private boolean carrierAggregation_ = false;
    public boolean hasCarrierAggregation() { return hasCarrierAggregation; }
    public boolean getCarrierAggregation() { return carrierAggregation_; }
    
    private void initFields() {
      signalStrengthLte_ = SneSignalStrengthLte.getDefaultInstance();
      cellIdentityLte_ = SneCellIdentityLte.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSignalStrengthLte()) {
        output.writeMessage(1, getSignalStrengthLte());
      }
      if (hasCellIdentityLte()) {
        output.writeMessage(2, getCellIdentityLte());
      }
      if (hasCarrierAggregation()) {
        output.writeBool(3, getCarrierAggregation());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSignalStrengthLte()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSignalStrengthLte());
      }
      if (hasCellIdentityLte()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCellIdentityLte());
      }
      if (hasCarrierAggregation()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, getCarrierAggregation());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCellInfoLte parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellInfoLte parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfoLte parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellInfoLte parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfoLte parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellInfoLte parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfoLte parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellInfoLte parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellInfoLte parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellInfoLte parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCellInfoLte prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCellInfoLte, Builder> {
      private SneCellInfoLte result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCellInfoLte.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCellInfoLte();
        return builder;
      }
      
      protected SneCellInfoLte internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCellInfoLte();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCellInfoLte getDefaultInstanceForType() {
        return SneCellInfoLte.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCellInfoLte build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCellInfoLte buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCellInfoLte buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneCellInfoLte returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCellInfoLte other) {
        if (other == SneCellInfoLte.getDefaultInstance()) return this;
        if (other.hasSignalStrengthLte()) {
          mergeSignalStrengthLte(other.getSignalStrengthLte());
        }
        if (other.hasCellIdentityLte()) {
          mergeCellIdentityLte(other.getCellIdentityLte());
        }
        if (other.hasCarrierAggregation()) {
          setCarrierAggregation(other.getCarrierAggregation());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              SneSignalStrengthLte.Builder subBuilder = SneSignalStrengthLte.newBuilder();
              if (hasSignalStrengthLte()) {
                subBuilder.mergeFrom(getSignalStrengthLte());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSignalStrengthLte(subBuilder.buildPartial());
              break;
            }
            case 18: {
              SneCellIdentityLte.Builder subBuilder = SneCellIdentityLte.newBuilder();
              if (hasCellIdentityLte()) {
                subBuilder.mergeFrom(getCellIdentityLte());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCellIdentityLte(subBuilder.buildPartial());
              break;
            }
            case 24: {
              setCarrierAggregation(input.readBool());
              break;
            }
          }
        }
      }
      
      
      // optional .smartnetworkengine.SneSignalStrengthLte signal_strength_lte = 1;
      public boolean hasSignalStrengthLte() {
        return result.hasSignalStrengthLte();
      }
      public SneSignalStrengthLte getSignalStrengthLte() {
        return result.getSignalStrengthLte();
      }
      public Builder setSignalStrengthLte(SneSignalStrengthLte value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSignalStrengthLte = true;
        result.signalStrengthLte_ = value;
        return this;
      }
      public Builder setSignalStrengthLte(SneSignalStrengthLte.Builder builderForValue) {
        result.hasSignalStrengthLte = true;
        result.signalStrengthLte_ = builderForValue.build();
        return this;
      }
      public Builder mergeSignalStrengthLte(SneSignalStrengthLte value) {
        if (result.hasSignalStrengthLte() &&
            result.signalStrengthLte_ != SneSignalStrengthLte.getDefaultInstance()) {
          result.signalStrengthLte_ =
            SneSignalStrengthLte.newBuilder(result.signalStrengthLte_).mergeFrom(value).buildPartial();
        } else {
          result.signalStrengthLte_ = value;
        }
        result.hasSignalStrengthLte = true;
        return this;
      }
      public Builder clearSignalStrengthLte() {
        result.hasSignalStrengthLte = false;
        result.signalStrengthLte_ = SneSignalStrengthLte.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneCellIdentityLte cell_identity_lte = 2;
      public boolean hasCellIdentityLte() {
        return result.hasCellIdentityLte();
      }
      public SneCellIdentityLte getCellIdentityLte() {
        return result.getCellIdentityLte();
      }
      public Builder setCellIdentityLte(SneCellIdentityLte value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCellIdentityLte = true;
        result.cellIdentityLte_ = value;
        return this;
      }
      public Builder setCellIdentityLte(SneCellIdentityLte.Builder builderForValue) {
        result.hasCellIdentityLte = true;
        result.cellIdentityLte_ = builderForValue.build();
        return this;
      }
      public Builder mergeCellIdentityLte(SneCellIdentityLte value) {
        if (result.hasCellIdentityLte() &&
            result.cellIdentityLte_ != SneCellIdentityLte.getDefaultInstance()) {
          result.cellIdentityLte_ =
            SneCellIdentityLte.newBuilder(result.cellIdentityLte_).mergeFrom(value).buildPartial();
        } else {
          result.cellIdentityLte_ = value;
        }
        result.hasCellIdentityLte = true;
        return this;
      }
      public Builder clearCellIdentityLte() {
        result.hasCellIdentityLte = false;
        result.cellIdentityLte_ = SneCellIdentityLte.getDefaultInstance();
        return this;
      }
      
      // optional bool carrier_aggregation = 3;
      public boolean hasCarrierAggregation() {
        return result.hasCarrierAggregation();
      }
      public boolean getCarrierAggregation() {
        return result.getCarrierAggregation();
      }
      public Builder setCarrierAggregation(boolean value) {
        result.hasCarrierAggregation = true;
        result.carrierAggregation_ = value;
        return this;
      }
      public Builder clearCarrierAggregation() {
        result.hasCarrierAggregation = false;
        result.carrierAggregation_ = false;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellInfoLte)
    }
    
    static {
      defaultInstance = new SneCellInfoLte(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellInfoLte)
  }
  
  public static final class SneSignalStrengthLte extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneSignalStrengthLte.newBuilder() to construct.
    private SneSignalStrengthLte() {
      initFields();
    }
    private SneSignalStrengthLte(boolean noInit) {}
    
    private static final SneSignalStrengthLte defaultInstance;
    public static SneSignalStrengthLte getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneSignalStrengthLte getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int32 asu_level = 1;
    public static final int ASU_LEVEL_FIELD_NUMBER = 1;
    private boolean hasAsuLevel;
    private int asuLevel_ = 0;
    public boolean hasAsuLevel() { return hasAsuLevel; }
    public int getAsuLevel() { return asuLevel_; }
    
    // optional int32 cqi = 2;
    public static final int CQI_FIELD_NUMBER = 2;
    private boolean hasCqi;
    private int cqi_ = 0;
    public boolean hasCqi() { return hasCqi; }
    public int getCqi() { return cqi_; }
    
    // optional int32 dbm = 3;
    public static final int DBM_FIELD_NUMBER = 3;
    private boolean hasDbm;
    private int dbm_ = 0;
    public boolean hasDbm() { return hasDbm; }
    public int getDbm() { return dbm_; }
    
    // optional int32 level = 4;
    public static final int LEVEL_FIELD_NUMBER = 4;
    private boolean hasLevel;
    private int level_ = 0;
    public boolean hasLevel() { return hasLevel; }
    public int getLevel() { return level_; }
    
    // optional int32 rsrp = 5;
    public static final int RSRP_FIELD_NUMBER = 5;
    private boolean hasRsrp;
    private int rsrp_ = 0;
    public boolean hasRsrp() { return hasRsrp; }
    public int getRsrp() { return rsrp_; }
    
    // optional int32 rsrq = 6;
    public static final int RSRQ_FIELD_NUMBER = 6;
    private boolean hasRsrq;
    private int rsrq_ = 0;
    public boolean hasRsrq() { return hasRsrq; }
    public int getRsrq() { return rsrq_; }
    
    // optional int32 rssi = 7;
    public static final int RSSI_FIELD_NUMBER = 7;
    private boolean hasRssi;
    private int rssi_ = 0;
    public boolean hasRssi() { return hasRssi; }
    public int getRssi() { return rssi_; }
    
    // optional int32 rssnr = 8;
    public static final int RSSNR_FIELD_NUMBER = 8;
    private boolean hasRssnr;
    private int rssnr_ = 0;
    public boolean hasRssnr() { return hasRssnr; }
    public int getRssnr() { return rssnr_; }
    
    // optional int32 timing_advance = 9;
    public static final int TIMING_ADVANCE_FIELD_NUMBER = 9;
    private boolean hasTimingAdvance;
    private int timingAdvance_ = 0;
    public boolean hasTimingAdvance() { return hasTimingAdvance; }
    public int getTimingAdvance() { return timingAdvance_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAsuLevel()) {
        output.writeInt32(1, getAsuLevel());
      }
      if (hasCqi()) {
        output.writeInt32(2, getCqi());
      }
      if (hasDbm()) {
        output.writeInt32(3, getDbm());
      }
      if (hasLevel()) {
        output.writeInt32(4, getLevel());
      }
      if (hasRsrp()) {
        output.writeInt32(5, getRsrp());
      }
      if (hasRsrq()) {
        output.writeInt32(6, getRsrq());
      }
      if (hasRssi()) {
        output.writeInt32(7, getRssi());
      }
      if (hasRssnr()) {
        output.writeInt32(8, getRssnr());
      }
      if (hasTimingAdvance()) {
        output.writeInt32(9, getTimingAdvance());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAsuLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getAsuLevel());
      }
      if (hasCqi()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCqi());
      }
      if (hasDbm()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getDbm());
      }
      if (hasLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getLevel());
      }
      if (hasRsrp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getRsrp());
      }
      if (hasRsrq()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getRsrq());
      }
      if (hasRssi()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getRssi());
      }
      if (hasRssnr()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getRssnr());
      }
      if (hasTimingAdvance()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, getTimingAdvance());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneSignalStrengthLte parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneSignalStrengthLte parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneSignalStrengthLte parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneSignalStrengthLte parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneSignalStrengthLte parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneSignalStrengthLte parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneSignalStrengthLte parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneSignalStrengthLte parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneSignalStrengthLte parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneSignalStrengthLte parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneSignalStrengthLte prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneSignalStrengthLte, Builder> {
      private SneSignalStrengthLte result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneSignalStrengthLte.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneSignalStrengthLte();
        return builder;
      }
      
      protected SneSignalStrengthLte internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneSignalStrengthLte();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneSignalStrengthLte getDefaultInstanceForType() {
        return SneSignalStrengthLte.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneSignalStrengthLte build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneSignalStrengthLte buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneSignalStrengthLte buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneSignalStrengthLte returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneSignalStrengthLte other) {
        if (other == SneSignalStrengthLte.getDefaultInstance()) return this;
        if (other.hasAsuLevel()) {
          setAsuLevel(other.getAsuLevel());
        }
        if (other.hasCqi()) {
          setCqi(other.getCqi());
        }
        if (other.hasDbm()) {
          setDbm(other.getDbm());
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (other.hasRsrp()) {
          setRsrp(other.getRsrp());
        }
        if (other.hasRsrq()) {
          setRsrq(other.getRsrq());
        }
        if (other.hasRssi()) {
          setRssi(other.getRssi());
        }
        if (other.hasRssnr()) {
          setRssnr(other.getRssnr());
        }
        if (other.hasTimingAdvance()) {
          setTimingAdvance(other.getTimingAdvance());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setAsuLevel(input.readInt32());
              break;
            }
            case 16: {
              setCqi(input.readInt32());
              break;
            }
            case 24: {
              setDbm(input.readInt32());
              break;
            }
            case 32: {
              setLevel(input.readInt32());
              break;
            }
            case 40: {
              setRsrp(input.readInt32());
              break;
            }
            case 48: {
              setRsrq(input.readInt32());
              break;
            }
            case 56: {
              setRssi(input.readInt32());
              break;
            }
            case 64: {
              setRssnr(input.readInt32());
              break;
            }
            case 72: {
              setTimingAdvance(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 asu_level = 1;
      public boolean hasAsuLevel() {
        return result.hasAsuLevel();
      }
      public int getAsuLevel() {
        return result.getAsuLevel();
      }
      public Builder setAsuLevel(int value) {
        result.hasAsuLevel = true;
        result.asuLevel_ = value;
        return this;
      }
      public Builder clearAsuLevel() {
        result.hasAsuLevel = false;
        result.asuLevel_ = 0;
        return this;
      }
      
      // optional int32 cqi = 2;
      public boolean hasCqi() {
        return result.hasCqi();
      }
      public int getCqi() {
        return result.getCqi();
      }
      public Builder setCqi(int value) {
        result.hasCqi = true;
        result.cqi_ = value;
        return this;
      }
      public Builder clearCqi() {
        result.hasCqi = false;
        result.cqi_ = 0;
        return this;
      }
      
      // optional int32 dbm = 3;
      public boolean hasDbm() {
        return result.hasDbm();
      }
      public int getDbm() {
        return result.getDbm();
      }
      public Builder setDbm(int value) {
        result.hasDbm = true;
        result.dbm_ = value;
        return this;
      }
      public Builder clearDbm() {
        result.hasDbm = false;
        result.dbm_ = 0;
        return this;
      }
      
      // optional int32 level = 4;
      public boolean hasLevel() {
        return result.hasLevel();
      }
      public int getLevel() {
        return result.getLevel();
      }
      public Builder setLevel(int value) {
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder clearLevel() {
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      // optional int32 rsrp = 5;
      public boolean hasRsrp() {
        return result.hasRsrp();
      }
      public int getRsrp() {
        return result.getRsrp();
      }
      public Builder setRsrp(int value) {
        result.hasRsrp = true;
        result.rsrp_ = value;
        return this;
      }
      public Builder clearRsrp() {
        result.hasRsrp = false;
        result.rsrp_ = 0;
        return this;
      }
      
      // optional int32 rsrq = 6;
      public boolean hasRsrq() {
        return result.hasRsrq();
      }
      public int getRsrq() {
        return result.getRsrq();
      }
      public Builder setRsrq(int value) {
        result.hasRsrq = true;
        result.rsrq_ = value;
        return this;
      }
      public Builder clearRsrq() {
        result.hasRsrq = false;
        result.rsrq_ = 0;
        return this;
      }
      
      // optional int32 rssi = 7;
      public boolean hasRssi() {
        return result.hasRssi();
      }
      public int getRssi() {
        return result.getRssi();
      }
      public Builder setRssi(int value) {
        result.hasRssi = true;
        result.rssi_ = value;
        return this;
      }
      public Builder clearRssi() {
        result.hasRssi = false;
        result.rssi_ = 0;
        return this;
      }
      
      // optional int32 rssnr = 8;
      public boolean hasRssnr() {
        return result.hasRssnr();
      }
      public int getRssnr() {
        return result.getRssnr();
      }
      public Builder setRssnr(int value) {
        result.hasRssnr = true;
        result.rssnr_ = value;
        return this;
      }
      public Builder clearRssnr() {
        result.hasRssnr = false;
        result.rssnr_ = 0;
        return this;
      }
      
      // optional int32 timing_advance = 9;
      public boolean hasTimingAdvance() {
        return result.hasTimingAdvance();
      }
      public int getTimingAdvance() {
        return result.getTimingAdvance();
      }
      public Builder setTimingAdvance(int value) {
        result.hasTimingAdvance = true;
        result.timingAdvance_ = value;
        return this;
      }
      public Builder clearTimingAdvance() {
        result.hasTimingAdvance = false;
        result.timingAdvance_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneSignalStrengthLte)
    }
    
    static {
      defaultInstance = new SneSignalStrengthLte(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneSignalStrengthLte)
  }
  
  public static final class SneCellIdentityLte extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellIdentityLte.newBuilder() to construct.
    private SneCellIdentityLte() {
      initFields();
    }
    private SneCellIdentityLte(boolean noInit) {}
    
    private static final SneCellIdentityLte defaultInstance;
    public static SneCellIdentityLte getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellIdentityLte getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int32 bandwidth = 1;
    public static final int BANDWIDTH_FIELD_NUMBER = 1;
    private boolean hasBandwidth;
    private int bandwidth_ = 0;
    public boolean hasBandwidth() { return hasBandwidth; }
    public int getBandwidth() { return bandwidth_; }
    
    // optional int32 ci = 2;
    public static final int CI_FIELD_NUMBER = 2;
    private boolean hasCi;
    private int ci_ = 0;
    public boolean hasCi() { return hasCi; }
    public int getCi() { return ci_; }
    
    // optional int32 earfcn = 3;
    public static final int EARFCN_FIELD_NUMBER = 3;
    private boolean hasEarfcn;
    private int earfcn_ = 0;
    public boolean hasEarfcn() { return hasEarfcn; }
    public int getEarfcn() { return earfcn_; }
    
    // optional string mcc_string = 4;
    public static final int MCC_STRING_FIELD_NUMBER = 4;
    private boolean hasMccString;
    private String mccString_ = "";
    public boolean hasMccString() { return hasMccString; }
    public String getMccString() { return mccString_; }
    
    // optional string mnc_string = 5;
    public static final int MNC_STRING_FIELD_NUMBER = 5;
    private boolean hasMncString;
    private String mncString_ = "";
    public boolean hasMncString() { return hasMncString; }
    public String getMncString() { return mncString_; }
    
    // optional string operator = 6;
    public static final int OPERATOR_FIELD_NUMBER = 6;
    private boolean hasOperator;
    private String operator_ = "";
    public boolean hasOperator() { return hasOperator; }
    public String getOperator() { return operator_; }
    
    // optional int32 pci = 7;
    public static final int PCI_FIELD_NUMBER = 7;
    private boolean hasPci;
    private int pci_ = 0;
    public boolean hasPci() { return hasPci; }
    public int getPci() { return pci_; }
    
    // optional int32 tac = 8;
    public static final int TAC_FIELD_NUMBER = 8;
    private boolean hasTac;
    private int tac_ = 0;
    public boolean hasTac() { return hasTac; }
    public int getTac() { return tac_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasBandwidth()) {
        output.writeInt32(1, getBandwidth());
      }
      if (hasCi()) {
        output.writeInt32(2, getCi());
      }
      if (hasEarfcn()) {
        output.writeInt32(3, getEarfcn());
      }
      if (hasMccString()) {
        output.writeString(4, getMccString());
      }
      if (hasMncString()) {
        output.writeString(5, getMncString());
      }
      if (hasOperator()) {
        output.writeString(6, getOperator());
      }
      if (hasPci()) {
        output.writeInt32(7, getPci());
      }
      if (hasTac()) {
        output.writeInt32(8, getTac());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasBandwidth()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getBandwidth());
      }
      if (hasCi()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCi());
      }
      if (hasEarfcn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getEarfcn());
      }
      if (hasMccString()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(4, getMccString());
      }
      if (hasMncString()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(5, getMncString());
      }
      if (hasOperator()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getOperator());
      }
      if (hasPci()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getPci());
      }
      if (hasTac()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getTac());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCellIdentityLte parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellIdentityLte parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellIdentityLte parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellIdentityLte parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellIdentityLte parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellIdentityLte parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCellIdentityLte parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellIdentityLte parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellIdentityLte parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellIdentityLte parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCellIdentityLte prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCellIdentityLte, Builder> {
      private SneCellIdentityLte result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCellIdentityLte.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCellIdentityLte();
        return builder;
      }
      
      protected SneCellIdentityLte internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCellIdentityLte();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCellIdentityLte getDefaultInstanceForType() {
        return SneCellIdentityLte.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCellIdentityLte build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCellIdentityLte buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCellIdentityLte buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneCellIdentityLte returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCellIdentityLte other) {
        if (other == SneCellIdentityLte.getDefaultInstance()) return this;
        if (other.hasBandwidth()) {
          setBandwidth(other.getBandwidth());
        }
        if (other.hasCi()) {
          setCi(other.getCi());
        }
        if (other.hasEarfcn()) {
          setEarfcn(other.getEarfcn());
        }
        if (other.hasMccString()) {
          setMccString(other.getMccString());
        }
        if (other.hasMncString()) {
          setMncString(other.getMncString());
        }
        if (other.hasOperator()) {
          setOperator(other.getOperator());
        }
        if (other.hasPci()) {
          setPci(other.getPci());
        }
        if (other.hasTac()) {
          setTac(other.getTac());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setBandwidth(input.readInt32());
              break;
            }
            case 16: {
              setCi(input.readInt32());
              break;
            }
            case 24: {
              setEarfcn(input.readInt32());
              break;
            }
            case 34: {
              setMccString(input.readString());
              break;
            }
            case 42: {
              setMncString(input.readString());
              break;
            }
            case 50: {
              setOperator(input.readString());
              break;
            }
            case 56: {
              setPci(input.readInt32());
              break;
            }
            case 64: {
              setTac(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 bandwidth = 1;
      public boolean hasBandwidth() {
        return result.hasBandwidth();
      }
      public int getBandwidth() {
        return result.getBandwidth();
      }
      public Builder setBandwidth(int value) {
        result.hasBandwidth = true;
        result.bandwidth_ = value;
        return this;
      }
      public Builder clearBandwidth() {
        result.hasBandwidth = false;
        result.bandwidth_ = 0;
        return this;
      }
      
      // optional int32 ci = 2;
      public boolean hasCi() {
        return result.hasCi();
      }
      public int getCi() {
        return result.getCi();
      }
      public Builder setCi(int value) {
        result.hasCi = true;
        result.ci_ = value;
        return this;
      }
      public Builder clearCi() {
        result.hasCi = false;
        result.ci_ = 0;
        return this;
      }
      
      // optional int32 earfcn = 3;
      public boolean hasEarfcn() {
        return result.hasEarfcn();
      }
      public int getEarfcn() {
        return result.getEarfcn();
      }
      public Builder setEarfcn(int value) {
        result.hasEarfcn = true;
        result.earfcn_ = value;
        return this;
      }
      public Builder clearEarfcn() {
        result.hasEarfcn = false;
        result.earfcn_ = 0;
        return this;
      }
      
      // optional string mcc_string = 4;
      public boolean hasMccString() {
        return result.hasMccString();
      }
      public String getMccString() {
        return result.getMccString();
      }
      public Builder setMccString(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasMccString = true;
        result.mccString_ = value;
        return this;
      }
      public Builder clearMccString() {
        result.hasMccString = false;
        result.mccString_ = getDefaultInstance().getMccString();
        return this;
      }
      
      // optional string mnc_string = 5;
      public boolean hasMncString() {
        return result.hasMncString();
      }
      public String getMncString() {
        return result.getMncString();
      }
      public Builder setMncString(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasMncString = true;
        result.mncString_ = value;
        return this;
      }
      public Builder clearMncString() {
        result.hasMncString = false;
        result.mncString_ = getDefaultInstance().getMncString();
        return this;
      }
      
      // optional string operator = 6;
      public boolean hasOperator() {
        return result.hasOperator();
      }
      public String getOperator() {
        return result.getOperator();
      }
      public Builder setOperator(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasOperator = true;
        result.operator_ = value;
        return this;
      }
      public Builder clearOperator() {
        result.hasOperator = false;
        result.operator_ = getDefaultInstance().getOperator();
        return this;
      }
      
      // optional int32 pci = 7;
      public boolean hasPci() {
        return result.hasPci();
      }
      public int getPci() {
        return result.getPci();
      }
      public Builder setPci(int value) {
        result.hasPci = true;
        result.pci_ = value;
        return this;
      }
      public Builder clearPci() {
        result.hasPci = false;
        result.pci_ = 0;
        return this;
      }
      
      // optional int32 tac = 8;
      public boolean hasTac() {
        return result.hasTac();
      }
      public int getTac() {
        return result.getTac();
      }
      public Builder setTac(int value) {
        result.hasTac = true;
        result.tac_ = value;
        return this;
      }
      public Builder clearTac() {
        result.hasTac = false;
        result.tac_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellIdentityLte)
    }
    
    static {
      defaultInstance = new SneCellIdentityLte(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellIdentityLte)
  }
  
  public static final class SneCellInfoNr extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellInfoNr.newBuilder() to construct.
    private SneCellInfoNr() {
      initFields();
    }
    private SneCellInfoNr(boolean noInit) {}
    
    private static final SneCellInfoNr defaultInstance;
    public static SneCellInfoNr getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellInfoNr getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional .smartnetworkengine.SneSignalStrengthNr signal_strength_nr = 1;
    public static final int SIGNAL_STRENGTH_NR_FIELD_NUMBER = 1;
    private boolean hasSignalStrengthNr;
    private SneSignalStrengthNr signalStrengthNr_;
    public boolean hasSignalStrengthNr() { return hasSignalStrengthNr; }
    public SneSignalStrengthNr getSignalStrengthNr() { return signalStrengthNr_; }
    
    // optional .smartnetworkengine.SneCellIdentityNr cell_identity_nr = 2;
    public static final int CELL_IDENTITY_NR_FIELD_NUMBER = 2;
    private boolean hasCellIdentityNr;
    private SneCellIdentityNr cellIdentityNr_;
    public boolean hasCellIdentityNr() { return hasCellIdentityNr; }
    public SneCellIdentityNr getCellIdentityNr() { return cellIdentityNr_; }
    
    private void initFields() {
      signalStrengthNr_ = SneSignalStrengthNr.getDefaultInstance();
      cellIdentityNr_ = SneCellIdentityNr.getDefaultInstance();
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasSignalStrengthNr()) {
        output.writeMessage(1, getSignalStrengthNr());
      }
      if (hasCellIdentityNr()) {
        output.writeMessage(2, getCellIdentityNr());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasSignalStrengthNr()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSignalStrengthNr());
      }
      if (hasCellIdentityNr()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getCellIdentityNr());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCellInfoNr parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellInfoNr parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfoNr parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellInfoNr parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfoNr parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellInfoNr parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCellInfoNr parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellInfoNr parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellInfoNr parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellInfoNr parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCellInfoNr prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCellInfoNr, Builder> {
      private SneCellInfoNr result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCellInfoNr.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCellInfoNr();
        return builder;
      }
      
      protected SneCellInfoNr internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCellInfoNr();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCellInfoNr getDefaultInstanceForType() {
        return SneCellInfoNr.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCellInfoNr build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCellInfoNr buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCellInfoNr buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneCellInfoNr returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCellInfoNr other) {
        if (other == SneCellInfoNr.getDefaultInstance()) return this;
        if (other.hasSignalStrengthNr()) {
          mergeSignalStrengthNr(other.getSignalStrengthNr());
        }
        if (other.hasCellIdentityNr()) {
          mergeCellIdentityNr(other.getCellIdentityNr());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              SneSignalStrengthNr.Builder subBuilder = SneSignalStrengthNr.newBuilder();
              if (hasSignalStrengthNr()) {
                subBuilder.mergeFrom(getSignalStrengthNr());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setSignalStrengthNr(subBuilder.buildPartial());
              break;
            }
            case 18: {
              SneCellIdentityNr.Builder subBuilder = SneCellIdentityNr.newBuilder();
              if (hasCellIdentityNr()) {
                subBuilder.mergeFrom(getCellIdentityNr());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setCellIdentityNr(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
      
      
      // optional .smartnetworkengine.SneSignalStrengthNr signal_strength_nr = 1;
      public boolean hasSignalStrengthNr() {
        return result.hasSignalStrengthNr();
      }
      public SneSignalStrengthNr getSignalStrengthNr() {
        return result.getSignalStrengthNr();
      }
      public Builder setSignalStrengthNr(SneSignalStrengthNr value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasSignalStrengthNr = true;
        result.signalStrengthNr_ = value;
        return this;
      }
      public Builder setSignalStrengthNr(SneSignalStrengthNr.Builder builderForValue) {
        result.hasSignalStrengthNr = true;
        result.signalStrengthNr_ = builderForValue.build();
        return this;
      }
      public Builder mergeSignalStrengthNr(SneSignalStrengthNr value) {
        if (result.hasSignalStrengthNr() &&
            result.signalStrengthNr_ != SneSignalStrengthNr.getDefaultInstance()) {
          result.signalStrengthNr_ =
            SneSignalStrengthNr.newBuilder(result.signalStrengthNr_).mergeFrom(value).buildPartial();
        } else {
          result.signalStrengthNr_ = value;
        }
        result.hasSignalStrengthNr = true;
        return this;
      }
      public Builder clearSignalStrengthNr() {
        result.hasSignalStrengthNr = false;
        result.signalStrengthNr_ = SneSignalStrengthNr.getDefaultInstance();
        return this;
      }
      
      // optional .smartnetworkengine.SneCellIdentityNr cell_identity_nr = 2;
      public boolean hasCellIdentityNr() {
        return result.hasCellIdentityNr();
      }
      public SneCellIdentityNr getCellIdentityNr() {
        return result.getCellIdentityNr();
      }
      public Builder setCellIdentityNr(SneCellIdentityNr value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasCellIdentityNr = true;
        result.cellIdentityNr_ = value;
        return this;
      }
      public Builder setCellIdentityNr(SneCellIdentityNr.Builder builderForValue) {
        result.hasCellIdentityNr = true;
        result.cellIdentityNr_ = builderForValue.build();
        return this;
      }
      public Builder mergeCellIdentityNr(SneCellIdentityNr value) {
        if (result.hasCellIdentityNr() &&
            result.cellIdentityNr_ != SneCellIdentityNr.getDefaultInstance()) {
          result.cellIdentityNr_ =
            SneCellIdentityNr.newBuilder(result.cellIdentityNr_).mergeFrom(value).buildPartial();
        } else {
          result.cellIdentityNr_ = value;
        }
        result.hasCellIdentityNr = true;
        return this;
      }
      public Builder clearCellIdentityNr() {
        result.hasCellIdentityNr = false;
        result.cellIdentityNr_ = SneCellIdentityNr.getDefaultInstance();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellInfoNr)
    }
    
    static {
      defaultInstance = new SneCellInfoNr(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellInfoNr)
  }
  
  public static final class SneSignalStrengthNr extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneSignalStrengthNr.newBuilder() to construct.
    private SneSignalStrengthNr() {
      initFields();
    }
    private SneSignalStrengthNr(boolean noInit) {}
    
    private static final SneSignalStrengthNr defaultInstance;
    public static SneSignalStrengthNr getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneSignalStrengthNr getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional int32 asu_level = 1;
    public static final int ASU_LEVEL_FIELD_NUMBER = 1;
    private boolean hasAsuLevel;
    private int asuLevel_ = 0;
    public boolean hasAsuLevel() { return hasAsuLevel; }
    public int getAsuLevel() { return asuLevel_; }
    
    // optional int32 csi_rsrp = 2;
    public static final int CSI_RSRP_FIELD_NUMBER = 2;
    private boolean hasCsiRsrp;
    private int csiRsrp_ = 0;
    public boolean hasCsiRsrp() { return hasCsiRsrp; }
    public int getCsiRsrp() { return csiRsrp_; }
    
    // optional int32 csi_rsrq = 3;
    public static final int CSI_RSRQ_FIELD_NUMBER = 3;
    private boolean hasCsiRsrq;
    private int csiRsrq_ = 0;
    public boolean hasCsiRsrq() { return hasCsiRsrq; }
    public int getCsiRsrq() { return csiRsrq_; }
    
    // optional int32 csi_sinr = 4;
    public static final int CSI_SINR_FIELD_NUMBER = 4;
    private boolean hasCsiSinr;
    private int csiSinr_ = 0;
    public boolean hasCsiSinr() { return hasCsiSinr; }
    public int getCsiSinr() { return csiSinr_; }
    
    // optional int32 level = 5;
    public static final int LEVEL_FIELD_NUMBER = 5;
    private boolean hasLevel;
    private int level_ = 0;
    public boolean hasLevel() { return hasLevel; }
    public int getLevel() { return level_; }
    
    // optional int32 ss_rsrp = 6;
    public static final int SS_RSRP_FIELD_NUMBER = 6;
    private boolean hasSsRsrp;
    private int ssRsrp_ = 0;
    public boolean hasSsRsrp() { return hasSsRsrp; }
    public int getSsRsrp() { return ssRsrp_; }
    
    // optional int32 ss_rsrq = 7;
    public static final int SS_RSRQ_FIELD_NUMBER = 7;
    private boolean hasSsRsrq;
    private int ssRsrq_ = 0;
    public boolean hasSsRsrq() { return hasSsRsrq; }
    public int getSsRsrq() { return ssRsrq_; }
    
    // optional int32 ss_sinr = 8;
    public static final int SS_SINR_FIELD_NUMBER = 8;
    private boolean hasSsSinr;
    private int ssSinr_ = 0;
    public boolean hasSsSinr() { return hasSsSinr; }
    public int getSsSinr() { return ssSinr_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasAsuLevel()) {
        output.writeInt32(1, getAsuLevel());
      }
      if (hasCsiRsrp()) {
        output.writeInt32(2, getCsiRsrp());
      }
      if (hasCsiRsrq()) {
        output.writeInt32(3, getCsiRsrq());
      }
      if (hasCsiSinr()) {
        output.writeInt32(4, getCsiSinr());
      }
      if (hasLevel()) {
        output.writeInt32(5, getLevel());
      }
      if (hasSsRsrp()) {
        output.writeInt32(6, getSsRsrp());
      }
      if (hasSsRsrq()) {
        output.writeInt32(7, getSsRsrq());
      }
      if (hasSsSinr()) {
        output.writeInt32(8, getSsSinr());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasAsuLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, getAsuLevel());
      }
      if (hasCsiRsrp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getCsiRsrp());
      }
      if (hasCsiRsrq()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, getCsiRsrq());
      }
      if (hasCsiSinr()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getCsiSinr());
      }
      if (hasLevel()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getLevel());
      }
      if (hasSsRsrp()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getSsRsrp());
      }
      if (hasSsRsrq()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, getSsRsrq());
      }
      if (hasSsSinr()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, getSsSinr());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneSignalStrengthNr parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneSignalStrengthNr parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneSignalStrengthNr parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneSignalStrengthNr parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneSignalStrengthNr parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneSignalStrengthNr parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneSignalStrengthNr parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneSignalStrengthNr parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneSignalStrengthNr parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneSignalStrengthNr parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneSignalStrengthNr prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneSignalStrengthNr, Builder> {
      private SneSignalStrengthNr result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneSignalStrengthNr.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneSignalStrengthNr();
        return builder;
      }
      
      protected SneSignalStrengthNr internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneSignalStrengthNr();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneSignalStrengthNr getDefaultInstanceForType() {
        return SneSignalStrengthNr.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneSignalStrengthNr build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneSignalStrengthNr buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneSignalStrengthNr buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneSignalStrengthNr returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneSignalStrengthNr other) {
        if (other == SneSignalStrengthNr.getDefaultInstance()) return this;
        if (other.hasAsuLevel()) {
          setAsuLevel(other.getAsuLevel());
        }
        if (other.hasCsiRsrp()) {
          setCsiRsrp(other.getCsiRsrp());
        }
        if (other.hasCsiRsrq()) {
          setCsiRsrq(other.getCsiRsrq());
        }
        if (other.hasCsiSinr()) {
          setCsiSinr(other.getCsiSinr());
        }
        if (other.hasLevel()) {
          setLevel(other.getLevel());
        }
        if (other.hasSsRsrp()) {
          setSsRsrp(other.getSsRsrp());
        }
        if (other.hasSsRsrq()) {
          setSsRsrq(other.getSsRsrq());
        }
        if (other.hasSsSinr()) {
          setSsSinr(other.getSsSinr());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 8: {
              setAsuLevel(input.readInt32());
              break;
            }
            case 16: {
              setCsiRsrp(input.readInt32());
              break;
            }
            case 24: {
              setCsiRsrq(input.readInt32());
              break;
            }
            case 32: {
              setCsiSinr(input.readInt32());
              break;
            }
            case 40: {
              setLevel(input.readInt32());
              break;
            }
            case 48: {
              setSsRsrp(input.readInt32());
              break;
            }
            case 56: {
              setSsRsrq(input.readInt32());
              break;
            }
            case 64: {
              setSsSinr(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional int32 asu_level = 1;
      public boolean hasAsuLevel() {
        return result.hasAsuLevel();
      }
      public int getAsuLevel() {
        return result.getAsuLevel();
      }
      public Builder setAsuLevel(int value) {
        result.hasAsuLevel = true;
        result.asuLevel_ = value;
        return this;
      }
      public Builder clearAsuLevel() {
        result.hasAsuLevel = false;
        result.asuLevel_ = 0;
        return this;
      }
      
      // optional int32 csi_rsrp = 2;
      public boolean hasCsiRsrp() {
        return result.hasCsiRsrp();
      }
      public int getCsiRsrp() {
        return result.getCsiRsrp();
      }
      public Builder setCsiRsrp(int value) {
        result.hasCsiRsrp = true;
        result.csiRsrp_ = value;
        return this;
      }
      public Builder clearCsiRsrp() {
        result.hasCsiRsrp = false;
        result.csiRsrp_ = 0;
        return this;
      }
      
      // optional int32 csi_rsrq = 3;
      public boolean hasCsiRsrq() {
        return result.hasCsiRsrq();
      }
      public int getCsiRsrq() {
        return result.getCsiRsrq();
      }
      public Builder setCsiRsrq(int value) {
        result.hasCsiRsrq = true;
        result.csiRsrq_ = value;
        return this;
      }
      public Builder clearCsiRsrq() {
        result.hasCsiRsrq = false;
        result.csiRsrq_ = 0;
        return this;
      }
      
      // optional int32 csi_sinr = 4;
      public boolean hasCsiSinr() {
        return result.hasCsiSinr();
      }
      public int getCsiSinr() {
        return result.getCsiSinr();
      }
      public Builder setCsiSinr(int value) {
        result.hasCsiSinr = true;
        result.csiSinr_ = value;
        return this;
      }
      public Builder clearCsiSinr() {
        result.hasCsiSinr = false;
        result.csiSinr_ = 0;
        return this;
      }
      
      // optional int32 level = 5;
      public boolean hasLevel() {
        return result.hasLevel();
      }
      public int getLevel() {
        return result.getLevel();
      }
      public Builder setLevel(int value) {
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder clearLevel() {
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      // optional int32 ss_rsrp = 6;
      public boolean hasSsRsrp() {
        return result.hasSsRsrp();
      }
      public int getSsRsrp() {
        return result.getSsRsrp();
      }
      public Builder setSsRsrp(int value) {
        result.hasSsRsrp = true;
        result.ssRsrp_ = value;
        return this;
      }
      public Builder clearSsRsrp() {
        result.hasSsRsrp = false;
        result.ssRsrp_ = 0;
        return this;
      }
      
      // optional int32 ss_rsrq = 7;
      public boolean hasSsRsrq() {
        return result.hasSsRsrq();
      }
      public int getSsRsrq() {
        return result.getSsRsrq();
      }
      public Builder setSsRsrq(int value) {
        result.hasSsRsrq = true;
        result.ssRsrq_ = value;
        return this;
      }
      public Builder clearSsRsrq() {
        result.hasSsRsrq = false;
        result.ssRsrq_ = 0;
        return this;
      }
      
      // optional int32 ss_sinr = 8;
      public boolean hasSsSinr() {
        return result.hasSsSinr();
      }
      public int getSsSinr() {
        return result.getSsSinr();
      }
      public Builder setSsSinr(int value) {
        result.hasSsSinr = true;
        result.ssSinr_ = value;
        return this;
      }
      public Builder clearSsSinr() {
        result.hasSsSinr = false;
        result.ssSinr_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneSignalStrengthNr)
    }
    
    static {
      defaultInstance = new SneSignalStrengthNr(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneSignalStrengthNr)
  }
  
  public static final class SneCellIdentityNr extends
      com.google.protobuf.GeneratedMessageLite {
    // Use SneCellIdentityNr.newBuilder() to construct.
    private SneCellIdentityNr() {
      initFields();
    }
    private SneCellIdentityNr(boolean noInit) {}
    
    private static final SneCellIdentityNr defaultInstance;
    public static SneCellIdentityNr getDefaultInstance() {
      return defaultInstance;
    }
    
    public SneCellIdentityNr getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // optional string mcc_string = 1;
    public static final int MCC_STRING_FIELD_NUMBER = 1;
    private boolean hasMccString;
    private String mccString_ = "";
    public boolean hasMccString() { return hasMccString; }
    public String getMccString() { return mccString_; }
    
    // optional string mnc_string = 2;
    public static final int MNC_STRING_FIELD_NUMBER = 2;
    private boolean hasMncString;
    private String mncString_ = "";
    public boolean hasMncString() { return hasMncString; }
    public String getMncString() { return mncString_; }
    
    // optional int64 nci = 3;
    public static final int NCI_FIELD_NUMBER = 3;
    private boolean hasNci;
    private long nci_ = 0L;
    public boolean hasNci() { return hasNci; }
    public long getNci() { return nci_; }
    
    // optional int32 nrarfcn = 4;
    public static final int NRARFCN_FIELD_NUMBER = 4;
    private boolean hasNrarfcn;
    private int nrarfcn_ = 0;
    public boolean hasNrarfcn() { return hasNrarfcn; }
    public int getNrarfcn() { return nrarfcn_; }
    
    // optional int32 pci = 5;
    public static final int PCI_FIELD_NUMBER = 5;
    private boolean hasPci;
    private int pci_ = 0;
    public boolean hasPci() { return hasPci; }
    public int getPci() { return pci_; }
    
    // optional int32 tac = 6;
    public static final int TAC_FIELD_NUMBER = 6;
    private boolean hasTac;
    private int tac_ = 0;
    public boolean hasTac() { return hasTac; }
    public int getTac() { return tac_; }
    
    private void initFields() {
    }
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasMccString()) {
        output.writeString(1, getMccString());
      }
      if (hasMncString()) {
        output.writeString(2, getMncString());
      }
      if (hasNci()) {
        output.writeInt64(3, getNci());
      }
      if (hasNrarfcn()) {
        output.writeInt32(4, getNrarfcn());
      }
      if (hasPci()) {
        output.writeInt32(5, getPci());
      }
      if (hasTac()) {
        output.writeInt32(6, getTac());
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasMccString()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getMccString());
      }
      if (hasMncString()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getMncString());
      }
      if (hasNci()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, getNci());
      }
      if (hasNrarfcn()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, getNrarfcn());
      }
      if (hasPci()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, getPci());
      }
      if (hasTac()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, getTac());
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    public static SneCellIdentityNr parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellIdentityNr parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellIdentityNr parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static SneCellIdentityNr parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static SneCellIdentityNr parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellIdentityNr parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static SneCellIdentityNr parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellIdentityNr parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static SneCellIdentityNr parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static SneCellIdentityNr parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(SneCellIdentityNr prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          SneCellIdentityNr, Builder> {
      private SneCellIdentityNr result;
      
      // Construct using com.sonyericsson.idd.probe.android.smartnetworkengine.CellularPredictionData.SneCellIdentityNr.newBuilder()
      private Builder() {}
      
      private static Builder create() {
        Builder builder = new Builder();
        builder.result = new SneCellIdentityNr();
        return builder;
      }
      
      protected SneCellIdentityNr internalGetResult() {
        return result;
      }
      
      public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new SneCellIdentityNr();
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(result);
      }
      
      public SneCellIdentityNr getDefaultInstanceForType() {
        return SneCellIdentityNr.getDefaultInstance();
      }
      
      public boolean isInitialized() {
        return result.isInitialized();
      }
      public SneCellIdentityNr build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
      
      private SneCellIdentityNr buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
      
      public SneCellIdentityNr buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        SneCellIdentityNr returnMe = result;
        result = null;
        return returnMe;
      }
      
      public Builder mergeFrom(SneCellIdentityNr other) {
        if (other == SneCellIdentityNr.getDefaultInstance()) return this;
        if (other.hasMccString()) {
          setMccString(other.getMccString());
        }
        if (other.hasMncString()) {
          setMncString(other.getMncString());
        }
        if (other.hasNci()) {
          setNci(other.getNci());
        }
        if (other.hasNrarfcn()) {
          setNrarfcn(other.getNrarfcn());
        }
        if (other.hasPci()) {
          setPci(other.getPci());
        }
        if (other.hasTac()) {
          setTac(other.getTac());
        }
        return this;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                return this;
              }
              break;
            }
            case 10: {
              setMccString(input.readString());
              break;
            }
            case 18: {
              setMncString(input.readString());
              break;
            }
            case 24: {
              setNci(input.readInt64());
              break;
            }
            case 32: {
              setNrarfcn(input.readInt32());
              break;
            }
            case 40: {
              setPci(input.readInt32());
              break;
            }
            case 48: {
              setTac(input.readInt32());
              break;
            }
          }
        }
      }
      
      
      // optional string mcc_string = 1;
      public boolean hasMccString() {
        return result.hasMccString();
      }
      public String getMccString() {
        return result.getMccString();
      }
      public Builder setMccString(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasMccString = true;
        result.mccString_ = value;
        return this;
      }
      public Builder clearMccString() {
        result.hasMccString = false;
        result.mccString_ = getDefaultInstance().getMccString();
        return this;
      }
      
      // optional string mnc_string = 2;
      public boolean hasMncString() {
        return result.hasMncString();
      }
      public String getMncString() {
        return result.getMncString();
      }
      public Builder setMncString(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasMncString = true;
        result.mncString_ = value;
        return this;
      }
      public Builder clearMncString() {
        result.hasMncString = false;
        result.mncString_ = getDefaultInstance().getMncString();
        return this;
      }
      
      // optional int64 nci = 3;
      public boolean hasNci() {
        return result.hasNci();
      }
      public long getNci() {
        return result.getNci();
      }
      public Builder setNci(long value) {
        result.hasNci = true;
        result.nci_ = value;
        return this;
      }
      public Builder clearNci() {
        result.hasNci = false;
        result.nci_ = 0L;
        return this;
      }
      
      // optional int32 nrarfcn = 4;
      public boolean hasNrarfcn() {
        return result.hasNrarfcn();
      }
      public int getNrarfcn() {
        return result.getNrarfcn();
      }
      public Builder setNrarfcn(int value) {
        result.hasNrarfcn = true;
        result.nrarfcn_ = value;
        return this;
      }
      public Builder clearNrarfcn() {
        result.hasNrarfcn = false;
        result.nrarfcn_ = 0;
        return this;
      }
      
      // optional int32 pci = 5;
      public boolean hasPci() {
        return result.hasPci();
      }
      public int getPci() {
        return result.getPci();
      }
      public Builder setPci(int value) {
        result.hasPci = true;
        result.pci_ = value;
        return this;
      }
      public Builder clearPci() {
        result.hasPci = false;
        result.pci_ = 0;
        return this;
      }
      
      // optional int32 tac = 6;
      public boolean hasTac() {
        return result.hasTac();
      }
      public int getTac() {
        return result.getTac();
      }
      public Builder setTac(int value) {
        result.hasTac = true;
        result.tac_ = value;
        return this;
      }
      public Builder clearTac() {
        result.hasTac = false;
        result.tac_ = 0;
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:smartnetworkengine.SneCellIdentityNr)
    }
    
    static {
      defaultInstance = new SneCellIdentityNr(true);
      CellularPredictionData.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:smartnetworkengine.SneCellIdentityNr)
  }
  
  
  static {
  }
  
  public static void internalForceInit() {}
  
  // @@protoc_insertion_point(outer_class_scope)
}
