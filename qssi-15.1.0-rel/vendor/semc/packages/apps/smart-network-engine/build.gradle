// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        maven {
            url 'https://buildrepo.ptc.sony.co.jp/gradle-build-libs'
        }
    }
    dependencies {
        dependencies {
            classpath 'com.android.tools.build:gradle:7.2.2'
            classpath 'com.sonymobile.tools:sonyfindbugscheckstyle:1.0.0'
        }
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        maven {
            // Needed if you want to use dependencies in your build from Artifactory.
            // The repository specified in the buildscript section is used only for fetching
            // artifacts needed by the build script(e.g. sonycore). For artifacts needed by
            // the project to be built, separate 'repositories' section must be specified,
            // outside of buildscript.
            url 'https://buildrepo.ptc.sony.co.jp/gradle-project-libs'
        }
    }

    task downloadKeystore(type: Exec) {
        executable "wget"
        args "-qN", "https://buildrepo.ptc.sony.co.jp/gradle-build-libs/certificates/somc/1.0/somc-1.0.keystore", "-P", "${rootProject.buildDir}"
    }

    // cf. https://goo.gl/ZHGqgt (stackoverflow.com)
    task pushDownJdkDependency {
        doLast {
            // Get project iml file's absolute path
            def imlFile = rootProject.projectDir.absolutePath + '/.idea/modules/' + project.name + '/' + rootProject.name + '.' + project.name + '.main.iml'
            if (!file(imlFile).exists()) return

            def xmlNode = new XmlParser().parse(imlFile)

            // jdk orderEntry must be last
            def moduleComponent = xmlNode.component.find { it.@name == 'NewModuleRootManager' }
            if (moduleComponent == null) return
            def jdkOrderEntry = moduleComponent.orderEntry.find { it.@type == 'jdk' }
            if (jdkOrderEntry == null) return
            moduleComponent.remove(jdkOrderEntry)
            moduleComponent.append(jdkOrderEntry)

            // Rewrite $project.iml file
            def fileWriter = new FileWriter(imlFile)
            def xmlNodePrinter = new XmlNodePrinter(new PrintWriter(fileWriter))
            xmlNodePrinter.setPreserveWhitespace(true)
            xmlNodePrinter.print(xmlNode)
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// Define versions in a single place
ext {
    // Sdk and tools
    minSdkVersion = 34
    targetSdkVersion = 34
    compileSdkVersion = 34

    // App dependencies
    supportLibraryVersion = '1.1.0'
    supportCompatVersion = '28.0.0'
    supportCoreVersion = '1.13.1'
    androidTestRunnerVersion = '1.4.0'
    androidTestExtJunitVersion = '1.1.3'
    mockitoVersion = '5.8.0'
    protobufJavaVersion = '2.3.0'
    okhttpVersion = '3.14.9'
    gsonVersion = '2.9.0'
    guavaVersion = '27.1-android'
    roomVersion = '2.3.0-beta02'
    androidPreferenceVersion = "1.1.0"

    // App dependencies (for Sony FL library)
    commonsIoVersion = '2.11.0'
    jacksonVersion = '2.13.4'
}
