#===========================================================================
# Clock build script
#
# Copyright (c) 2022 by Qualcomm Technologies, Inc.
# All Rights Reserved
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#===========================================================================

Import('env')

env = env.Clone()

SRCPATH = '..'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

if not env.PathExists('${BUILD_ROOT}/core/systemdrivers/clock/hw/${CHIPSET}'):
  env.PrintWarning('Clock driver not supported on this target yet. Using stub driver.')
  env['MSM_ID'] = 'stub'
  env['CHIPSET'] = 'stub'


# Compilation options
env.Append(CFLAGS = '${ARMCC_STDC99_CMD}')

if env['MSM_ID'] == 'pinnacle':
  env.Append(CPPDEFINES = 'PINNACLE_STUBS')

if env['MSM_ID'] == 'kuno':
  env.Append(CPPDEFINES = 'KUNO_TARGET_CONFIG')
  env.Append(CPPDEFINES = 'KUNO_STUBS')

if env['MSM_ID'] == 'lanai':
  env.Append(CPPDEFINES = 'LANAI_TARGET_CONFIG')
  env.Append(CPPDEFINES = 'RISCV_TARGET')
  env.Append(CPPDEFINES = 'LANAI_STUBS')
  
elif env['MSM_ID'] == 'milos':
  env.Append(CPPDEFINES = 'MILOS_TARGET_CONFIG')
  env.Append(CPPDEFINES = 'RISCV_TARGET')
  env.Append(CPPDEFINES = 'MILOS_STUBS')
  
elif env['MSM_ID'] == 'matrix':
  env.Append(CPPDEFINES = 'MATRIX_TARGET_CONFIG')
  env.Append(CPPDEFINES = 'RISCV_TARGET')
  env.Append(CPPDEFINES = 'MATRIX_STUBS')
  
if env['MSM_ID'] == 'pakala':
  env.Append(CPPDEFINES = 'PAKALA_TARGET_CONFIG')
  env.Append(CPPDEFINES = 'RISCV_TARGET')
  env.Append(CPPDEFINES = 'PAKALA_STUBS')
 
if env['MSM_ID'] == 'palawan':
  env.Append(CPPDEFINES = 'PALAWAN_TARGET_CONFIG')
  env.Append(CPPDEFINES = 'RISCV_TARGET')
  env.Append(CPPDEFINES = 'PALAWAN_STUBS')
  
if env['MSM_ID'] == 'hamoa':
  env.Append(CPPDEFINES = 'HAMOA_TARGET_CONFIG')
  env.Append(CPPDEFINES = 'HAMOA_STUBS')

#
#------------------------------------------------------------------------------
# Add API folders
#------------------------------------------------------------------------------

CBSP_API = [
  'DEBUGTRACE',
  'MPROC',
  'POWER',
  'POWER_UTILS',
  'SYSTEMDRIVERS',
  'SYSTEMDRIVERS_CLOCK',
  'UNPA',
  # Keep it last as contains incorrect version of comdef.h
  'KERNEL'
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
env.RequireProtectedApi(CBSP_API)
env.PublishPrivateApi('SYSTEMDRIVERS_CLOCK', [
    '${BUILD_ROOT}/core/systemdrivers/clock/inc',
    '${BUILD_ROOT}/core/systemdrivers/clock/hw/${CHIPSET}/inc',
])


# Adding settings files to R-init builder
if 'USES_RINIT_PARSER' in env and env['CHIPSET'] != 'stub':
  env.AddRinitInfo('CORE_AOP',
    {'files' : '${BUILD_ROOT}/core/systemdrivers/clock/hw/${CHIPSET}/cfg/clock.rinit'})


if env['CHIPSET'] != 'stub':
  CLOCK_SOURCES = [
    '${BUILDPATH}/src/ClockDriver.c',
    '${BUILDPATH}/hw/${CHIPSET}/src/ClockAOP.c',
    '${BUILDPATH}/hw/${CHIPSET}/cfg/ClockBSP.c',
  ]
else:
  CLOCK_SOURCES = [
    '${BUILDPATH}/stub/ClockDriver.c',
    '${BUILDPATH}/hw/${CHIPSET}/src/ClockAOP.c',
  ]

# Add sources to compile
env.AddBinaryLibrary(['CORE_AOP'], '${BUILDPATH}/${MSM_ID}/Clock', CLOCK_SOURCES)

#-------------------------------------------------------------------------------
# SWEvent processing
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in env:
  QDSS_IMG = ['QDSS_EN_IMG']
  events = [['CLOCK_EVENT_FIRST=384',     'Clock first event placeholder'],
            ['CLOCK_EVENT_INIT',          'Clock Initialize'],
            ['CLOCK_EVENT_POWER_COLLAPSE','Clock Power Collapse: %plugin[3]<clock>.'],
            ['CLOCK_EVENT_POWER_RESTORE', 'Clock Power Restore:  %plugin[3]<clock>.'],
            ['CLOCK_EVENT_PSCBC_CHECK',   'Clock PSCBC ON at XO shutdown (CBCR_ADDR) : 0x%x = 0x%x'],
            ['CLOCK_EVENT_LAST=511',      'Clock last event placeholder']
           ]
  env.AddSWEInfo(QDSS_IMG, events)
