#===========================================================================
#
#  @file aop.scons
#  @brief Image-level build script for the AOP.
#
#  This file can be invoked directly by calling:
#
#    build aop
#
#  ===========================================================================
#
#  Copyright (c) 2011-2023 Qualcomm Technologies, Inc.
#  All Rights Reserved.
#  QUALCOMM Proprietary and Confidential.
#
#  ===========================================================================
#
#  $Header: //service/AOP/AOP.HO.5.0-00688-LANAI_E-1.65547/aop_proc/core/bsp/aop/build/aop.scons#1 $
#  $DateTime: 2024/04/01 02:51:58 $
#  $Author: cirrusp4svc $
#
#  ===========================================================================

#------------------------------------------------------------------------------
# Imports
#------------------------------------------------------------------------------

import sys
import os
Import('env')

env = env.Clone()

#------------------------------------------------------------------------------
# Define the "aop" image
#------------------------------------------------------------------------------

aliases = ['aop', 'all']

# Make Use of Global sectools for Cedros
if "SECTOOLS_DIR" not in os.environ:
    if sys.platform=='win32':
        #TODO: do a dynamic lookup
        os.environ["SECTOOLS_DIR"]= "\\\\swayam\\sectools\\int\\latest"
    else:
        os.environ["SECTOOLS_DIR"]= "/pkg/sectools/int/latest"
        
if "SECTOOLS_DIR" in os.environ:
    sectools_dir = os.environ["SECTOOLS_DIR"]
tools_env = ['${BUILD_ROOT}/core/bsp/aop/build/aoptools_defs.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/scl_builder.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/bin_builder.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/swe_builder.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/cmm_builder.py',
         '${BUILD_ROOT}/tools/build/scons/scripts/buildspec_builder.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/aop_elf_builder.py',
#         '${BUILD_ROOT}/core/bsp/build/scripts/rinit_builder.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/cmd_db_check.py',
         '${BUILD_ROOT}/core/bsp/build/scripts/aop_devcfg_builder.py',
         ]
if env['MSM_ID'] in ['cedros','kodiak']: # Global sectools usage for Cedros   #FILLMORE_TODO
     tools_env += [os.path.join(os.environ["SECTOOLS_DIR"], 'sectools', 'features', 'isc', 'parsegen','mbn_tools.py'),
                   os.path.join(sectools_dir, 'sectools_builder.py'),
                  ]
elif env['MSM_ID'] in ['waipio','fillmore','kailua','aurora','lassen','netrani', 'lanai', 'pakala','kapiti', 'hamoa','pinnacle','kuno', 'camano', 'palawan', 'matrix', 'milos', 'kaanapali']: #sec v2 signed
    tools_env += ['${BUILD_ROOT}/core/bsp/build/scripts/aop_sectools_signer.py',]
else: #local sectools
    tools_env += ['${BUILD_ROOT}/tools/build/scons/sectools/sectools_builder.py',]


env.InitImageVars(
   alias_list=aliases,
   proc='aop',
   config='aop',
   build_tags = ['CORE_AOP', 'AOP_IMAGE', 'DAL_DEVCFG_IMG', 'QDSS_EN_IMG',
                 'IMAGE_TREE_VERSION_AUTO_GENERATE',
                 'IMAGE_TREE_UUID_AUTO_GENERATE',
                ],
    tools = tools_env
    )               

env.Replace(USES_QDSS_SWE = 'TRUE')


#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------

if not env.CheckAlias(alias_list=aliases):
   Return()

#------------------------------------------------------------------------------
# Init defualt values this PROC/Image
#------------------------------------------------------------------------------
# Add DAL_CONFIG_TARGET_ID to CPPDEFINES needed by some dal drivers
if env['MSM_ID'] in ['8994']:
   env.Append(CPPDEFINES = [
   "DAL_CONFIG_TARGET_ID=0x8994"
   ])
elif env['MSM_ID'] in ['8996']:
   env.Append(CPPDEFINES = [
   "DAL_CONFIG_TARGET_ID=0x8996",
   'VSENSE_FEATURE_ENABLED'
   ])
elif env['MSM_ID'] in ['8998']:
   env.Append(CPPDEFINES = [
   "DAL_CONFIG_TARGET_ID=0x8998",
   'VSENSE_FEATURE_ENABLED',
   'PRE_SILICON_WORKAROUND', # TODO: delete this when real target is available
   ])
elif env['MSM_ID'] in ['TalosAU']:
   env.Append(CPPDEFINES = [
   "DAL_CONFIG_TARGET_ID=0x6150"
   ])
elif env['MSM_ID'] in ['Saipan']: # TODO: Change to MSM_ID when available
   env.Append(CPPDEFINES = [
   "DAL_CONFIG_TARGET_ID=0x8250"
   ])
else:
   env.Append(CPPDEFINES = [
   "DAL_CONFIG_TARGET_ID=0x${MSM_ID}"
   ])

#UNCOMMENT FOR AOP SW PROFILING 
#if env['MSM_ID'] == '8250':
#  env.Append(CPPDEFINES = 'AOP_PROF_ENABLED')

if env['MSM_ID'] in ['lanai', 'pakala', 'palawan', 'matrix', 'milos', 'kaanapali']:
    if os.environ['CHIPSET_SVE'] in ['lanai_sve_needs']:
        env.Append(CPPDEFINES = [
        "LANAI_SVE_NEEDS"])
    elif os.environ['CHIPSET_SVE'] in ['palawan_sve_needs']:
        env.Append(CPPDEFINES = [
        "PALAWAN_SVE_NEEDS"])
    elif os.environ['CHIPSET_SVE'] in ['milos_sve_needs']:
        env.Append(CPPDEFINES = [
        "MILOS_SVE_NEEDS"])
    elif os.environ['CHIPSET_SVE'] in ['pakala_sve_needs']:
        env.Append(CPPDEFINES = [
        "PAKALA_SVE_NEEDS"])
    elif os.environ['CHIPSET_SVE'] in ['matrix_sve_needs']:
        env.Append(CPPDEFINES = ["MATRIX_SVE_NEEDS"])
    elif os.environ['CHIPSET_SVE'] in ['kaanapali_sve_needs']:
        env.Append(CPPDEFINES = [
        "KAANAPALI_SVE_NEEDS"])
        
# Enable devcfg feature
if env['MSM_ID'] in ['waipio','fillmore','kailua','aurora','lassen','netrani', 'lanai', 'pakala','kapiti', 'hamoa','pinnacle','kuno', 'camano', 'palawan', 'matrix', 'milos', 'kaanapali']:
  env.Replace(USES_DEVCFG = True)
  env.Replace(USES_MULTI_DEVCFG = True)
  env.Replace(USES_DEVCFG_MULTIPLE_TAGS = True)

#enable sectools option for generating secure image
if "SECPOLICY" in os.environ:
  sec_policy_list = os.environ["SECPOLICY"].split()
  for sec_policy in sec_policy_list:
    eval("env.Replace(%s = True)"%sec_policy) #to avoid hardcoding all sectool policies

#
#---------------------------------------------------------------------------
# Load in uses and path variables
#---------------------------------------------------------------------------

env.InitBuildConfig()

#env.Replace(USES_NO_STRIP_NO_ODM = 'yes')
#env.Replace(USES_NO_DEBUG = 'yes')

#---------------------------------------------------------------------------
# Qmp Test flag 
#---------------------------------------------------------------------------
# Not promoting for any targets due to HEAP fragmentation issues
#if env['MSM_ID'] not in ['lanai','kuno','pakala']:
#  env.Append(CPPDEFINES = ['XPORT_QMP_TEST'])

#---------------------------------------------------------------------------
# Load build rules
#---------------------------------------------------------------------------

# The build scripts always expect posix paths, so ensure that here.
if env.has_key('FILTER_OPT') and env['FILTER_OPT'] is not None:
  env['FILTER_OPT'] = env.NormPath(env['FILTER_OPT'], posix=True)

core_libs, core_objs = env.LoadAUSoftwareUnits('core')
build_libs, build_objs = env.LoadAUSoftwareUnits('build')

#------------------------------------------------------------------------------
# Create UUID file
#------------------------------------------------------------------------------
img_uuid_tag = 'IMAGE_TREE_UUID_AUTO_GENERATE'
if env.IsKeyEnable(img_uuid_tag):
  env.LoadToolScript('version_builder', toolpath = ['${BUILD_SCRIPTS_ROOT}'])
  oem_uuid_c = env.OEM_UUID_Builder(img_uuid_tag, 'oem_uuid.c',
                                    [core_objs, core_libs],
                                    TARGET_IMG_PATH = env.RealPath("${TARGET_NAME}"))
  oem_uuid_o = env.AddObject(img_uuid_tag, oem_uuid_c)
  core_objs.append(oem_uuid_o)

#------------------------------------------------------------------------------
# Build the final product
#------------------------------------------------------------------------------
env.Replace(AOP_LIBS = [core_libs, build_libs])
env.Replace(AOP_OBJS = [core_objs, build_objs])

env.Tool('AOP', toolpath = ['${BUILD_ROOT}/core/bsp/aop/build'])

#---------------------------------------------------------------------------
# Now that we know we need to build something, the first thing we need
# to do is add our image to BuildProducts.txt, so that tools can verify
# when our build is successful.
#---------------------------------------------------------------------------

if env['MSM_ID'] == ['670']:
  env.BuildProductsFile ('aop_proc/', '../../../../build/ms/bin/${BUILD_ID}/${MSM_ID}/${CHIPSET_PMIC}/aop.mbn', env)
elif env['MSM_ID'] in ['lanai', 'pakala', 'palawan', 'matrix', 'milos', 'kaanapali']:
    if os.environ['CHIPSET_SVE'] in ['lanai_sve_needs', 'palawan_sve_needs', 'pakala_sve_needs', 'matrix_sve_needs', 'milos_sve_needs', 'kaanapali_sve_needs']:
        env.BuildProductsFile ('aop_proc/', '../../../../build/ms/bin/${BUILD_ID}/${MSM_ID}/${CHIPSET_SVE}/aop.mbn', env)
    else:
        env.BuildProductsFile ('aop_proc/', '../../../../build/ms/bin/${BUILD_ID}/${MSM_ID}/aop.mbn', env)
elif env['MSM_ID'] in ['pinnacle'] and os.environ.get('BIN_FOLDER_NAME') is not None:
  env.BuildProductsFile ('aop_proc/', '../../../../build/ms/bin/${BUILD_ID}/'+os.environ['BIN_FOLDER_NAME']+'/aop.mbn', env)
elif env['MSM_ID'] in ['6150','7150','8350','cedros','makena','kodiak','kailua','fillmore','aurora','lassen','netrani', 'lanai', 'pakala','kapiti', 'hamoa','pinnacle','kuno', 'camano', 'palawan', 'matrix', 'milos', 'kaanapali'] : 
  env.BuildProductsFile ('aop_proc/', '../../../../build/ms/bin/${BUILD_ID}/${MSM_ID}/aop.mbn', env)
elif env['MSM_ID'] in ['makenaau'] :
  env.BuildProductsFile ('aop_proc/', '../../../../build/ms/bin/${BUILD_ID}/${MSM_ID}/${VARIANT}/aop.mbn', env)
elif env['MSM_ID'] in ['waipio'] :
  env.BuildProductsFile ('aop_proc/', '../../../../build/ms/bin/${BUILD_ID}/${CHIPSET_PMIC}/aop.mbn', env)
else:
  env.BuildProductsFile ('aop_proc/', '../../../../build/ms/bin/${BUILD_ID}/aop.mbn', env)

#------------------------------------------------------------------------------
# Generate Scripts
#------------------------------------------------------------------------------
env.CMMBuilder(None, None)

#------------------------------------------------------------------------------
# Generate HWIO files
#------------------------------------------------------------------------------
# Moved to core\bsp\build\SConscript since this script cannot be detected for 'hwio' build target
