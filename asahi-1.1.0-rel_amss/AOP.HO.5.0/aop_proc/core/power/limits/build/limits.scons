#===============================================================================
#
# Limits Central Broadcast system
#
# GENERAL DESCRIPTION
#    build script
#
#   Copyright (c) 2016-2019, 2023 Qualcomm Technologies, Inc. (QTI).
#   All Rights Reserved.
#   Qualcomm Confidential and Proprietary.
#   Export of this technology or software is regulated by the U.S. Government.
#   Diversion contrary to U.S. law prohibited.
#-------------------------------------------------------------------------------
#  $Header: //service/AOP/AOP.HO.5.0-00688-LANAI_E-1.65547/aop_proc/core/power/limits/build/limits.scons#1 $
#  $DateTime: 2024/04/01 02:51:58 $
#===============================================================================

Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Target Build Options
#-------------------------------------------------------------------------------
#Turn off optimizations for easier debug
#env.Append(CCFLAGS = ' -O0')

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = '..'
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------

env.PublishPrivateApi('LIMITS', [
    '${BUILD_ROOT}/core/power/limits/hwio/${MSM_ID}',
])

CBSP_API = [
    'SYSTEMDRIVERS',
    'POWER',
    'MPROC',
    'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
env.RequireProtectedApi(CBSP_API)

#----------------------------------------------------------------------
# Compile Sources.
#----------------------------------------------------------------------

LIMITS_SOURCES = [
  '${BUILDPATH}/src/cb_runtime.c',
]

if env['MSM_ID'] in ['hamoa']:
  env.AddBinaryLibrary(['CORE_AOP'], '${BUILDPATH}/${MSM_ID}/limits', LIMITS_SOURCES)

#-------------------------------------------------------------------------------
# RINIT FILES
#-------------------------------------------------------------------------------

# Unlike other modules, here we are checking if rinit_files path exists for a
# given target since the PW could have targets where PDC TCSs are not 
# initialized from RINIT and as such those targets would not have the files.
if 'USES_RINIT_PARSER' in env:
    rinit_files = '${BUILD_ROOT}/core/power/limits/cfg/${MSM_ID}'
    if env.PathExists(rinit_files):
        env.AddRinitInfo('CORE_AOP', {'files' : rinit_files})


