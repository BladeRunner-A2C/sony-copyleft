#/** @file QcomTestPkg.fdf
# FLASH layout file for QcomTestPkg.
#
# Copyright (c) 2016-2023 Qualcomm Technologies, Inc. All rights reserved.
# Portions Copyright (c) 2009, Apple Inc. All rights reserved.
# This program and the accompanying materials
# are licensed and made available under the terms and conditions of the BSD License
# which accompanies this distribution.  The full text of the license may be found at
# http://opensource.org/licenses/bsd-license.php
#
# THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
# WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
#
#**/
#
#==============================================================================
#                              EDIT HISTORY
#
#
# when       who     what, where, why
# --------   ---     ----------------------------------------------------------
# 05/11/23   sairaj  Removed DDRInfoTest & DDRStressTest
# 03/14/23   kpa     Added RmVmTest
# 12/27/22   rk      Added HSUART App
# 12/19/22   sourav  Added double signed test images
# 11/14/22   ananns  Added ECFlash App
# 01/12/20   shl     Added SmcInvoketest, increased the volume size,
#                    added SmcInvokeTestApp.mbn in the volume
# 02/03/19   bd      Added PrivateAuthVarTest
# 01/28/19   kpa     Added BMPTest app
# 05/03/18   pranavj Ported SHMBridge changes to Poipu
# 02/13/17`  gk      Port changes from boot.xf.2.0 and boot.xf.2.2
# 09/04/17   gk      UEFI USB compliance test changes
# 05/23/16   ck      Adding PMIC charger app USB support test app
# 03/14/16   bh      Add test app
# 03/07/16   vk      Add apps, and increase size
# 01/19/16   vk      Initial revision
#
#==============================================================================


################################################################################
#
# FD Section
# The [FD] Section is made up of the definition statements and a
# description of what goes into  the Flash Device Image.  Each FD section
# defines one flash "device" image.  A flash device image may be one of
# the following: Removable media bootable image (like a boot floppy
# image,) an Option ROM image (that would be "flashed" into an add-in
# card,) a System "Flash"  image (that would be burned into a system's
# flash) or an Update ("Capsule") image that will be used to update and
# existing system flash.
#
################################################################################


[FD.QcomTests_EFI]
BaseAddress   = 0x98100000|gEmbeddedTokenSpaceGuid.PcdEmbeddedFdBaseAddress  #The base address of the FLASH Device.
Size          = 0x000C0000|gEmbeddedTokenSpaceGuid.PcdEmbeddedFdSize         #The size in bytes of the FLASH Device
ErasePolarity = 1
BlockSize     = 0x1000
NumBlocks     = 0xC0

################################################################################
#
# Following are lists of FD Region layout which correspond to the locations of different
# images within the flash device.
#
# Regions must be defined in ascending order and may not overlap.
#
# A Layout Region start with a eight digit hex offset (leading "0x" required) followed by
# the pipe "|" character, followed by the size of the region, also in hex with the leading
# "0x" characters. Like:
# Offset|Size
# PcdOffsetCName|PcdSizeCName
# RegionType <FV, DATA, or FILE>
#
################################################################################

# 512 bytes of configuration header & 8 bytes of image header
0x00000000|0x000C0000
gEmbeddedTokenSpaceGuid.PcdFlashFvMainBase|gEmbeddedTokenSpaceGuid.PcdFlashFvMainSize
FV = FVMAIN_COMPACT

################################################################################
#
# FV Section
#
# [FV] section is used to define what components or modules are placed within a flash
# device file.  This section also defines order the components and modules are positioned
# within the image.  The [FV] section consists of define statements, set statements and
# module statements.
#
################################################################################

[FV.FvMain]
BlockSize          = 0x1000
NumBlocks          = 0         # This FV gets compressed so make it just big enough
FvAlignment        = 8         # FV alignment and FV attributes setting.
ERASE_POLARITY     = 1
MEMORY_MAPPED      = TRUE
STICKY_WRITE       = TRUE
LOCK_CAP           = TRUE
LOCK_STATUS        = TRUE
WRITE_DISABLED_CAP = TRUE
WRITE_ENABLED_CAP  = TRUE
WRITE_STATUS       = TRUE
WRITE_LOCK_CAP     = TRUE
WRITE_LOCK_STATUS  = TRUE
READ_DISABLED_CAP  = TRUE
READ_ENABLED_CAP   = TRUE
READ_STATUS        = TRUE
READ_LOCK_CAP      = TRUE
READ_LOCK_STATUS   = TRUE
FvNameGuid         = 87E6CC53-A9A7-4A49-A735-451472E70F83

  #
  # Test Applications
  #

!if $(ARCH) == "AARCH64"
  INF QcomPkg/QcomTestPkg/HvxTestApp/HvxTest.inf
  INF QcomPkg/QcomTestPkg/cpt_LPMTest/cpt_LPMTest.inf
  INF QcomPkg/QcomTestPkg/cpt_MpTest/cpt_MpTest.inf
  INF QcomPkg/QcomTestPkg/cpt_MpTest2/cpt_MpTest2.inf
!endif

!if $(ARCH) == "ARM"
  #INF QcomPkg/QcomTestPkg/Pcie/PcieTestDxe/PcieTestDxe.inf
!endif

  INF QcomPkg/QcomTestPkg/AcpiPlatformTest/AcpiPlatformTest.inf
  INF QcomPkg/QcomTestPkg/AdapterInformationApp/AdapterInformationApp.inf
  INF QcomPkg/QcomTestPkg/AdcTest/AdcTest.inf
  INF QcomPkg/QcomTestPkg/ButtonsTest/ButtonsTest.inf
  INF QcomPkg/QcomTestPkg/CacheTest/CacheTest.inf
  INF QcomPkg/QcomTestPkg/ChipInfoApp/ChipInfoApp.inf
  INF QcomPkg/QcomTestPkg/CipherApp/CipherApp.inf
  INF QcomPkg/QcomTestPkg/HmacApp/HmacApp.inf
  #INF QcomPkg/QcomTestPkg/DALSysApp/DALSysApp.inf
  INF QcomPkg/QcomTestPkg/DepTest/DepTest.inf
  INF QcomPkg/QcomTestPkg/DisplayApp/DisplayApp.inf
  INF QcomPkg/QcomTestPkg/FeatureEnablerApp/FeatureEnablerApp.inf
  INF QcomPkg/QcomTestPkg/EnvTest/EnvTest.inf
  INF QcomPkg/QcomTestPkg/FontTest/FontTest.inf
  #INF QcomPkg/QcomTestPkg/HWEnginesTest/HWEnginesTest.inf
  INF QcomPkg/QcomTestPkg/HWIOTest/HWIOTest.inf
  INF QcomPkg/QcomTestPkg/HashApp/HashApp.inf
  INF QcomPkg/QcomTestPkg/HelloWorld/HelloWorld.inf
  INF QcomPkg/QcomTestPkg/HeapGuardTest/HeapGuardTest.inf
  INF QcomPkg/QcomTestPkg/I2CApp/I2Capp.inf
  INF QcomPkg/QcomTestPkg/HSUartApp/HSUartTest.inf
  INF QcomPkg/QcomTestPkg/ECFlashApp/ECFlashApp.inf
  #INF QcomPkg/QcomTestPkg/IORTTest/IORTTest.inf
  INF QcomPkg/QcomTestPkg/MmuTest/MmuTest.inf
  INF QcomPkg/QcomTestPkg/DelSecBootVars/DelSecBootVars.inf
  INF QcomPkg/QcomTestPkg/MeasureBootApp/MeasureBootApp.inf
  INF QcomPkg/QcomTestPkg/MorApp/MorApp.inf
  INF QcomPkg/QcomTestPkg/PpiApp/PpiApp.inf
  INF QcomPkg/QcomTestPkg/MemmapTest/MemTest.inf
  INF QcomPkg/QcomTestPkg/NpaTestApp/NpaTestApp.inf
  INF QcomPkg/QcomTestPkg/PMICTest/PMICTest.inf
  INF QcomPkg/QcomTestPkg/PlatformInfoApp/PlatformInfoApp.inf
  #INF QcomPkg/QcomTestPkg/PmicNpaTestApp/PmicNpaTestApp.inf
  INF QcomPkg/QcomTestPkg/QwesTest/QwesTest.inf
  INF QcomPkg/QcomTestPkg/RNGApp/RNGApp.inf
  INF QcomPkg/QcomTestPkg/RealTimeClockTest/RealTimeClockTest.inf
  INF QcomPkg/QcomTestPkg/ResetReasonTest/ResetReasonTest.inf
  INF QcomPkg/QcomTestPkg/SPIApp/SPILoopback.inf
  INF QcomPkg/QcomTestPkg/SPMIApp/SPMIApp.inf
  #INF QcomPkg/QcomTestPkg/SPMIRTApp/SPMIRTApp.inf
  INF QcomPkg/QcomTestPkg/ScmApp/ScmApp.inf
  INF QcomPkg/QcomTestPkg/SdccApp/SdccTestApp.inf
  INF QcomPkg/QcomTestPkg/SecBootApp/SecBootApp.inf
  #INF QcomPkg/QcomTestPkg/SmemTestApp/SmemTestApp.inf
  INF QcomPkg/QcomTestPkg/StackCanaryTest/StackTest.inf
  #INF QcomPkg/QcomTestPkg/SysDrvVarTest/Test/SysDrvTest.inf
  INF QcomPkg/QcomTestPkg/TLMMApp/TLMMApp.inf
  INF QcomPkg/QcomTestPkg/GPIOApp/GPIOApp.inf
  INF QcomPkg/QcomTestPkg/TimerTestApp/TimerTestApp.inf
  INF QcomPkg/QcomTestPkg/TrEEApp/TrEEApp.inf
  INF QcomPkg/QcomTestPkg/TsensTest/TsensTest.inf
  #INF QcomPkg/QcomTestPkg/TzAppTest/TzAppTest.inf
  INF QcomPkg/QcomTestPkg/TzFuseTestApp/TzFuseTestApp.inf
  INF QcomPkg/QcomTestPkg/TzRngTest/TzRngTest.inf
  INF QcomPkg/QcomTestPkg/TzeLoaderTest/TzeLoaderTest.inf
  INF QcomPkg/QcomTestPkg/SmcInvokeTest/SmcInvokeTest.inf
  INF QcomPkg/QcomTestPkg/SmcInvokeExampleApp/SmcInvokeExampleApp.inf
  INF QcomPkg/QcomTestPkg/TzQseecomTest/TzQseecomTest.inf
  INF QcomPkg/QcomTestPkg/ULogTestApp/ULogTestApp.inf
  INF QcomPkg/QcomTestPkg/UsbfnLoopbackApp/UsbfnLoopbackApp.inf
  #INF QcomPkg/QcomTestPkg/UsbfnMsdTest/UsbfnMsdTestApp.inf
  INF QcomPkg/QcomTestPkg/UsbHostPortTestApp/UsbHostPortTestApp.inf
  INF QcomPkg/QcomTestPkg/UsbfnChgSrvTestApp/UsbfnChgSrvTest.inf
  INF QcomPkg/QcomTestPkg/VarTest/VarTest.inf
  INF QcomPkg/QcomTestPkg/EraseTest/EraseTest.inf
  INF QcomPkg/QcomTestPkg/SecRSATestApp/SecRSATestApp.inf
  INF QcomPkg/QcomTestPkg/AssertTest/AssertTest.inf
  INF QcomPkg/QcomTestPkg/AslrTest/AslrTest.inf
  #INF QcomPkg/QcomTestPkg/GpiLibTest/GpiLibTest.inf
  INF QcomPkg/QcomTestPkg/FileLogTestApp/FileLogTestApp.inf
  INF QcomPkg/QcomTestPkg/ClockApp/ClockApp.inf
  INF QcomPkg/QcomTestPkg/ChargerTest/ChargerTest.inf
  INF QcomPkg/QcomTestPkg/DppToolApp/DppTool.inf
  INF QcomPkg/QcomTestPkg/ShmBridgeTest/ShmBridgeTest.inf
  INF QcomPkg/QcomTestPkg/WatchdogPetTest/WatchdogPetTest.inf
  INF QcomPkg/QcomTestPkg/BMPTest/BMPTest.inf
  INF QcomPkg/QcomTestPkg/VariablePolicyTest/VariablePolicyTest.inf
  INF QcomPkg/QcomTestPkg/VariablePolicySecureBootTest/VariablePolicySecureBootTest.inf
  INF QcomPkg/QcomTestPkg/PrivAuthVarTest/PrivAuthVarTest.inf
  INF QcomPkg/QcomTestPkg/EnterpriseMgtApp/EnterpriseMgtApp.inf
  INF QcomPkg/QcomTestPkg/DTBTestApp/DTBTest.inf
  INF QcomPkg/QcomTestPkg/Pcie/PcieTest/PcieTest.inf
  INF QcomPkg/QcomTestPkg/Pcie/PwrUp/Pwrup.inf
  INF QcomPkg/QcomTestPkg/Pcie/PcieTestDxe/PcieTestDxe.inf
  INF QcomPkg/QcomTestPkg/Pcie/MhiTest/MhiTest.inf
  INF QcomPkg/QcomTestPkg/Pcie/MhiTestDxe/MhiTestDxe.inf

  #WatchdogLibTest (WDLTest) to be enabled only in engg builds
  #INF QcomPkg/QcomTestPkg/WatchdogLibTest/WatchdogLibTest.inf
  INF QcomPkg/QcomTestPkg/RmVmTest/RmVmTest.inf

!if $(ARCH) == "AARCH64"
  FILE FV_IMAGE = DB708324-2C6B-4925-92E8-CCDE88DC7B62 {
    SECTION UI = "tools.fv"
    SECTION FV_IMAGE = QcomPkg/QcomToolsPkg/Bin/QcomTools/DEBUG/tools.fv
  }
!elseif $(ARCH) == "ARM"
  FILE FV_IMAGE = DB708324-2C6B-4925-92E8-CCDE88DC7B62 {
    SECTION UI = "tools32.fv"
    SECTION FV_IMAGE = QcomPkg/QcomTools32Pkg/Bin/32/DEBUG/tools32.fv
  }
!endif

  FILE FREEFORM = a91d838e-a5fa-4138-825d-455e23030790 {
    SECTION UI = "VarTest.cfg"
    SECTION RAW = QcomPkg/QcomTestPkg/VarTest/VarTest.cfg
  }

  FILE FV_IMAGE = 3A1D9667-5AE3-4A1E-ADF7-686FF10DC441 {
    SECTION UI = "smcinvoketestapp.mbn"
    SECTION RAW = QcomPkg/QcomTestPkg/SmcInvokeTest/smcinvoketestapp.mbn
  }

  FILE FV_IMAGE = 1EE8A7D9-40A6-44B0-9509-A2A05B26A16F {
    SECTION UI = "smcinvoke_example_ta64.mbn"
    SECTION RAW = QcomPkg/QcomTestPkg/SmcInvokeExampleApp/smcinvoke_example_ta64.mbn
  }

  FILE FV_IMAGE = 153E3BDC-84AC-4964-9935-569F7CA33D45 {
    SECTION UI = "smcinvoke_example_svc_ta64.mbn"
    SECTION RAW = QcomPkg/QcomTestPkg/SmcInvokeExampleApp/smcinvoke_example_svc_ta64.mbn
  }

  FILE FV_IMAGE = DEADE94D-5F72-4042-BE10-F1CF0510569E {
    SECTION UI = "OldNew.efi"
    SECTION RAW = QcomPkg/QcomTestPkg/SecBootApp/OldNew.efi
  }

  FILE FV_IMAGE = 9640ABC9-8680-4ACD-968A-4A7EAA12BFE1 {
    SECTION UI = "NewOld.efi"
    SECTION RAW = QcomPkg/QcomTestPkg/SecBootApp/NewOld.efi
  }

[FV.FVMAIN_COMPACT]
FvAlignment        = 8
ERASE_POLARITY     = 1
MEMORY_MAPPED      = TRUE
STICKY_WRITE       = TRUE
LOCK_CAP           = TRUE
LOCK_STATUS        = TRUE
WRITE_DISABLED_CAP = TRUE
WRITE_ENABLED_CAP  = TRUE
WRITE_STATUS       = TRUE
WRITE_LOCK_CAP     = TRUE
WRITE_LOCK_STATUS  = TRUE
READ_DISABLED_CAP  = TRUE
READ_ENABLED_CAP   = TRUE
READ_STATUS        = TRUE
READ_LOCK_CAP      = TRUE
READ_LOCK_STATUS   = TRUE




  FILE FV_IMAGE = 06365409-35D5-47CB-92AC-5CFE75FAA422 {
    SECTION GUIDED EE4E5898-3914-4259-9D6E-DC7BD79403CF PROCESSING_REQUIRED = TRUE {
      SECTION FV_IMAGE = FVMAIN
    }
  }

################################################################################
#
# Rules are use with the [FV] section's module INF type to define
# how an FFS file is created for a given INF file. The following Rule are the default
# rules for the different module type. User can add the customized rules to define the
# content of the FFS file.
#
################################################################################


############################################################################
# Example of a DXE_DRIVER FFS file with a Checksum encapsulation section   #
############################################################################
#
#[Rule.Common.DXE_DRIVER]
#  FILE DRIVER = $(NAMED_GUID) {
#    DXE_DEPEX    DXE_DEPEX Optional      |.depex
#    COMPRESS PI_STD {
#      GUIDED {
#        PE32     PE32                    |.efi
#        UI       STRING="$(MODULE_NAME)" Optional
#        VERSION  STRING="$(INF_VERSION)" Optional BUILD_NUM=$(BUILD_NUMBER)
#      }
#    }
#  }
#
############################################################################

[Rule.Common.SEC]
  FILE SEC = $(NAMED_GUID) RELOCS_STRIPPED {
    TE  TE    Align = 16      |.efi
  }

[Rule.Common.PEI_CORE]
  FILE PEI_CORE = $(NAMED_GUID) {
    TE     TE           |.efi
    UI     STRING ="$(MODULE_NAME)" Optional
  }

[Rule.Common.PEIM]
  FILE PEIM = $(NAMED_GUID) {
     PEI_DEPEX PEI_DEPEX Optional        |.depex
     PE32      PE32                      |.efi
     UI       STRING="$(MODULE_NAME)" Optional
  }

[Rule.Common.PEIM.TIANOCOMPRESSED]
  FILE PEIM = $(NAMED_GUID) DEBUG_MYTOOLS_IA32 {
    PEI_DEPEX PEI_DEPEX Optional         |.depex
    GUIDED A31280AD-481E-41B6-95E8-127F4C984779 PROCESSING_REQUIRED = TRUE {
      PE32      PE32                     |.efi
      UI        STRING="$(MODULE_NAME)" Optional
    }
  }

[Rule.Common.DXE_CORE]
  FILE DXE_CORE = $(NAMED_GUID) {
    PE32     PE32           |.efi
    UI       STRING="$(MODULE_NAME)" Optional
  }

[Rule.Common.UEFI_DRIVER]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      |.depex
    PE32         PE32                    |.efi
    UI           STRING="$(MODULE_NAME)" Optional
  }

[Rule.Common.DXE_DRIVER]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      |.depex
    PE32         PE32                    |.efi
    UI           STRING="$(MODULE_NAME)" Optional
  }

[Rule.Common.DXE_RUNTIME_DRIVER]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      |.depex
    PE32         PE32                    |.efi
    UI           STRING="$(MODULE_NAME)" Optional
  }

[Rule.Common.DXE_RUNTIME_DRIVER.BINARY]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      |.depex
    PE32         PE32                    |.efi
    UI           STRING="$(MODULE_NAME)" Optional
  }

[Rule.Common.UEFI_APPLICATION]
  FILE APPLICATION = $(NAMED_GUID) {
    UI     STRING ="$(MODULE_NAME)" Optional
    PE32   PE32                    |.efi
  }

[Rule.Common.DXE_DRIVER.BINARY]
  FILE DRIVER = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      |.depex
    PE32         PE32                    |.efi
    UI           STRING="$(MODULE_NAME)" Optional
  }

[Rule.Common.UEFI_APPLICATION.BINARY]
  FILE APPLICATION = $(NAMED_GUID) {
    DXE_DEPEX    DXE_DEPEX Optional      |.depex
    PE32         PE32                    |.efi
    UI           STRING="$(MODULE_NAME)" Optional
  }


