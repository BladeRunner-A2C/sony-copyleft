#ifndef _HAL_DP_PHY_H_
#define _HAL_DP_PHY_H_

/*=============================================================================
 
  File: hal_dp_phy.h
 
  Header file for DP PHY hardware functionality 
   
  Copyright (c) 2016-2022 Qualcomm Technologies, Inc.
  All Rights Reserved.
  Confidential and Proprietary - Qualcomm Technologies, Inc.
=============================================================================*/

/* Ceil function for integer division */
#define HALDPPHY_CEIL(_x_, _y_)                                 (((_x_) + (_y_) - 1) / (_y_))

/*--------------------------------------------------------------------------------------------
 *   Data Type Defines
 *--------------------------------------------------------------------------------------------*/

 /*!
  * \struct HAL_DP_PeSwPairType
  *
  *  pre-emphasis and voltage swing
  *
  */
typedef struct
{
  uint16 uPreEmphasis;
  uint16 uVoltageSwing;
}HAL_DP_PeSwPairType;

/*!
 * \struct HAL_DP_PeSwConfigType
 *
 *  Input info to config PHY Voltage Swing level and pre-emphasis level
 *
 */
typedef struct
{
  uint32                        uLaneSwingLevel;                      /**< Lane voltage swing level                          */
  uint32                        uPreemphasisLevel;                    /**< Lane pre-emphasis level                           */
  bool32                        bSwingNotsupported;                   /**< requested swing level not supported               */
  bool32                        bPreemphNotSupported;                 /**< requested preemphasis level not supported         */
  uint32                        uConfigDataLength;                    /**< Pre-emph and swing volt override data length      */
  HAL_DP_PeSwPairType           aOverrideValueLUT[4][4];              /**< Override values data set for Pe-Sw values         */
  uint16                        aValueMultiplierList[2];              /**< Multiplier data for default Pe-Sw values          */
  uint32                        uLinkRateKhz;                         /**< Link rate being used in KHz                       */
} HAL_DP_PeSwConfigType;

/*!
 * \struct _HAL_DP_PllConfigType
 *
 *  Input info to config PLL 
 *
 */
typedef struct
{
   uint32                           uNumLanes;                        /* Number of lanes                        */
   uint32                           uLinkRateMbps;                    /* DP Link rate (per lane) in Mbps        */
   uint32                           uPixelClkMNDInputMhz;             /* input clk freq to pixel clk MND        */
   uint32                           uVoltSwingLevel;                  /* Lane voltage swing level               */
   uint32                           uPreemphasisLevel;                /* Lane pre-emphasis level                */
   bool32                           bInvertedPlug;                    /* Cable plugged in reverse orientation   */
   bool32                           bReversePhyDataPath;              /* PHY data path reverse of type-c spec   */
   uint32                           uFlags;                           /* PLL config options, e.g, SSC mode 
                                                                          see HAL_DP_PllConfigFlagType          */
} HAL_DP_PllConfigType;

/*!
* \struct HAL_DP_AuxPhyCfgType
*
*  PHY settings for AUX 
*
*/
typedef struct
{
  uint32 *pDPAuxPhyCfg1Index;                                          /* Config Index for DP_PHY_AUX_CFG1 register*/
}HAL_DP_AuxPhyCfgType;

/*!
* \struct HAL_DP_PhyClksFreqCalcParams
*
*  Parameters that determine the PLL setting to be used
* 
*/
typedef struct
{
  uint32                 uLinkRateMbps;
  uint32                 uVcoDivClkFreqMHz;
  bool32                 bSSCEnabled;
  bool32                 eDeviceDPMode;
}HAL_DP_PhyClksFreqCalcParams;

/*!
* \struct HAL_DP_PhyClksFreq
*
*  Calculated phy clk frequencies generated by HW
*
*/
typedef struct
{
  double                 dVcoDivClkFreqMhz;
  double                 dLinkClkFreqMHz;
}HAL_DP_PhyClksFreq;

/*!
 * \struct HAL_DP_Phy_RateParams
 *
 *  setting for a particular link rate/ vco clocks
 *
 */
typedef struct {
  uint8 uHsclkSel;
  uint8 uLockCmpEn;
  uint8 uDecStart;
  uint8 uDivFracStart1;
  uint8 uDivFracStart2;
  uint8 uDivFracStart3;
  uint8 uCmnConfig;
  uint8 uLockCmp1;
  uint8 uLockCmp2;
  uint8 uPhyVcoDiv;
  uint8 uTunneledVCOTuneMap;
} HAL_DP_Phy_RateParams;

/*!
 * \struct HAL_DP_Phy_SSCParams
 *
 *  SSC setting for a particular link rate/ vco clocks
 *
 */
typedef struct {
  uint8 uSSCEnable;
  uint8 uAdjPer1;
  uint8 uSSCPer1;
  uint8 uSSCPer2;
  uint8 uStepSize1;
  uint8 uStepSize2;
} HAL_DP_Phy_SSCParams;

/*!
* \struct HAL_DP_PhyPllFunctionTable
*
* Defines the DP/PLL function table for functions to config PHY and PLL
*/
typedef struct
{
    bool32              (*HAL_DP_PHY_Config)                     (DP_DeviceIDType               eDPPhyId, 
                                                                  HAL_DP_PllConfigType         *pDPPhyConfigInfo,
                                                                  DP_DeviceModeType             eDeviceDPMode);    

    void                (*HAL_DP_PHY_Reset)                      (DP_DeviceIDType               eDPPhyId,
                                                                  DP_PHYResetFlagType           eModules);    

    void                (*HAL_DP_PHY_AUX_Init)                   (DP_DeviceIDType               eDPPhyId,
                                                                  DP_DeviceModeType             eDeviceDPMode);

    HAL_MDSS_ErrorType  (*HAL_DP_PHY_SetupPeSw)                  (DP_DeviceIDType               eDPPhyId,
                                                                  DP_DeviceModeType             eDeviceDPMode,
                                                                  HAL_DP_PeSwConfigType        *pPeSwConfig);

    void                (*HAL_DP_PHY_GetMaxPeSwLevel)            (DP_DeviceIDType               eDPPhyId, 
                                                                  uint32                       *uMaxPreemphLvl,
                                                                  uint32                       *uMaxVoltSwingLvl);

    HAL_MDSS_ErrorType  (*HAL_DP_PHY_AUXConfig)                  (DP_DeviceIDType               eDPPhyId,
                                                                  HAL_DP_AuxPhyCfgType         *pAuxPhyCfg);

    void                (*HAL_DP_PHY_SetPHYMode)                 (DP_DeviceIDType               eDPPhyId,
                                                                  DP_PHYModeType                ePHYMode);

    HAL_MDSS_ErrorType  (*HAL_DP_PHY_Power)                      (DP_DeviceIDType               eDPPhyId,
                                                                  bool32                        bPowerOn,
                                                                  DP_PHYPowerModuleType         uModules);

    void                (*HAL_DP_PHY_GetPLLStatus)               (DP_DeviceIDType               eDPPhyId,
                                                                  bool32                       *pbPLLLocked);
    
    HAL_MDSS_ErrorType  (*HAL_DP_PHY_GetCalcPhyClksFreq)         (DP_DeviceIDType               eDeviceId,
                                                                  HAL_DP_PhyClksFreqCalcParams *pPhyClksFreqCalcParams);

    void                (*HAL_DP_PHY_SelectPClockFrequencyTable) (DP_DeviceIDType               eDPPhyId,
                                                                  uint32                         uLinkRate,
                                                                  uint32                        uPclkFreq);

} HAL_DP_PhyPllFunctionTable;

/*--------------------------------------------------------------------------------------------
 *   Function prototypes
 *--------------------------------------------------------------------------------------------*/


/****************************************************************************
*
** FUNCTION: HAL_DP_PhyFxnsInit()
*/
/*!
* \DESCRIPTION
*   Initialize DP PHY/PLL function table
*
* \retval None
*
****************************************************************************/
void HAL_DP_PhyFxnsInit(void);

/****************************************************************************
*
** FUNCTION: HAL_DP_SetupPHYPeSwLevel()
*/
/*!
* \brief
*        Set up DP Lane Pre Emphasis and voltage swing level
*
* \param [in]     eDeviceId      - DP Device ID
* \param [in]     eDeviceDPMode  - DP Device mode
* \param [in/out] pPeSwConfig    - Pre-emphasis/Swing level settings.
*
* \retval  HAL_MDSS_ErrorType
*
*****************************************************************************/
HAL_MDSS_ErrorType HAL_DP_SetupPHYPeSwLevel(DP_DeviceIDType        eDeviceId,
                                            DP_DeviceModeType      eDeviceDPMode,
                                            HAL_DP_PeSwConfigType *pPeSwConfig);

/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_Config()
*/
/*!
* \DESCRIPTION
*           Configure DP PHY and PLL 
*
* \param [in]   eDeviceId             - DP Device ID
* \param [in]   HAL_DP_PllConfigType  - DP PHY PLL config info
* \param [in]   eDeviceDPMode         - DP Device mode
*
* \retval boolean  
*
****************************************************************************/
bool32 HAL_DP_PHY_Config(DP_DeviceIDType       eDeviceId,
                         HAL_DP_PllConfigType *pDPPllConfigInfo,
                         DP_DeviceModeType     eDeviceDPMode);

/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_Reset()
*/
/*!
* \DESCRIPTION
*           Reset DP PHY
*
* \param [in]     eDeviceId   - DP Device ID
*        [in]     eModules    - PHY module to reset
*
* \retval   
*
****************************************************************************/
void HAL_DP_PHY_Reset(DP_DeviceIDType     eDeviceId,
                      DP_PHYResetFlagType eModules);

/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_AUX_Init()
*/
/*!
* \DESCRIPTION
*           Configure DP AUX PHY
*
* \param [in]  eDeviceId      - DP Device ID
* \param [in]  eDeviceDPMode  - DP Device mode
*
* \retval   
*
****************************************************************************/
void HAL_DP_PHY_AUX_Init(DP_DeviceIDType eDeviceId, DP_DeviceModeType eDeviceDPMode);

/*********************************************************************************************
*
** FUNCTION: HAL_DP_PHY_GetMaxPeSwLevel()
*/
/*!
* \brief
*        Get max supported DP Lane Pre Emphasis and voltage swing levels
*
* \param [in]    eDeviceId        - DP Device ID
* \param [out]   uMaxPreemphLvl   - max Pre-emphasis level supported.
* \param [out]   uMaxVoltSwingLvl - max voltage swing level supported.
*
* \retval  void
*
**********************************************************************************************/
HAL_MDSS_ErrorType HAL_DP_PHY_GetMaxPeSwLevel(DP_DeviceIDType  eDeviceId,
                                              uint32          *uMaxPreemphLvl,
                                              uint32          *uMaxVoltSwingLvl);

/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_Power()
*/
/*!
* \DESCRIPTION
*           Power on/off DP PHY related HW blocks
*
* \param [in]     eDeviceId - DP Device ID
* \param [in]     bPowerOn  - TRUE: power on, FALSE: power off
* \param [in]     uModules  - HW module(s) to power on/off
*
* \retval   HAL_MDSS_ErrorType
*
****************************************************************************/
HAL_MDSS_ErrorType HAL_DP_PHY_Power(DP_DeviceIDType        eDeviceId,
                                    bool32                 bPowerOn,
                                    DP_PHYPowerModuleType  uModules);

/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_AUXConfig()
*/
/*!
* \DESCRIPTION
*           Power on/off DP PHY
*
* \param [in]     eDeviceId  - DP Device ID
* \param [in]     pAuxPhyCfg - Aux configuration
*
* \retval HAL_MDSS_ErrorType
*
****************************************************************************/
HAL_MDSS_ErrorType HAL_DP_PHY_AUXConfig(DP_DeviceIDType       eDeviceId,
                                        HAL_DP_AuxPhyCfgType *pAuxPhyCfg);

/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_SetPHYMode()
*/
/*!
* \DESCRIPTION
*           Set the PHY Mode to DP or USB SS
*
* \param [in]     eDeviceId   - DP Device ID
* \param [in]     ePHYMode    - PHY mode
*
* \retval
*
****************************************************************************/
void HAL_DP_PHY_SetPHYMode(DP_DeviceIDType    eDeviceId,
                           DP_PHYModeType     ePHYMode);

/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_GetPLLStatus()
*/
/*!
* \DESCRIPTION
*           Get DP PLL status
*
* \param [in]     eDeviceId   - DP Device ID
* \param [out]    pbPLLLocked - TRUE is DP PLL is locked, otherwise FALSE
*
* \retval void
*
****************************************************************************/
void HAL_DP_PHY_GetPLLStatus(DP_DeviceIDType      eDeviceId,
                             bool32              *pbPLLLocked);

/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_GetCalcPhyClksFreq()
*/
/*!
* \DESCRIPTION
*           Get calcualted phy clock frequencies for given SSC, Link parameters
*
* \param [in]     eDeviceId              - DP Device ID
* \param [in]     pPhyClksFreqCalcParams - Parameters required for calcualting phy clk values
* \param [out]    pCalcPhyClksFreq       - calcuated values of phy clocks
*
* \retval HAL_MDSS_ErrorType
*
****************************************************************************/
HAL_MDSS_ErrorType HAL_DP_PHY_GetCalcPhyClksFreq(DP_DeviceIDType eDeviceId,
                                                 HAL_DP_PhyClksFreqCalcParams *pPhyClksFreqCalcParams);

/****************************************************************************
*
** FUNCTION: HAL_DP_CalculatePhyFreq()
*/
/*!
* \DESCRIPTION
*         Calcualte phy clock frequencies for given SSC, phy parameters
*
* \param  [in]     pPhyRateParams           - Phy setting related to rate parameters
* \param  [in]     pPhySSCParams            - Phy SSC settings
* \param [out]     pCalcPhyClksFreq         - calcalted phy clk values
*
* \retval HAL_MDSS_ErrorType
*
****************************************************************************/
HAL_MDSS_ErrorType  HAL_DP_CalculatePhyFreq(HAL_DP_Phy_RateParams        *pPhyRateParams,
                                            HAL_DP_Phy_SSCParams         *pSSCParams,
                                            HAL_DP_PhyClksFreq           *pCalcPhyClksFreq);


/****************************************************************************
*
** FUNCTION: HAL_DP_PHY_SelectPClockFrequencyTable()
*/
/*!
* \DESCRIPTION
*           Select the frequency table based on uPclkFreq
*
* \param [in]     eDeviceId - DP Device ID
* \param [in]     uLinkRate - Link rate
* \param [in]     uPclkFreq - VCO clock frequency
*
* \retval None
*
****************************************************************************/
void HAL_DP_PHY_SelectPClockFrequencyTable(DP_DeviceIDType eDeviceId,
                                           uint32          uLinkRate, 
                                           uint32          uPclkFreq);

/* Function table initialization functions */
void HAL_DP_Qmp_1_4_0_PhyFxnsInit(HAL_DP_PhyPllFunctionTable *pFxnTable);
void HAL_DP_1_4_0_PhyFxnsInit(HAL_DP_PhyPllFunctionTable *pFxnTable);
void HAL_DP_Qmp_1_4_1_PhyFxnsInit(HAL_DP_PhyPllFunctionTable *pFxnTable);
void HAL_DP_1_4_1_PhyFxnsInit(HAL_DP_PhyPllFunctionTable *pFxnTable);


#endif  /* #define _HAL_DP_PHY_H_ */
