// Copyright (c) 2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
/**
 * @file IMemManager.idl
 *
 * Describes the interface for a service that tracks and provides
 * information for memory backed objects, this service returns access
 * information and access permissions for tracked memory objects.
 */
/** @cond */
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define IMemManager_ERROR_INVALID_MEMREGION INT32_C(10)

#define IMemManager_OP_getRegionInfo 0

static inline int32_t
IMemManager_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IMemManager_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IMemManager_getRegionInfo(Object self, Object region_val, uint64_t *addr_ptr, uint64_t *len_ptr, uint32_t *perm_ptr, Object *map_ptr)
{
  ObjectArg a[3]={{{0,0}}};
  struct {
    uint64_t m_addr;
    uint64_t m_len;
    uint32_t m_perm;
  } o;
  a[0].b = (ObjectBuf) { &o, 20 };
  a[1].o = region_val;

  int32_t result = Object_invoke(self, IMemManager_OP_getRegionInfo, a, ObjectCounts_pack(0, 1, 1, 1));

  *addr_ptr = o.m_addr;
  *len_ptr = o.m_len;
  *perm_ptr = o.m_perm;
  *map_ptr = a[2].o;

  return result;
}



