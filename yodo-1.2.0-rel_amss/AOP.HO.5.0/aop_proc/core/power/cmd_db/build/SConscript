#===========================================================================
# CmdDB build script
#
# Copyright (c) 2016-2019 by Qualcomm Technologies, Incorporated
# All Rights Reserved
# Qualcomm Proprietary/GTDR
#===========================================================================
import os
import re
import fnmatch
import itertools

#--------------------------------------------------------------------------- 
# Utility routine to search arc export and hsr file
#--------------------------------------------------------------------------- 
def cmd_db_arc_files(path='.', exportf=True):
    ver_files = []

    files = [f for f in os.listdir(path)]
    ptrn = re.compile(r'arc(_v[0-9]+)?_export.csv$') if exportf else \
           re.compile(r'arc(_v[0-9]+)?_hsr.csv$')

    for f in files:
        m = ptrn.match(f)
        if m is None:
            continue
        ver = m.group(1)
        if ver is None:
            ver = 1.0
        else:
            ver = float(ver[len('_v'):])
            ver = ver/10.0 if ver > 10.0 else ver

        ver_files.append((ver, os.path.join(path, f)))

    # Only one default file - mark specially for using with all versions.
    if len(ver_files) == 1 and ver_files[0][0] == 1.0:
        ver_files[0] = (0.0, ver_files[0][1])

    # sort on version (first in tuple)
    return sorted(ver_files)


#--------------------------------------------------------------------------- 
# Build setup
#--------------------------------------------------------------------------- 

Import('env')
env = env.Clone()

SRCPATH = ".."
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)
env.Append(CPPDEFINES = 'LEGACY_CMD_DB')                                        
env.Append(CFLAGS = '${ARMCC_STDC99_CMD}')

if env['MSM_ID'] in ['8250']:
    env.Append(CPPDEFINES = 'SM8250_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')

if env['MSM_ID'] in ['8350']:
    env.Append(CPPDEFINES = 'SM8350_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')

if env['MSM_ID'] in ['waipio']:
    env.Append(CPPDEFINES = 'WAIPIO_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')

if env['MSM_ID'] in ['kailua']:
    env.Append(CPPDEFINES = 'KAILUA_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')

if env['MSM_ID'] in ['hamoa']:
    env.Append(CPPDEFINES = 'HAMOA_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')

if env['MSM_ID'] in ['pinnacle']:
    env.Append(CPPDEFINES = 'PINNACLE_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')
    
if env['MSM_ID'] in ['kuno']:
    env.Append(CPPDEFINES = 'KUNO_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')
   
if env['MSM_ID'] in ['kapiti']:
    env.Append(CPPDEFINES = 'KAPITI_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')

if env['MSM_ID'] in ['makena','makenaau']:
    env.Append(CPPDEFINES = 'MAKENA_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')

if env['MSM_ID'] in ['Saipan']:
    env.Append(CPPDEFINES = 'Saipan_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')

if env['MSM_ID'] in ['cedros']:
    env.Append(CPPDEFINES = 'cedros_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')

if env['MSM_ID'] in ['kodiak']:
    env.Append(CPPDEFINES = 'KODIAK_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
	
if env['MSM_ID'] in ['Olympic']:
    env.Append(CPPDEFINES = 'Olympic_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')

if env['MSM_ID'] in ['fillmore']:
    env.Append(CPPDEFINES = 'FILLMORE_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')
	
if env['MSM_ID'] in ['aurora']:
    env.Append(CPPDEFINES = 'aurora_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')
    
if env['MSM_ID'] in ['lassen']:
    env.Append(CPPDEFINES = 'LASSEN_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')

if env['MSM_ID'] in ['netrani']:
    env.Append(CPPDEFINES = 'NETRANI_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')
    env.Append(CCFLAGS    = ' -mlong-calls')
	
if env['MSM_ID'] in ['lanai']:
    env.Append(CPPDEFINES = 'LANAI_TARGET_CONFIG')
    env.Append(CPPDEFINES = 'DDR_OFFLOADED_INIT')

if env['MSM_ID'] not in ['8250', 'Saipan', '8350', 'makena', 'cedros', 'waipio','kodiak','makenaau','fillmore','kailua','aurora','lassen','netrani', 'lanai','kapiti','pinnacle','hamoa']:
    env.Append(CFLAGS = '-DCMD_DB_IN_DDR') #No need since address translation in HW MMU

#check if DTS file exists
#else use the files genera

TARGET_DIR = '../target/${MSM_ID}'
CFG_FILE = env.RealPath(TARGET_DIR + '/cmd_db_blob.dts')

if os.path.isfile(CFG_FILE):
    if env.Execute( 'python ../scripts/dtcompiler.py {target}'.format(
                target = env['MSM_ID'])
            ):
        env.PrintError('Unable to create DTB from DTS; check if DTC is installed or run manually. Exiting!!!')
        sys.exit(1)
     
    print "DT PARSER: cmd_db_blob.c file was created"
else:
    print "DT PARSER: cmd_db_blob.dts does not exist"                     


# FEATURE CONFIG:
#env.Append(CPPDEFINES=['RPMH_OFFTARGET_TEST'])
#env.Append(CPPDEFINES=['OFFTARGET_MSM_ID'])

CBSP_API = [
  'POWER',
  'SYSTEMDRIVERS',
  # needs to be last also contains wrong comdef.h
  'KERNEL',
]

if env.has_key('ADSP_PROC') or env.has_key('MODEM_PROC'):
    env['RPMH_IMAGE_OS'] = 'dal'
elif env.has_key('AOP_IMAGE'):
    env['RPMH_IMAGE_OS'] = 'rex'
else:
    env['RPMH_IMAGE_OS'] = 'stubs'

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
env.RequireProtectedApi(CBSP_API)

if not env.PathExists('${BUILD_ROOT}/core/power/cmd_db/target/${MSM_ID}'):
  env['MSM_ID'] = 'stubs'
  env.PrintWarning('!!Using stubbed config/target for CMDDB!!')

env.PublishPrivateApi('CMD_DB', [
   '${BUILD_ROOT}/core/power/cmd_db/common',
   '${BUILD_ROOT}/core/power/cmd_db/target/${MSM_ID}',
])

COMMONPATH = os.path.join('..', 'common')
TARGETPATH = os.path.join('..', 'target', env['MSM_ID'])

source_patterns = ['*.c', '*.cpp']
sources = []

#common sources
for root, dirnames, filenames in os.walk(COMMONPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = ['${BUILDPATH}' + os.path.join(root, filename)[2:] for filename in matches]
    sources.extend(matches)

#target sources
for root, dirnames, filenames in os.walk(TARGETPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = ['${BUILDPATH}' + os.path.join(root, filename)[2:] for filename in matches]
    sources.extend(matches)

# Adding settings files to R-init builder - the builder detects presence
# of any .rinit files
if 'USES_RINIT_PARSER' in env:
    rinit_path = '${BUILD_ROOT}/core/power/cmd_db/target/${MSM_ID}'
    if env.PathExists(rinit_path):
        env.AddRinitInfo('CORE_AOP', {'files' : rinit_path})

# Adding cmd_db arc export and hsrs for consistency check
if 'USES_CMD_DB_CHECK' in env:
    if env['BUILD_ID'] not in ['AAAAANAZO'] and \
       env['MSM_ID'] not in ['Saipan', 'stubs', 'makena', 'waipio']:         # Once fixed remove Saipan check
        target_data_path = '${BUILD_ROOT}/core/power/cmd_db/scripts/${MSM_ID}'
        target_data_path = env.RealPath(target_data_path)
        params = {
            'arc_cmd_db' : cmd_db_arc_files(target_data_path, True),
            'arc_hsr' : cmd_db_arc_files(target_data_path, False)
        }
        env.AddCmdDBCheck('CORE_AOP', params)

        # Adding manifest/output file for scons
        checker_op_files = ['${BUILDPATH}/target/${MSM_ID}/cmd_db_verify.txt']
        checker_out = env.CmdDBChecker(checker_op_files, None)
        sources.append(checker_out)


env.AddBinaryLibrary(['CORE_AOP'],'${BUILDPATH}/${MSM_ID}/cmd_db', sources)

