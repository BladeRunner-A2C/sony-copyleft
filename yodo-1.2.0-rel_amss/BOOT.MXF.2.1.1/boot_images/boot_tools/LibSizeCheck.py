#!/usr/bin/env python

#============================================================================
#
# @file LibSizeCheck.py
#
# GENERAL DESCRIPTION
#   Unified script for checking each lib size with each lib size maximum limit
#
#  Copyright (c) 2019 - 2020,2022 Qualcomm Technologies, Inc.  All Rights Reserved.
#  Qualcomm Technologies Proprietary and Confidential.
#
#----------------------------------------------------------------------------
#
#                          EDIT HISTORY FOR MODULE
#
# This section contains comments describing changes made to the module.
# Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     -----------------------------------------------------------
# 07/13/22   rama    Added option for target specific config file
# 02/27/20   yps     Make script compatible with python2 and python3
# 11/15/19   sp      Added checks to exit on error
# 04/29/19   yps     Initial release

from __future__  import print_function
from optparse import OptionParser
import os
import sys
import re
import json
 
sys.path.append(os.path.join(os.path.dirname(sys.argv[0]),'..'))
from delcomments import *

def main():
  str=[]
  parser = OptionParser()

  parser.add_option('-m', '--mapitoutputfile', default="",
                    help="Per lib/driver size break-up file generated by mapit.py" + \
                         "Example: \n" + "  -m XBLLoader_mapit_bootimem_ocimem.txt", )
                         
  parser.add_option('-c', '--config', default="",
                    help="Input json file with maximum allowed size for each lib/driver " + \
                         "Example: \n  -c libssizecfg.json ")
  
  parser.add_option('-t', '--targetspecificconfig', default="",
                    help="Input Target specific json file with maximum allowed size for each lib/driver" + \
                          "if the same library is present in both config and target specific jsons, target specific limit will be considered")
                          
  parser.add_option("-j", "--logfile", default="")       
                   
  (options, args) = parser.parse_args()
  if options.config:
    if not os.path.exists(options.config):
      print(options.config + " not found", file=sys.stderr)
      sys.exit(0)
    else:
      libconfg=remove_json_comments(options.config,None)
      commonlibconfigdirt = json.loads(libconfg)
  else:
    print("Please input config file", file=sys.stderr)
    sys.exit(1)

  if options.targetspecificconfig:
    if not os.path.exists(options.targetspecificconfig):
      print(options.targetspecificconfig + "not found", file=sys.stderr)
      sys.exit(0)
    else:
      targetlibconfig=remove_json_comments(options.targetspecificconfig,None)
      targetlibconfigdirt = json.loads(targetlibconfig)
    
  try:
    f = open(options.mapitoutputfile,"r")
  except IOError:
    print(options.maptxt + "does not exist!")
    sys.exit(2)
  success = True
  file=open(options.logfile,"w")
  file.write('{0:35} {1:15} {2:6}\n'.format('Lib_Name','Current_Size','Max_Limit'))
  for line in f.readlines():       
      str = line.split()
      if (str[0] == "CODE"):
        continue;
      if (str[7] == "Overall"):
        break;

      if options.targetspecificconfig and str[7].split(".")[0] in targetlibconfigdirt['loaderlibs']:
        libconfigdirt = targetlibconfigdirt
      elif str[7].split(".")[0] in commonlibconfigdirt['loaderlibs']:
        libconfigdirt = commonlibconfigdirt
      else:
        print("ERROR:", str[7],"not present in target specific or common config files. Please add the library in the appropriate libssizecfg.json")
      max_limit = libconfigdirt['loaderlibs'][str[7].split(".")[0]]['maximum size']
      if (int(str[5]) > int(max_limit)):
        print("ERROR: ",str[7]," size (",str[5],") exceeds the maximum limit(",int(max_limit),") in ",options.config if libconfigdirt == commonlibconfigdirt else options.targetspecificconfig, file=sys.stderr)
        success = False
      file.write('{0:35} {1:15} {2:6}\n'.format(str[7],str[5],max_limit))
  file.close()
  if success == False:
   print("Please optimize lib size.", file=sys.stderr)
   sys.exit(1)
  return 0
  
if __name__ == "__main__":
  main()  
