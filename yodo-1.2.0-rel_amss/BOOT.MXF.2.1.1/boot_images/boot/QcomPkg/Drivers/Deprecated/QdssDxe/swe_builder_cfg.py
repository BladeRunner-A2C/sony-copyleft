#===============================================================================
#
# Builder to generate a tracer header files containing a list of sw events
#
# GENERAL DESCRIPTION
#    Autogenerate SW event header file from a configuration file
#    (tracer_event.cfg).
#
# OVERVIEW:
#    swe_make_header()
#          Use the SW event configuration file to generate
#          the event ids header file (tracer_event_ids.h).
#
#===============================================================================
#
# Copyright (c) 2015 Qualcomm Technologies, Inc.
# All rights reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/dev/core.boot/6.1/boxiren.core.boot.6.1.boot_0314/QcomPkg/Drivers/QdssDxe/swe_builder_cfg.py#1 $
#
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 9/14/15    LHT     Generate tracer_event_ids.h _tbl.h and _info.txt
#===============================================================================

import sys
import os
import string
import binascii

#------------------------------------------------------------------------------
# Globals
#------------------------------------------------------------------------------


def swe_builder(GenFilePath="", ConfigFile='tracer_event.cfg'):

    RVAL_SUCCESS=0
    RVAL_OPEN_CONFIG_FILE_ERR=1
    RVAL_CONFIG_FORMAT_ERR=2
    RVAL_OPEN_OUTPUT_FILE_ERR=3

    # Read SW events from configuration file into swe_event_descriptor
    idx = 0
    swe_event_descriptor = []
    print ("SWE Builder: Autogenerating files from " + ConfigFile)
    try:
        with open(ConfigFile, 'rt') as infile:
            for line in infile:
                entry = line.split('#')[0].strip()
                entry = entry.split('[')[0].strip()
                if entry != "":
                    item = [x.strip() for x in entry.split(',')]
                    if len(item) != 3:
                       print("SWE Builder: Config file format err")
                       exit(RVAL_CONFIG_FORMAT_ERR)
                    swe_event_descriptor.insert(idx, item) # Add item to list
                    idx += 1 # Order maintained for same prefix

    except IOError:
        print("SWE Builder: Open config file err")
        exit(RVAL_OPEN_CONFIG_FILE_ERR)

    # Compute CRC over the event names
    crc = binascii.crc32("QDSS") & 0xFFFFFFFF
    for item in swe_event_descriptor:
        crc = binascii.crc32(item[0], crc) & 0xFFFFFFFF

    # Set PROC_CONFIG according to the build being placed in.
    # Hardcoded to 'BOOT'.
    PROC_CONFIG = 'BOOT'

    # Set "subsys" according to the build being placed in.
    # Hardcoded to 'BOOT'.
    subsys = 'BOOT'

    # Want these tags to physically appear each file.
    header_tags = '#ifndef EVENT_TABLE_TAG\n' \
                  '#define EVENT_TABLE_TAG \"{0}' + \
                      '0000' + format(crc, '08X') + '\"\n' \
                  '#define EVENT_PROCESSOR \"' + \
                      PROC_CONFIG + '\"\n' \
                  '#define EVENT_SUBSYSTEM ' + subsys + '\n' \
                  '#endif\n\n'

    #
    # File: tracer_event_ids.h
    #
    tracer_event_ids = os.path.join(GenFilePath,"tracer_event_ids.h")
    try:
        tracer_event_ids_h = open(tracer_event_ids, 'w')
    except IOError:
       print("SWE Builder: Open id file err")
       exit(RVAL_OPEN_OUTPUT_FILE_ERR)

    # Generate the tracer event id enumeration file
    event_id_filename = os.path.split(tracer_event_ids)[1].split('.')[0]
    tracer_event_ids_h.write("""
/*=============================================================================

FILE:         tracer_event_ids.h

DESCRIPTION:  

================================================================================
            Copyright (c) 2015 Qualcomm Technologies, Inc.
                         All Rights Reserved.
          Qualcomm Technologies Proprietary and Confidential
==============================================================================*/

""");

    tracer_event_ids_h.write('#ifndef _'+event_id_filename.upper()+'_H\n')
    tracer_event_ids_h.write('#define _'+event_id_filename.upper()+'_H\n\n')
    tracer_event_ids_h.write('// File autogenerated by swe_builder.\n\n')
    tracer_event_ids_h.write(header_tags.format('QDSS_TAG_'))

    tracer_event_ids_h.write('enum tracer_event_id_enum {\n')
    tracer_event_ids_h.write('\tTRACER_EVENT_RESERVE_0=0,\n')
    for item in swe_event_descriptor:
        tracer_event_ids_h.write('\t')
        tracer_event_ids_h.write(item[0])
        tracer_event_ids_h.write(',\n')
    tracer_event_ids_h.write('\tTRACER_EVENT_ID_MAX,\n')
    tracer_event_ids_h.write('\tTRACER_EVENT_RESERVE_LAST=0x00FFFFFF,\n')
    tracer_event_ids_h.write('\tTRACER_EVENT_ALL=0x7FFFFFFF,\n')
    tracer_event_ids_h.write('};\n\n')

    maskVal = 0
    maskCnt = 1    #Account for TRACER_EVENT_RESERVE_0 event

    tracer_event_ids_h.write('#ifndef TRACER_EVENT_PREENABLE_SCONS\n')
    tracer_event_ids_h.write('#define TRACER_EVENT_PREENABLE_SCONS {\\\n')
    for item in swe_event_descriptor:
        if '1' == item[2]:
            maskVal = maskVal | (1 << maskCnt)
        maskCnt += 1
        if 32 <= maskCnt:
            tracer_event_ids_h. write('\t' + hex(maskVal) + ',\\\n')
            maskVal = 0
            maskCnt = 0
    if 0 < maskCnt:
        tracer_event_ids_h. write('\t' + hex(maskVal) + '\\\n')
    tracer_event_ids_h.write('}\n')
    tracer_event_ids_h.write('#endif\n\n')

    tracer_event_ids_h.write('#endif // _'+event_id_filename.upper()+'_H\n\n')
    tracer_event_ids_h.close()

    #
    # File: tracer_event_tbl.h
    #
    tracer_event_tbl = os.path.join(GenFilePath,"tracer_event_tbl.h")
    try:
        tracer_event_tbl_h = open(tracer_event_tbl, 'w')
        event_table_filename=os.path.split(tracer_event_tbl)[1].split('.')[0]
    except IOError:
       print("SWE Builder: Open tbl file err")
       exit(RVAL_OPEN_OUTPUT_FILE_ERR)

    # Generate the tracer event table file
    tracer_event_tbl_h.write("""
/*=============================================================================
            Copyright (c) 2015 Qualcomm Technologies, Inc.
                         All Rights Reserved.
          Qualcomm Technologies Proprietary and Confidential
==============================================================================*/

""");

    tracer_event_tbl_h.write('#ifndef _'+event_table_filename.upper()+'_H\n')
    tracer_event_tbl_h.write('#define _'+event_table_filename.upper()+'_H\n\n')
    tracer_event_tbl_h.write('// File autogenerated by swe_builder.\n\n')

    tracer_event_tbl_h.write('#include \"'+event_id_filename+'.h\"\n\n')
    tracer_event_tbl_h.write(header_tags.format(''))

    tracer_event_tbl_h.write('typedef struct _tracer_event_item {\n')
    tracer_event_tbl_h.write('\tenum tracer_event_id_enum evt_id;\n')
    tracer_event_tbl_h.write('\tchar *evt_str;\n')
    tracer_event_tbl_h.write('\tchar pre_enable;\n')
    tracer_event_tbl_h.write('} tracer_event_item;\n\n')

    tracer_event_tbl_h.write('tracer_event_item tracer_event_tbl[] = {\n')
    tracer_event_tbl_h.write('\t{TRACER_EVENT_RESERVE_0,"Tracer reserve0",\'0\'},\n')
    for item in swe_event_descriptor:
        tracer_event_tbl_h.write('\t{')
        tracer_event_tbl_h.write(item[0])
        tracer_event_tbl_h.write(',')
        tracer_event_tbl_h.write(item[1])
        tracer_event_tbl_h.write(',\'')
        tracer_event_tbl_h.write(item[2].upper())
        tracer_event_tbl_h.write('\'},\n')
    tracer_event_tbl_h.write('\t{TRACER_EVENT_ID_MAX,"Tracer event MAX",\'0\'}\n')
    tracer_event_tbl_h.write('};\n\n')

    tracer_event_tbl_h.write('#endif // _'+ \
                             event_table_filename.upper()+'_H\n\n')

    tracer_event_tbl_h.close()

    #
    # File: tracer_event_info.txt
    #
    tracer_event_info = os.path.join(GenFilePath,"tracer_event_info.txt")
    try:
        tracer_event_info_txt = open(tracer_event_info, 'w')
        event_info_filename=os.path.split(tracer_event_info)[1]
    except IOError:
       print("SWE Builder: Open event info text file err")
       exit(RVAL_OPEN_OUTPUT_FILE_ERR)

    info_file_format_version = '1'
    info_instruction_prefix = 'swt \"'+subsys+'\" info \"event\" '

    # Generate the tracer event info file
    tracer_event_info_txt.write('# File: '+event_info_filename+'\n')
    tracer_event_info_txt.write('# File autogenerated by swe_builder.\n')
    tracer_event_info_txt.write('swt info format '+info_file_format_version+'\n')
    tracer_event_info_txt.write(info_instruction_prefix+'tags \"'+ \
        PROC_CONFIG + '\" \"0000'+format(crc,'08X')+'\"\n')

    info_instruction_prefix += 'id '
    event_count = 1;

    tracer_event_info_txt.write(info_instruction_prefix + \
        '0 TRACER_EVENT_RESERVE_0 \"Tracer reserve0\" 0\n')
    for item in swe_event_descriptor:
        tracer_event_info_txt.write(info_instruction_prefix)
        tracer_event_info_txt.write(repr(event_count))
        tracer_event_info_txt.write(' '+ item[0]+' '+item[1]+' ')
        tracer_event_info_txt.write(item[2] +'\n')
        event_count += 1
    tracer_event_info_txt.write(info_instruction_prefix)
    tracer_event_info_txt.write(repr(event_count))
    tracer_event_info_txt.write(' TRACER_EVENT_ID_MAX \"Tracer event MAX\" 0\n\n')

    tracer_event_info_txt.close()

    exit(0)

if __name__ == "__main__":
   swe_builder(sys.argv[1], sys.argv[2])


