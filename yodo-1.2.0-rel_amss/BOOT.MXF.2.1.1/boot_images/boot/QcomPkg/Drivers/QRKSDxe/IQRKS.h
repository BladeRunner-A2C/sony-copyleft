// Copyright (c) 2022 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
#pragma once
// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

#define IQRKS_OPT_FAST_REPORT UINT64_C(0x00000001)
#define IQRKS_OPT_LATEST_REPORT UINT64_C(0x00000002)
#define IQRKS_OPT_FULL_REPORT UINT64_C(0x00000004)
#define IQRKS_OPT_INTEGRITY_ONLY UINT64_C(0x00000008)

#define IQRKS_ERROR_NO_MEM INT32_C(10)
#define IQRKS_ERROR_NO_LICENSE_FILE INT32_C(11)
#define IQRKS_ERROR_INVALID_LICENSE INT32_C(12)
#define IQRKS_ERROR_BUFFER_TOO_SMALL INT32_C(13)
#define IQRKS_ERROR_CBOR_FAILURE INT32_C(14)
#define IQRKS_ERROR_NO_MPDATA INT32_C(15)
#define IQRKS_ERROR_KP_NOT_ENABLED INT32_C(16)

#define IQRKS_OP_GetReport 0
#define IQRKS_OP_MPProvisionStatus 1
#define IQRKS_OP_getMPData 2
#define IQRKS_OP_CheckLicenseKP 3

static inline int32_t
IQRKS_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IQRKS_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IQRKS_GetReport(Object self, const void *license_ptr, size_t license_len, uint64_t flags_val, void *data_ptr, size_t data_len, size_t *data_lenout)
{
  ObjectArg a[3]={{{0,0}}};
  a[0].bi = (ObjectBufIn) { license_ptr, license_len * 1 };
  a[1].b = (ObjectBuf) { &flags_val, sizeof(uint64_t) };
  a[2].b = (ObjectBuf) { data_ptr, data_len * 1 };

  int32_t result = Object_invoke(self, IQRKS_OP_GetReport, a, ObjectCounts_pack(2, 1, 0, 0));

  *data_lenout = a[2].b.size / 1;

  return result;
}

static inline int32_t
IQRKS_MPProvisionStatus(Object self, uint32_t *status_ptr)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { status_ptr, sizeof(uint32_t) };

  return Object_invoke(self, IQRKS_OP_MPProvisionStatus, a, ObjectCounts_pack(0, 1, 0, 0));
}

static inline int32_t
IQRKS_getMPData(Object self, void *mpdatabuf_ptr, size_t mpdatabuf_len, size_t *mpdatabuf_lenout)
{
  ObjectArg a[1]={{{0,0}}};
  a[0].b = (ObjectBuf) { mpdatabuf_ptr, mpdatabuf_len * 1 };

  int32_t result = Object_invoke(self, IQRKS_OP_getMPData, a, ObjectCounts_pack(0, 1, 0, 0));

  *mpdatabuf_lenout = a[0].b.size / 1;

  return result;
}

static inline int32_t
IQRKS_CheckLicenseKP(Object self)
{
  return Object_invoke(self, IQRKS_OP_CheckLicenseKP, 0, 0);
}



