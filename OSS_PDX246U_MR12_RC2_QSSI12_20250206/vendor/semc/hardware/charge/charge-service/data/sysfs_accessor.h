/*********************************************************************
 * Copyright (c) 2018 Sony Mobile Communications Inc.                *
 * All rights, including trade secret rights, reserved.              *
 *********************************************************************/
#ifndef _SYSFS_ACCESSOR_H_
#define _SYSFS_ACCESSOR_H_

typedef enum {
	/* PATH_BATTERY */
	SFID_CAPACITY = 0,
	SFID_STATUS,
	SFID_HEALTH,
	SFID_TEMP,
	SFID_VOLTAGE_NOW,
	SFID_CURRENT_NOW,
	SFID_BATT_TYPE,
	SFID_CHARGE_FULL,
	SFID_CHARGE_FULL_DESIGN,
	SFID_TIME_TO_FULL_NOW,

	/* PATH_USB */
	SFID_USB_ONLINE,
	SFID_USB_CURRENT_NOW,
	SFID_USB_VOLTAGE_NOW,
	SFID_USB_TYPE_DETERMINED,
	SFID_USB_ICL,

	/* PATH_DC */
	SFID_DC_ONLINE,
	SFID_DC_VOLTAGE_NOW,
	SFID_DC_CURRENT_MAX,

	/* PATH_QCOM_BATTERY */
	SFID_USB_TYPE,
	SFID_WIRELESS_BOOST_EN,
	SFID_RESISTANCE,

	/* PATH_BATTCHG_EXT */
	SFID_USB_INPUT_SUSPEND,
	SFID_LRC_CHARGE_DISABLE,
	SFID_LRC_INPUT_SUSPEND,
	SFID_SYSTEM_STATUS,
	SFID_BATT_ID,
	SFID_AGING_LEVEL,
	SFID_BATTERY_SOC,
	SFID_SYSTEM_SOC,
	SFID_MONOTONIC_SOC,
	SFID_REAL_NOM_CAP,
	SFID_SMT_CHARGING_STATUS,
	SFID_BATT_TEMP,
	SFID_REAL_TEMP,
	SFID_TYPEC_MODE,
	SFID_VCELL_MAX,
	SFID_SYSTEM_TEMP_LEVEL,
	SFID_SYSTEM_TEMP_LEVEL_MAX,
	SFID_WLS_VRECT,
	SFID_WLS_VOUT,
	SFID_WLS_IOUT,
	SFID_WLS_STATUS,
	SFID_WLS_TYPE,
	SFID_WLS_MFR_CODE,
	SFID_CURRENT_ICL,
	SFID_TARGET_ICL,
	SFID_CURRENT_VOUT,
	SFID_TARGET_VOUT,
	SFID_SDM_THERM,
	SFID_CURRENT_STEP_PHASE,
	SFID_CURRENT_JEITA_ZONE,
	SFID_BATTERY_CHARGER_STATUS,
	SFID_AICL_RESULT,
	SFID_D2CP_CFG,
	SFID_ICM_STATE,
	SFID_FV,
	SFID_FCC,
	SFID_WLS_TXID,
	SFID_WLC_TYPE,
	SFID_LEARNED_CAPACITY,
	SFID_LEARNING_COUNT,
	SFID_RESTORED_CAPACITY,
	SFID_USB_ICL_VOTABLE_STATUS,
	SFID_FCC_VOTABLE_STATUS,
	SFID_FAKE_CHG_VOTABLE_STATUS,
	SFID_FAKE_CHG_DISALLOW_VOTABLE_STATUS,
	SFID_CHARGER_MAX_WATTAGE,
	SFID_ACTIVE_CHAGER_TYPE,
	SFID_FCSS_ERR_CNT,
	SFID_WEAK_LIMIT_CURRENT,

	/* PATH_THERMAL */
	SFID_THERMAL_ZONE_SDM_THERM,

	/* PATH_BATTMAN_DBG */
	SFID_REGUPDATE_INTERVAL,
	SFID_BMLOG_INTERVAL,
	SFID_BMLOG_CATEGORIES,
	SFID_BMLOG_LEVEL,
	SFID_REG_CHGR_CHARGER_STATUS,
	SFID_REG_CHGR_VBAT_STATUS,
	SFID_REG_CHGR_VBAT_STATUS2,
	SFID_REG_CHGR_IBAT_STATUS,
	SFID_REG_CHGR_VFLT_STATUS,
	SFID_REG_CHGR_INT_RT_STS,
	SFID_REG_CHGR_ICHG_STATUS,
	SFID_REG_CHG_ENABLED,
	SFID_REG_FAST_CHG_CURRENT_CFG,
	SFID_REG_FLOAT_VOLTAGE_CFG,
	SFID_REG_ICL_MAX_STATUS,
	SFID_REG_AICL_STATUS,
	SFID_REG_ICL_STATUS,
	SFID_REG_POWER_PATH_STATUS,
	SFID_REG_BST_STATUS,
	SFID_REG_DCDC_INT_RT_STS,
	SFID_REG_BATIF_TEMP_STATUS,
	SFID_REG_BATIF_INT_RT_STS,
	SFID_REG_BATIF_SHIP_MODE,
	SFID_REG_USBIN_INPUT_STATUS,
	SFID_REG_VUSB_STATUS,
	SFID_REG_APSD_STATUS,
	SFID_REG_APSD_RESULT_STATUS,
	SFID_REG_USB_INT_RT_STS,
	SFID_REG_USBIN_ADAPTER_ALLOW_OVERRIDE,
	SFID_REG_USBIN_ADAPTER_ALLOW_CFG,
	SFID_REG_APSD_ENABLED,
	SFID_REG_USBIN_CURRENT_LIMIT_CFG,
	SFID_REG_USB_CMD_IL,
	SFID_REG_WLS_INPUT_STATUS,
	SFID_REG_WLS_VWLS_STATUS,
	SFID_REG_WLS_INT_RT_STS,
	SFID_REG_WLS_ADAPTER_ALLOW_CFG,
	SFID_REG_WLS_ICL_CFG,
	SFID_REG_WLS_SUSPEND,
	SFID_REG_TYPEC_SNK_STATUS,
	SFID_REG_TYPEC_SNK_DBG_ACS_STATUS,
	SFID_REG_TYPEC_SRC_STATUS,
	SFID_REG_TYPEC_STAT_MCN_STATUS,
	SFID_REG_TYPEC_MISC_STATUS,
	SFID_REG_TYPEC_TRY_SNK_SRC_STATUS,
	SFID_REG_TYPEC_LGCY_CBL_STATUS,
	SFID_REG_TYPEC_INT_RT_STS,
	SFID_REG_TYPEC_MODE_CFG,
	SFID_REG_MISC_AICL_STATUS,
	SFID_REG_MISC_WDOG_STATUS,
	SFID_REG_MISC_SYSOK_REASON_STATUS,
	SFID_REG_MISC_INT_RT_STS,

	/* PATH_BATTMAN_DBG2 */
	SFID_IUSB0_TOT_VOTABLE_STATUS,
	SFID_FCC_0_VOTABLE_STATUS,
	SFID_FV_0_VOTABLE_STATUS,
	NUM_SFIDS
} SYSFS_PARAM_ID;

/* Value of PARAM_STATUS */
enum {
	STATE_DISCHARGE,
	STATE_CHARGE,
	STATE_FULL,
};

/* Value of PARAM_HEALTH */
enum {
	HEALTH_NORMAL,
	HEALTH_WARM,
	HEALTH_HOT,
};

/* Value of PARAM_HEALTH_* (be careful not to mistake it for PARAM_HEALTH) */
enum {
	TEMP_CONDITION_DEFAULT = 0,
	TEMP_CONDITION_COLD,
	TEMP_CONDITION_COOL,
	TEMP_CONDITION_NORMAL,
	TEMP_CONDITION_WARM,
	TEMP_CONDITION_HOT,
};

/* Value of PARAM_SYSTEM_STATUS */
enum {
	SYSTEM_STATUS_BOOTUP,
	SYSTEM_STATUS_POWER_OFF_CHARGE,
	SYSTEM_STATUS_STARTUP,
	SYSTEM_STATUS_ANDROID,
	SYSTEM_STATUS_SHUTDOWN,
};

/* Value of PARAM_BATT_TYPE */
enum {
	BATT_TYPE_UNKNOWN,
	BATT_TYPE_LOADING,
	BATT_TYPE_NAGARA,
	BATT_TYPE_YODO,
	BATT_TYPE_HUAQIN,
};

/* value of PARAM_WLC_TYPE */
enum {
	WIRELESS_UNKNOWN_CHARGER,
	WIRELESS_QI_BPP_CHARGER,
	WIRELESS_QI_EPP_CHARGER,
	NUM_WIRELESS_CHARGER_TYPE,
};

/* value of PARAM_USB_TYPE */
enum {
	USB_TYPE_UNKNOWN,
	USB_TYPE_SDP,
	USB_TYPE_DCP,
	USB_TYPE_CDP,
	USB_ACA,
	USB_TYPE_C,
	USB_TYPE_PD,
	USB_TYPE_PD_DPR,
	USB_TYPE_PD_PPS,
	USB_TYPE_BRICKID,
	USB_TYPE_HVDCP,
	USB_TYPE_HVDCP_3,
	USB_TYPE_HVDCP_3P5,
};

/* value of PARAM_TYPEC_MODE */
enum {
	TYPEC_MODE_NOCONSUMER,
	TYPEC_MODE_TYPEC_DFT,
	TYPEC_MODE_BC,
	TYPEC_MODE_PD,
	TYPEC_MODE_TYPEC_1P5A,
	TYPEC_MODE_TYPEC_3A,
	TYPEC_MODE_UNKNOWN,
};

/* Value of ACTIVE_CHAGER_TYPE */
enum {
      SSDEV_PARTNER_NONE,
      SSDEV_PARTNER_UNKNOWN,
      SSDEV_PARTNER_SNK_USB_SDP,
      SSDEV_PARTNER_SNK_USB_OCP,
      SSDEV_PARTNER_SNK_USB_CDP,
      SSDEV_PARTNER_SNK_USB_DCP,
      SSDEV_PARTNER_SNK_USB_FLOAT,
      SSDEV_PARTNER_SNK_TYPEC_DEFAULT,
      SSDEV_PARTNER_SNK_TYPEC_RP_MEDIUM_1P5A,
      SSDEV_PARTNER_SNK_TYPEC_RP_HIGH_3A,
      SSDEV_PARTNER_SNK_DEBUG_ACCESS,
      SSDEV_PARTNER_SNK_USB_QC_2P0,
      SSDEV_PARTNER_SNK_USB_QC_3P0,
      SSDEV_PARTNER_SNK_USB_QC_3P5,
      SSDEV_PARTNER_SNK_UFCS,
      SSDEV_PARTNER_SNK_PD,
      SSDEV_PARTNER_SNK_PPS,
      SSDEV_PARTNER_SRC_TYPEC_POWERCABLE,
      SSDEV_PARTNER_SRC_TYPEC_UNORIENTED_DEBUG_ACCESS,
      SSDEV_PARTNER_SRC_TYPEC_AUDIO_ACCESS,
      SSDEV_PARTNER_WLS_SRC_BPP,
      SSDEV_PARTNER_WLS_SNK_BPP,
      SSDEV_PARTNER_WLS_SNK_EPP,
      SSDEV_PARTNER_WLS_SNK_PDDE,
      SSDEV_PARTNER_INVALID,
};

struct sysfs_param_t {
	void *buff_ptr;
	char *raw;
	int val_type;
	union {
		char	*strval;
		int	intval;
		float	floatval;
	};
};

enum {
	SYSFS_PARAM_VAL_STR,
	SYSFS_PARAM_VAL_INT,
	SYSFS_PARAM_VAL_FLOAT,
	SYSFS_PARAM_VAL_INVALID = -1,
};

int read_sysfs_params(struct sysfs_param_t *sysfs_param, bool *sysfs_param_enabled);
void cleanup_sysfs_params(struct sysfs_param_t *sysfs_param);
int write_sysfs_param(const SYSFS_PARAM_ID id, struct sysfs_param_t *sysfs_value);

#endif /* _SYSFS_ACCESSOR_H_ */
