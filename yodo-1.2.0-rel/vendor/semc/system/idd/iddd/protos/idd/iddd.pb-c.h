/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_idd_2fiddd_2eproto__INCLUDED
#define PROTOBUF_C_idd_2fiddd_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Iddd__UserConsent Iddd__UserConsent;
typedef struct _Iddd__Settings Iddd__Settings;
typedef struct _Iddd__RunActions Iddd__RunActions;
typedef struct _Iddd__RunActionsOnce Iddd__RunActionsOnce;
typedef struct _Iddd__FilterItem Iddd__FilterItem;
typedef struct _Iddd__Filter Iddd__Filter;
typedef struct _Iddd__FilterConfig Iddd__FilterConfig;
typedef struct _Iddd__ConfigPlugin Iddd__ConfigPlugin;
typedef struct _Iddd__ConfigPlugin__Plugin Iddd__ConfigPlugin__Plugin;


/* --- enums --- */

typedef enum _Iddd__UserConsent__Type {
  IDDD__USER_CONSENT__TYPE__NONE = 0,
  IDDD__USER_CONSENT__TYPE__ANONYMOUS = 1,
  IDDD__USER_CONSENT__TYPE__ALL = 2
} Iddd__UserConsent__Type;
typedef enum _Iddd__Filter__Type {
  IDDD__FILTER__TYPE__INCLUDE = 1,
  IDDD__FILTER__TYPE__EXCLUDE = 2
} Iddd__Filter__Type;
typedef enum _Iddd__ConfigPlugin__Plugin__Type {
  IDDD__CONFIG_PLUGIN__PLUGIN__TYPE__REGULAR = 0,
  IDDD__CONFIG_PLUGIN__PLUGIN__TYPE__RCA = 1
} Iddd__ConfigPlugin__Plugin__Type;
typedef enum _Iddd__PluginId {
  IDDD__PLUGIN_ID__IDD = 0,
  IDDD__PLUGIN_ID__XD = 1,
  IDDD__PLUGIN_ID__RCA_COMPACT = 2,
  IDDD__PLUGIN_ID__RCA_EXTENDED = 3,
  IDDD__PLUGIN_ID__RCA_NONCRASH = 4,
  IDDD__PLUGIN_ID__RCA_BATTERY = 5,
  IDDD__PLUGIN_ID__PDA = 6
} Iddd__PluginId;

/* --- messages --- */

struct  _Iddd__UserConsent
{
  ProtobufCMessage base;
  Iddd__UserConsent__Type type;
};
#define IDDD__USER_CONSENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__user_consent__descriptor) \
    , 0 }


struct  _Iddd__Settings
{
  ProtobufCMessage base;
  protobuf_c_boolean has_max_report_size;
  uint32_t max_report_size;
  protobuf_c_boolean has_max_output_dir_size;
  uint32_t max_output_dir_size;
  protobuf_c_boolean has_permanently_disable;
  protobuf_c_boolean permanently_disable;
  protobuf_c_boolean has_expire_counters_age;
  uint32_t expire_counters_age;
  protobuf_c_boolean has_expire_sdata_age;
  uint32_t expire_sdata_age;
  char *study;
  protobuf_c_boolean has_wash_data;
  protobuf_c_boolean wash_data;
  protobuf_c_boolean has_use_imei;
  protobuf_c_boolean use_imei;
  protobuf_c_boolean has_use_android_id;
  protobuf_c_boolean use_android_id;
  Iddd__UserConsent *required_user_consent;
  protobuf_c_boolean has_use_xs_android_id;
  protobuf_c_boolean use_xs_android_id;
  protobuf_c_boolean has_use_xs_guid;
  protobuf_c_boolean use_xs_guid;
  protobuf_c_boolean has_is_builtin_config;
  protobuf_c_boolean is_builtin_config;
};
#define IDDD__SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__settings__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0 }


struct  _Iddd__RunActions
{
  ProtobufCMessage base;
  protobuf_c_boolean has_run_log_reader;
  protobuf_c_boolean run_log_reader;
  protobuf_c_boolean has_activate_xperia_diagnostics;
  protobuf_c_boolean activate_xperia_diagnostics;
};
#define IDDD__RUN_ACTIONS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__run_actions__descriptor) \
    , 0,0, 0,0 }


struct  _Iddd__RunActionsOnce
{
  ProtobufCMessage base;
  protobuf_c_boolean has_remove_reports;
  protobuf_c_boolean remove_reports;
};
#define IDDD__RUN_ACTIONS_ONCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__run_actions_once__descriptor) \
    , 0,0 }


struct  _Iddd__FilterItem
{
  ProtobufCMessage base;
  char *package;
  char *name;
};
#define IDDD__FILTER_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__filter_item__descriptor) \
    , NULL, NULL }


struct  _Iddd__Filter
{
  ProtobufCMessage base;
  Iddd__Filter__Type type;
  size_t n_item;
  Iddd__FilterItem **item;
};
#define IDDD__FILTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__filter__descriptor) \
    , 0, 0,NULL }


struct  _Iddd__FilterConfig
{
  ProtobufCMessage base;
  Iddd__Filter *event_filter;
  Iddd__Filter *counter_filter;
  Iddd__Filter *staticdata_filter;
};
#define IDDD__FILTER_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__filter_config__descriptor) \
    , NULL, NULL, NULL }


struct  _Iddd__ConfigPlugin__Plugin
{
  ProtobufCMessage base;
  Iddd__PluginId plugin_id;
  char *dir;
  char *report_prefix;
  char *report_prefix_packed;
  int64_t report_max_size;
  int64_t max_output_dir_size;
  protobuf_c_boolean has_client_id;
  int64_t client_id;
  Iddd__FilterConfig *probe_filter;
  protobuf_c_boolean has_report_header;
  protobuf_c_boolean report_header;
  protobuf_c_boolean has_encrypt;
  protobuf_c_boolean encrypt;
  protobuf_c_boolean has_type;
  Iddd__ConfigPlugin__Plugin__Type type;
  protobuf_c_boolean has_ignore_idd_enabled;
  protobuf_c_boolean ignore_idd_enabled;
};
#define IDDD__CONFIG_PLUGIN__PLUGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__config_plugin__plugin__descriptor) \
    , 0, NULL, NULL, NULL, 0, 0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _Iddd__ConfigPlugin
{
  ProtobufCMessage base;
  size_t n_plugin;
  Iddd__ConfigPlugin__Plugin **plugin;
};
#define IDDD__CONFIG_PLUGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iddd__config_plugin__descriptor) \
    , 0,NULL }


/* Iddd__UserConsent methods */
void   iddd__user_consent__init
                     (Iddd__UserConsent         *message);
size_t iddd__user_consent__get_packed_size
                     (const Iddd__UserConsent   *message);
size_t iddd__user_consent__pack
                     (const Iddd__UserConsent   *message,
                      uint8_t             *out);
size_t iddd__user_consent__pack_to_buffer
                     (const Iddd__UserConsent   *message,
                      ProtobufCBuffer     *buffer);
Iddd__UserConsent *
       iddd__user_consent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iddd__user_consent__free_unpacked
                     (Iddd__UserConsent *message,
                      ProtobufCAllocator *allocator);
/* Iddd__Settings methods */
void   iddd__settings__init
                     (Iddd__Settings         *message);
size_t iddd__settings__get_packed_size
                     (const Iddd__Settings   *message);
size_t iddd__settings__pack
                     (const Iddd__Settings   *message,
                      uint8_t             *out);
size_t iddd__settings__pack_to_buffer
                     (const Iddd__Settings   *message,
                      ProtobufCBuffer     *buffer);
Iddd__Settings *
       iddd__settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iddd__settings__free_unpacked
                     (Iddd__Settings *message,
                      ProtobufCAllocator *allocator);
/* Iddd__RunActions methods */
void   iddd__run_actions__init
                     (Iddd__RunActions         *message);
size_t iddd__run_actions__get_packed_size
                     (const Iddd__RunActions   *message);
size_t iddd__run_actions__pack
                     (const Iddd__RunActions   *message,
                      uint8_t             *out);
size_t iddd__run_actions__pack_to_buffer
                     (const Iddd__RunActions   *message,
                      ProtobufCBuffer     *buffer);
Iddd__RunActions *
       iddd__run_actions__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iddd__run_actions__free_unpacked
                     (Iddd__RunActions *message,
                      ProtobufCAllocator *allocator);
/* Iddd__RunActionsOnce methods */
void   iddd__run_actions_once__init
                     (Iddd__RunActionsOnce         *message);
size_t iddd__run_actions_once__get_packed_size
                     (const Iddd__RunActionsOnce   *message);
size_t iddd__run_actions_once__pack
                     (const Iddd__RunActionsOnce   *message,
                      uint8_t             *out);
size_t iddd__run_actions_once__pack_to_buffer
                     (const Iddd__RunActionsOnce   *message,
                      ProtobufCBuffer     *buffer);
Iddd__RunActionsOnce *
       iddd__run_actions_once__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iddd__run_actions_once__free_unpacked
                     (Iddd__RunActionsOnce *message,
                      ProtobufCAllocator *allocator);
/* Iddd__FilterItem methods */
void   iddd__filter_item__init
                     (Iddd__FilterItem         *message);
size_t iddd__filter_item__get_packed_size
                     (const Iddd__FilterItem   *message);
size_t iddd__filter_item__pack
                     (const Iddd__FilterItem   *message,
                      uint8_t             *out);
size_t iddd__filter_item__pack_to_buffer
                     (const Iddd__FilterItem   *message,
                      ProtobufCBuffer     *buffer);
Iddd__FilterItem *
       iddd__filter_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iddd__filter_item__free_unpacked
                     (Iddd__FilterItem *message,
                      ProtobufCAllocator *allocator);
/* Iddd__Filter methods */
void   iddd__filter__init
                     (Iddd__Filter         *message);
size_t iddd__filter__get_packed_size
                     (const Iddd__Filter   *message);
size_t iddd__filter__pack
                     (const Iddd__Filter   *message,
                      uint8_t             *out);
size_t iddd__filter__pack_to_buffer
                     (const Iddd__Filter   *message,
                      ProtobufCBuffer     *buffer);
Iddd__Filter *
       iddd__filter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iddd__filter__free_unpacked
                     (Iddd__Filter *message,
                      ProtobufCAllocator *allocator);
/* Iddd__FilterConfig methods */
void   iddd__filter_config__init
                     (Iddd__FilterConfig         *message);
size_t iddd__filter_config__get_packed_size
                     (const Iddd__FilterConfig   *message);
size_t iddd__filter_config__pack
                     (const Iddd__FilterConfig   *message,
                      uint8_t             *out);
size_t iddd__filter_config__pack_to_buffer
                     (const Iddd__FilterConfig   *message,
                      ProtobufCBuffer     *buffer);
Iddd__FilterConfig *
       iddd__filter_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iddd__filter_config__free_unpacked
                     (Iddd__FilterConfig *message,
                      ProtobufCAllocator *allocator);
/* Iddd__ConfigPlugin__Plugin methods */
void   iddd__config_plugin__plugin__init
                     (Iddd__ConfigPlugin__Plugin         *message);
/* Iddd__ConfigPlugin methods */
void   iddd__config_plugin__init
                     (Iddd__ConfigPlugin         *message);
size_t iddd__config_plugin__get_packed_size
                     (const Iddd__ConfigPlugin   *message);
size_t iddd__config_plugin__pack
                     (const Iddd__ConfigPlugin   *message,
                      uint8_t             *out);
size_t iddd__config_plugin__pack_to_buffer
                     (const Iddd__ConfigPlugin   *message,
                      ProtobufCBuffer     *buffer);
Iddd__ConfigPlugin *
       iddd__config_plugin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iddd__config_plugin__free_unpacked
                     (Iddd__ConfigPlugin *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Iddd__UserConsent_Closure)
                 (const Iddd__UserConsent *message,
                  void *closure_data);
typedef void (*Iddd__Settings_Closure)
                 (const Iddd__Settings *message,
                  void *closure_data);
typedef void (*Iddd__RunActions_Closure)
                 (const Iddd__RunActions *message,
                  void *closure_data);
typedef void (*Iddd__RunActionsOnce_Closure)
                 (const Iddd__RunActionsOnce *message,
                  void *closure_data);
typedef void (*Iddd__FilterItem_Closure)
                 (const Iddd__FilterItem *message,
                  void *closure_data);
typedef void (*Iddd__Filter_Closure)
                 (const Iddd__Filter *message,
                  void *closure_data);
typedef void (*Iddd__FilterConfig_Closure)
                 (const Iddd__FilterConfig *message,
                  void *closure_data);
typedef void (*Iddd__ConfigPlugin__Plugin_Closure)
                 (const Iddd__ConfigPlugin__Plugin *message,
                  void *closure_data);
typedef void (*Iddd__ConfigPlugin_Closure)
                 (const Iddd__ConfigPlugin *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    iddd__plugin_id__descriptor;
extern const ProtobufCMessageDescriptor iddd__user_consent__descriptor;
extern const ProtobufCEnumDescriptor    iddd__user_consent__type__descriptor;
extern const ProtobufCMessageDescriptor iddd__settings__descriptor;
extern const ProtobufCMessageDescriptor iddd__run_actions__descriptor;
extern const ProtobufCMessageDescriptor iddd__run_actions_once__descriptor;
extern const ProtobufCMessageDescriptor iddd__filter_item__descriptor;
extern const ProtobufCMessageDescriptor iddd__filter__descriptor;
extern const ProtobufCEnumDescriptor    iddd__filter__type__descriptor;
extern const ProtobufCMessageDescriptor iddd__filter_config__descriptor;
extern const ProtobufCMessageDescriptor iddd__config_plugin__descriptor;
extern const ProtobufCMessageDescriptor iddd__config_plugin__plugin__descriptor;
extern const ProtobufCEnumDescriptor    iddd__config_plugin__plugin__type__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_idd_2fiddd_2eproto__INCLUDED */
