/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_common_2eproto__INCLUDED
#define PROTOBUF_C_common_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Idd__Header Idd__Header;
typedef struct _Idd__Event Idd__Event;
typedef struct _Idd__StaticData Idd__StaticData;
typedef struct _Idd__Counter Idd__Counter;
typedef struct _Idd__ChecksumError Idd__ChecksumError;
typedef struct _Idd__OverflowError Idd__OverflowError;
typedef struct _Idd__ImportInformation Idd__ImportInformation;
typedef struct _Idd__FilePackageHeader Idd__FilePackageHeader;
typedef struct _Idd__FilePackage Idd__FilePackage;
typedef struct _Idd__Report Idd__Report;
typedef struct _Idd__Events Idd__Events;


/* --- enums --- */

typedef enum _Idd__Header__SecureMode {
  IDD__HEADER__SECURE_MODE__UNKNOWN = 0,
  IDD__HEADER__SECURE_MODE__DEBUG = 1,
  IDD__HEADER__SECURE_MODE__LIVE = 2
} Idd__Header__SecureMode;
typedef enum _Idd__Family {
  IDD__FAMILY__OSE = 0,
  IDD__FAMILY__ANDROID = 1,
  IDD__FAMILY__FRAMEWORK_TEST = 2,
  IDD__FAMILY__FIREFOX = 3,
  IDD__FAMILY__ANDROID_WEAR = 4
} Idd__Family;
typedef enum _Idd__UserConsent {
  IDD__USER_CONSENT__NONE = 0,
  IDD__USER_CONSENT__ANONYMOUS = 1,
  IDD__USER_CONSENT__ALL = 2
} Idd__UserConsent;

/* --- messages --- */

struct  _Idd__Header
{
  ProtobufCMessage base;
  char *product_id;
  char *software_version;
  char *software_variant;
  char *device_id;
  char *build_type;
  protobuf_c_boolean has_family;
  Idd__Family family;
  char *config_checksum;
  char *report_uuid;
  protobuf_c_boolean has_timezone;
  int32_t timezone;
  char *cdf_id;
  char *serial_number;
  char *device_imei;
  size_t n_group_id;
  char **group_id;
  protobuf_c_boolean has_secure_mode;
  Idd__Header__SecureMode secure_mode;
  protobuf_c_boolean has_session_id;
  uint64_t session_id;
  char *android_id;
  protobuf_c_boolean has_user_consent;
  Idd__UserConsent user_consent;
  char *xs_android_id;
  char *xs_guid;
  char *market_model_name;
  char *market_product_name;
  char *internal_product_name;
  char *os_version;
  char *kernel_version;
  char *sony_product_code;
  char *customer_id;
  char *subsystem_version;
};
#define IDD__HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__header__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,IDD__FAMILY__OSE, NULL, NULL, 0,0, NULL, NULL, NULL, 0,NULL, 0,0, 0,0, NULL, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  _Idd__Event
{
  ProtobufCMessage base;
  char *package;
  char *name;
  int64_t timestamp;
  ProtobufCBinaryData payload;
  protobuf_c_boolean has_timezone;
  int32_t timezone;
};
#define IDD__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__event__descriptor) \
    , NULL, NULL, 0, {0,NULL}, 0,0 }


struct  _Idd__StaticData
{
  ProtobufCMessage base;
  char *package;
  char *name;
  char *value;
  int64_t timestamp;
};
#define IDD__STATIC_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__static_data__descriptor) \
    , NULL, NULL, NULL, 0 }


struct  _Idd__Counter
{
  ProtobufCMessage base;
  char *package;
  char *name;
  int64_t value;
  int64_t from_timestamp;
  int64_t to_timestamp;
  protobuf_c_boolean has_is_delta;
  protobuf_c_boolean is_delta;
};
#define IDD__COUNTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__counter__descriptor) \
    , NULL, NULL, 0, 0, 0, 0,0 }


struct  _Idd__ChecksumError
{
  ProtobufCMessage base;
  int64_t timestamp;
};
#define IDD__CHECKSUM_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__checksum_error__descriptor) \
    , 0 }


struct  _Idd__OverflowError
{
  ProtobufCMessage base;
  int64_t timestamp;
  uint32_t number;
  uint32_t min_size;
};
#define IDD__OVERFLOW_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__overflow_error__descriptor) \
    , 0, 0, 0 }


struct  _Idd__ImportInformation
{
  ProtobufCMessage base;
  protobuf_c_boolean has_time_uploaded;
  int64_t time_uploaded;
  char *receipt_uuid;
  protobuf_c_boolean has_file_nr;
  uint32_t file_nr;
  protobuf_c_boolean has_orig_compressed;
  protobuf_c_boolean orig_compressed;
  protobuf_c_boolean has_orig_encrypted;
  protobuf_c_boolean orig_encrypted;
  protobuf_c_boolean has_file_size;
  uint32_t file_size;
};
#define IDD__IMPORT_INFORMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__import_information__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _Idd__FilePackageHeader
{
  ProtobufCMessage base;
  char *uuid;
  protobuf_c_boolean has_crc32;
  int32_t crc32;
  protobuf_c_boolean has_timestamp;
  int64_t timestamp;
  char *serial_number;
  char *device_imei;
  char *product_id;
  char *software_version;
  char *software_variant;
  char *build_type;
  protobuf_c_boolean has_timezone;
  int32_t timezone;
  char *cdf_id;
  char *app_package;
  char *filename;
};
#define IDD__FILE_PACKAGE_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__file_package_header__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, NULL, NULL, NULL }


struct  _Idd__FilePackage
{
  ProtobufCMessage base;
  Idd__FilePackageHeader *filepackageheader;
  ProtobufCBinaryData payload;
};
#define IDD__FILE_PACKAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__file_package__descriptor) \
    , NULL, {0,NULL} }


struct  _Idd__Report
{
  ProtobufCMessage base;
  Idd__Header *header;
  size_t n_events;
  Idd__Event **events;
  size_t n_counters;
  Idd__Counter **counters;
  size_t n_statics;
  Idd__StaticData **statics;
  protobuf_c_boolean has_compressed_data;
  ProtobufCBinaryData compressed_data;
  protobuf_c_boolean has_encryption_key;
  ProtobufCBinaryData encryption_key;
  protobuf_c_boolean has_encryption_iv;
  ProtobufCBinaryData encryption_iv;
  protobuf_c_boolean has_encrypted_compressed_data;
  ProtobufCBinaryData encrypted_compressed_data;
  Idd__ImportInformation *import_info;
  size_t n_checksum_errors;
  Idd__ChecksumError **checksum_errors;
  size_t n_overflow_errors;
  Idd__OverflowError **overflow_errors;
};
#define IDD__REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__report__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, NULL, 0,NULL, 0,NULL }


struct  _Idd__Events
{
  ProtobufCMessage base;
  size_t n_events;
  Idd__Event **events;
};
#define IDD__EVENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&idd__events__descriptor) \
    , 0,NULL }


/* Idd__Header methods */
void   idd__header__init
                     (Idd__Header         *message);
size_t idd__header__get_packed_size
                     (const Idd__Header   *message);
size_t idd__header__pack
                     (const Idd__Header   *message,
                      uint8_t             *out);
size_t idd__header__pack_to_buffer
                     (const Idd__Header   *message,
                      ProtobufCBuffer     *buffer);
Idd__Header *
       idd__header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__header__free_unpacked
                     (Idd__Header *message,
                      ProtobufCAllocator *allocator);
/* Idd__Event methods */
void   idd__event__init
                     (Idd__Event         *message);
size_t idd__event__get_packed_size
                     (const Idd__Event   *message);
size_t idd__event__pack
                     (const Idd__Event   *message,
                      uint8_t             *out);
size_t idd__event__pack_to_buffer
                     (const Idd__Event   *message,
                      ProtobufCBuffer     *buffer);
Idd__Event *
       idd__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__event__free_unpacked
                     (Idd__Event *message,
                      ProtobufCAllocator *allocator);
/* Idd__StaticData methods */
void   idd__static_data__init
                     (Idd__StaticData         *message);
size_t idd__static_data__get_packed_size
                     (const Idd__StaticData   *message);
size_t idd__static_data__pack
                     (const Idd__StaticData   *message,
                      uint8_t             *out);
size_t idd__static_data__pack_to_buffer
                     (const Idd__StaticData   *message,
                      ProtobufCBuffer     *buffer);
Idd__StaticData *
       idd__static_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__static_data__free_unpacked
                     (Idd__StaticData *message,
                      ProtobufCAllocator *allocator);
/* Idd__Counter methods */
void   idd__counter__init
                     (Idd__Counter         *message);
size_t idd__counter__get_packed_size
                     (const Idd__Counter   *message);
size_t idd__counter__pack
                     (const Idd__Counter   *message,
                      uint8_t             *out);
size_t idd__counter__pack_to_buffer
                     (const Idd__Counter   *message,
                      ProtobufCBuffer     *buffer);
Idd__Counter *
       idd__counter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__counter__free_unpacked
                     (Idd__Counter *message,
                      ProtobufCAllocator *allocator);
/* Idd__ChecksumError methods */
void   idd__checksum_error__init
                     (Idd__ChecksumError         *message);
size_t idd__checksum_error__get_packed_size
                     (const Idd__ChecksumError   *message);
size_t idd__checksum_error__pack
                     (const Idd__ChecksumError   *message,
                      uint8_t             *out);
size_t idd__checksum_error__pack_to_buffer
                     (const Idd__ChecksumError   *message,
                      ProtobufCBuffer     *buffer);
Idd__ChecksumError *
       idd__checksum_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__checksum_error__free_unpacked
                     (Idd__ChecksumError *message,
                      ProtobufCAllocator *allocator);
/* Idd__OverflowError methods */
void   idd__overflow_error__init
                     (Idd__OverflowError         *message);
size_t idd__overflow_error__get_packed_size
                     (const Idd__OverflowError   *message);
size_t idd__overflow_error__pack
                     (const Idd__OverflowError   *message,
                      uint8_t             *out);
size_t idd__overflow_error__pack_to_buffer
                     (const Idd__OverflowError   *message,
                      ProtobufCBuffer     *buffer);
Idd__OverflowError *
       idd__overflow_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__overflow_error__free_unpacked
                     (Idd__OverflowError *message,
                      ProtobufCAllocator *allocator);
/* Idd__ImportInformation methods */
void   idd__import_information__init
                     (Idd__ImportInformation         *message);
size_t idd__import_information__get_packed_size
                     (const Idd__ImportInformation   *message);
size_t idd__import_information__pack
                     (const Idd__ImportInformation   *message,
                      uint8_t             *out);
size_t idd__import_information__pack_to_buffer
                     (const Idd__ImportInformation   *message,
                      ProtobufCBuffer     *buffer);
Idd__ImportInformation *
       idd__import_information__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__import_information__free_unpacked
                     (Idd__ImportInformation *message,
                      ProtobufCAllocator *allocator);
/* Idd__FilePackageHeader methods */
void   idd__file_package_header__init
                     (Idd__FilePackageHeader         *message);
size_t idd__file_package_header__get_packed_size
                     (const Idd__FilePackageHeader   *message);
size_t idd__file_package_header__pack
                     (const Idd__FilePackageHeader   *message,
                      uint8_t             *out);
size_t idd__file_package_header__pack_to_buffer
                     (const Idd__FilePackageHeader   *message,
                      ProtobufCBuffer     *buffer);
Idd__FilePackageHeader *
       idd__file_package_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__file_package_header__free_unpacked
                     (Idd__FilePackageHeader *message,
                      ProtobufCAllocator *allocator);
/* Idd__FilePackage methods */
void   idd__file_package__init
                     (Idd__FilePackage         *message);
size_t idd__file_package__get_packed_size
                     (const Idd__FilePackage   *message);
size_t idd__file_package__pack
                     (const Idd__FilePackage   *message,
                      uint8_t             *out);
size_t idd__file_package__pack_to_buffer
                     (const Idd__FilePackage   *message,
                      ProtobufCBuffer     *buffer);
Idd__FilePackage *
       idd__file_package__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__file_package__free_unpacked
                     (Idd__FilePackage *message,
                      ProtobufCAllocator *allocator);
/* Idd__Report methods */
void   idd__report__init
                     (Idd__Report         *message);
size_t idd__report__get_packed_size
                     (const Idd__Report   *message);
size_t idd__report__pack
                     (const Idd__Report   *message,
                      uint8_t             *out);
size_t idd__report__pack_to_buffer
                     (const Idd__Report   *message,
                      ProtobufCBuffer     *buffer);
Idd__Report *
       idd__report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__report__free_unpacked
                     (Idd__Report *message,
                      ProtobufCAllocator *allocator);
/* Idd__Events methods */
void   idd__events__init
                     (Idd__Events         *message);
size_t idd__events__get_packed_size
                     (const Idd__Events   *message);
size_t idd__events__pack
                     (const Idd__Events   *message,
                      uint8_t             *out);
size_t idd__events__pack_to_buffer
                     (const Idd__Events   *message,
                      ProtobufCBuffer     *buffer);
Idd__Events *
       idd__events__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   idd__events__free_unpacked
                     (Idd__Events *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Idd__Header_Closure)
                 (const Idd__Header *message,
                  void *closure_data);
typedef void (*Idd__Event_Closure)
                 (const Idd__Event *message,
                  void *closure_data);
typedef void (*Idd__StaticData_Closure)
                 (const Idd__StaticData *message,
                  void *closure_data);
typedef void (*Idd__Counter_Closure)
                 (const Idd__Counter *message,
                  void *closure_data);
typedef void (*Idd__ChecksumError_Closure)
                 (const Idd__ChecksumError *message,
                  void *closure_data);
typedef void (*Idd__OverflowError_Closure)
                 (const Idd__OverflowError *message,
                  void *closure_data);
typedef void (*Idd__ImportInformation_Closure)
                 (const Idd__ImportInformation *message,
                  void *closure_data);
typedef void (*Idd__FilePackageHeader_Closure)
                 (const Idd__FilePackageHeader *message,
                  void *closure_data);
typedef void (*Idd__FilePackage_Closure)
                 (const Idd__FilePackage *message,
                  void *closure_data);
typedef void (*Idd__Report_Closure)
                 (const Idd__Report *message,
                  void *closure_data);
typedef void (*Idd__Events_Closure)
                 (const Idd__Events *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    idd__family__descriptor;
extern const ProtobufCEnumDescriptor    idd__user_consent__descriptor;
extern const ProtobufCMessageDescriptor idd__header__descriptor;
extern const ProtobufCEnumDescriptor    idd__header__secure_mode__descriptor;
extern const ProtobufCMessageDescriptor idd__event__descriptor;
extern const ProtobufCMessageDescriptor idd__static_data__descriptor;
extern const ProtobufCMessageDescriptor idd__counter__descriptor;
extern const ProtobufCMessageDescriptor idd__checksum_error__descriptor;
extern const ProtobufCMessageDescriptor idd__overflow_error__descriptor;
extern const ProtobufCMessageDescriptor idd__import_information__descriptor;
extern const ProtobufCMessageDescriptor idd__file_package_header__descriptor;
extern const ProtobufCMessageDescriptor idd__file_package__descriptor;
extern const ProtobufCMessageDescriptor idd__report__descriptor;
extern const ProtobufCMessageDescriptor idd__events__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_common_2eproto__INCLUDED */
